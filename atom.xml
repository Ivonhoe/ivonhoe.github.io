<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>病已的博客</title>
  <icon>https://www.gravatar.com/avatar/67e58323dd67029db2c4cf9876795431</icon>
  <subtitle>枕上，马上，厕上</subtitle>
  <link href="https://ivonhoe.github.io/atom.xml" rel="self"/>
  
  <link href="https://ivonhoe.github.io/"/>
  <updated>2022-04-06T15:51:34.160Z</updated>
  <id>https://ivonhoe.github.io/</id>
  
  <author>
    <name>病已</name>
    <email>yangfan3687@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>访问者模式</title>
    <link href="https://ivonhoe.github.io/2021/03/28/design-patterns-visitor/"/>
    <id>https://ivonhoe.github.io/2021/03/28/design-patterns-visitor/</id>
    <published>2021-03-27T16:19:59.000Z</published>
    <updated>2022-04-06T15:51:34.160Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>在实际工作中经常用到访问者模式，是比较常见的设计模式，本文主要通过以下几个方面来学习访问者模式：</p><ol><li>什么是访问者模式，访问者模式想要解决的问题是什么？</li><li>访问者模式的经典应用有哪些?</li></ol><h3 id="0x01-单分派和双重分派"><a href="#0x01-单分派和双重分派" class="headerlink" title="0x01 单分派和双重分派"></a>0x01 单分派和双重分派</h3><p>在介绍设计模式之前，先了解几个基础的概念。了解概念的含义并不是为了咬文嚼字，而是希望能从原理上理解设计模式背后想要解决的问题</p><h4 id="重写（override）和重载（overload）"><a href="#重写（override）和重载（overload）" class="headerlink" title="重写（override）和重载（overload）"></a>重写（override）和重载（overload）</h4><ul><li>重写，就是子类重写了父类的方法，返回值和形参都不能改变。当子类对象调用重写的方法时，调用的是子类的方法，而不是父类中被重写的方法。</li><li>重载，在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。</li></ul><h4 id="单分派和双重分派"><a href="#单分派和双重分派" class="headerlink" title="单分派和双重分派"></a>单分派和双重分派</h4><ul><li>分派（Dispatch），在面向对象的语言中，可以把一次函数调动理解成一个消息事件的分发，如<code>a.test(b)</code>，a就是消息的接受者，这个函数的调用方就是消息的发送者。</li><li>单分派（Single Dispatch），这里的单（Single）指的是，哪个对象的方法会被执行，只跟这个对象的运行时类型有关。以<code>a.test(b)</code>为例，如在Java中，在被执行的test函数，只跟a对象的运行时类型有关。</li><li>双重分派(Double Dispatch)，这里的双（double）指的是，哪个对象的方法被执行，跟对象和方法参数的运行时类型都有关。还是以<code>a.test(b)</code>为例，哪个test函数被执行，不单单和a对象的类型有关还和b对象的类型有关。</li></ul><p>可以看到所谓分派就是函数的调用，所谓单分派和双分派就是和语言的多态特性有关，在常见的Java，C++，C#语言中，在语言层面都是只支持单分派的。想要实现双重分派，就要借助设计模式，比如访问者模式。你肯定会问，双重分派的作用是什么？不解决双重分派的问题不行吗？其实这种问题在项目代码中一定俯拾皆是，类似下面的这种代码，我们想要针对不同类型的文件（pdf，ppt，word）执行不同的文件提取和文件压缩操作。试想下，可能是你来实现，你要怎么做？是不是很容易写出下面这样的代码</p><figure class="highlight haskell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Extractor</span> extends <span class="hljs-type">Processor</span> &#123;</span><br><span class="hljs-class">void processFile(<span class="hljs-type">ResourceFile</span> <span class="hljs-title">file</span>) &#123;</span><br><span class="hljs-class">    if (<span class="hljs-title">file</span> <span class="hljs-title">instanceof</span> <span class="hljs-type">PdfFile</span>) &#123;</span><br><span class="hljs-class">        processPrdFile((<span class="hljs-type">PdfFile</span>)file);</span><br><span class="hljs-class">    &#125; else if (<span class="hljs-title">file</span> <span class="hljs-title">instanceof</span> <span class="hljs-type">PowerPointFile</span>) &#123;</span><br><span class="hljs-class">        processPowerPointFile((<span class="hljs-type">PowerPointFile</span>)e);</span><br><span class="hljs-class">    &#125; else if (<span class="hljs-title">file</span> <span class="hljs-title">instanceof</span> <span class="hljs-type">WordFile</span>) &#123;</span><br><span class="hljs-class">        processWordFile((<span class="hljs-type">WordFile</span>)e);</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Compressor</span> extends <span class="hljs-type">Processor</span> &#123;</span><br><span class="hljs-class">void processFile(<span class="hljs-type">ResourceFile</span> <span class="hljs-title">file</span>) &#123;</span><br><span class="hljs-class">    if (<span class="hljs-title">file</span> <span class="hljs-title">instanceof</span> <span class="hljs-type">PdfFile</span>) &#123;</span><br><span class="hljs-class">        processPrdFile((<span class="hljs-type">PdfFile</span>)file);</span><br><span class="hljs-class">    &#125; else if (<span class="hljs-title">file</span> <span class="hljs-title">instanceof</span> <span class="hljs-type">PowerPointFile</span>) &#123;</span><br><span class="hljs-class">        processPowerPointFile((<span class="hljs-type">PowerPointFile</span>)e);</span><br><span class="hljs-class">    &#125; else if (<span class="hljs-title">file</span> <span class="hljs-title">instanceof</span> <span class="hljs-type">WordFile</span>) &#123;</span><br><span class="hljs-class">        processWordFile((<span class="hljs-type">WordFile</span>)e);</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">&#125;</span><br></code></pre></td></tr></table></figure><p>可以看到这段代码的逻辑执行，既要根据接收者的运行时类型来决定<code>processXXXFile(file)</code>的执行，这里的接收者可以理解成是当前方法所对应的<code>Processor</code>对象。又要根据<code>ResourceFile file</code>对象的运行时的实际类型来做类型的判断，这里就会有很多<code>instanceof</code>和<code>else if</code>,<code>switch case</code>的多重嵌套。这种设计的代码虽然可以实现功能，但是在面对需求变更和扩展时会非常不灵活，既要加很多<code>else if</code>，也不利于功能的内聚和复用。那么这些代码如果用访问者模式，应该怎么来实现呢？这里借用王争在&lt;&lt;设计模式之美&gt;&gt;中的实例代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResourceFile</span> &#123;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-title class_">String</span> filePath;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title class_">ResourceFile</span>(<span class="hljs-title class_">String</span> filePath) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">filePath</span> = filePath;<br>  &#125;<br>  <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">accept</span>(<span class="hljs-title class_">Visitor</span> vistor);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PdfFile</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">ResourceFile</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title class_">PdfFile</span>(<span class="hljs-title class_">String</span> filePath) &#123;<br>    <span class="hljs-variable language_">super</span>(filePath);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">accept</span>(<span class="hljs-params">Visitor visitor</span>) &#123;<br>    visitor.<span class="hljs-title function_">visit</span>(<span class="hljs-variable language_">this</span>);<br>  &#125;<br><br>  <span class="hljs-comment">//...</span><br>&#125;<br><span class="hljs-comment">//...PPTFile、WordFile跟PdfFile类似，这里就省略了...</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Visitor</span> &#123;<br>  <span class="hljs-built_in">void</span> <span class="hljs-title function_">visit</span>(<span class="hljs-title class_">PdfFile</span> pdfFile);<br>  <span class="hljs-built_in">void</span> <span class="hljs-title function_">visit</span>(<span class="hljs-title class_">PPTFile</span> pdfFile);<br>  <span class="hljs-built_in">void</span> <span class="hljs-title function_">visit</span>(<span class="hljs-title class_">WordFile</span> pdfFile);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Extractor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Visitor</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">visit</span>(<span class="hljs-params">PPTFile pptFile</span>) &#123;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Extract PPT.&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">visit</span>(<span class="hljs-params">PdfFile pdfFile</span>) &#123;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Extract PDF.&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">visit</span>(<span class="hljs-params">WordFile wordFile</span>) &#123;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Extract WORD.&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Compressor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Visitor</span> &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">visit</span>(<span class="hljs-params">PPTFile pptFile</span>) &#123;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Compress PPT.&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">visit</span>(<span class="hljs-params">PdfFile pdfFile</span>) &#123;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Compress PDF.&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">visit</span>(<span class="hljs-params">WordFile wordFile</span>) &#123;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Compress WORD.&quot;</span>);<br>  &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ToolApplication</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>    <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">ResourceFile</span>&gt; resourceFiles = <span class="hljs-title function_">listAllResourceFiles</span>(args[<span class="hljs-number">0</span>]);<br><br>    <span class="hljs-title class_">Extractor</span> extractor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Extractor</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-title class_">ResourceFile</span> resourceFile : resourceFiles) &#123;<br>      resourceFile.<span class="hljs-title function_">accept</span>(extractor);<br>    &#125;<br><br>    <span class="hljs-title class_">Compressor</span> compressor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Compressor</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-title class_">ResourceFile</span> resourceFile : resourceFiles) &#123;<br>      resourceFile.<span class="hljs-title function_">accept</span>(compressor);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">ResourceFile</span>&gt; <span class="hljs-title function_">listAllResourceFiles</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> resourceDirectory</span>) &#123;<br>    <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">ResourceFile</span>&gt; resourceFiles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">//...根据后缀(pdf/ppt/word)由工厂方法创建不同的类对象(PdfFile/PPTFile/WordFile)</span><br>    resourceFiles.<span class="hljs-title function_">add</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PdfFile</span>(<span class="hljs-string">&quot;a.pdf&quot;</span>));<br>    resourceFiles.<span class="hljs-title function_">add</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WordFile</span>(<span class="hljs-string">&quot;b.word&quot;</span>));<br>    resourceFiles.<span class="hljs-title function_">add</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PPTFile</span>(<span class="hljs-string">&quot;c.ppt&quot;</span>));<br>    <span class="hljs-keyword">return</span> resourceFiles;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0x02-ASM中的访问者模式"><a href="#0x02-ASM中的访问者模式" class="headerlink" title="0x02 ASM中的访问者模式"></a>0x02 ASM中的访问者模式</h3><p>上面介绍了访问者模式设计初衷和设计方法，这里再看下访问者模式在实际工程中的应用。访问者模式最常见的应用场景就是访问复杂的结构或者对象，在不改变数据结构的情况下，将数据访问和数据操作分离出来，用回调的方式在访问者中处理业务逻辑。在面对不同的访问处理时，只需要新定义一个访问者实现不同的访问处理逻辑就可以了。这样说可能也很抽象，可以在在ASM中，是如何利用访问者的设计模式，实现字节码文件的读取和修改的。<br />ASM使用ClassReader遍历class文件结构获取文件中的类和对象信息，在其accept方法中接收ClassVisitor，在ClassVisitor的不同回调方法中完成不同的字节码操作。可以通过代码示例看到主要有以下几个类：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ClassReader cr = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ClassReader(<span class="hljs-params">inputStream</span>)</span>;<br>ClassWriter cw = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ClassWriter(<span class="hljs-params">cr</span>, 0)</span>;<br><br>ClassVisitor cv = <span class="hljs-keyword">new</span> <span class="hljs-constructor">InjectCassVisitor(ASM6, <span class="hljs-params">cw</span>, <span class="hljs-params">methodName</span>)</span>;<br>cr.accept(cv, <span class="hljs-number">0</span>);<br>return cw.<span class="hljs-keyword">to</span><span class="hljs-constructor">ByteArray()</span>;<br></code></pre></td></tr></table></figure><ul><li>ClassReader（Element）：将不同输入类型的字节码读取到内存中，通过accept方法接受ClassVisitor的访问。</li><li>ClassVisitor（Visitor）：完全由开发者自定义不同类型的Visitor，在Visitor的visitXXX回调中接收读取到的字节码信息并进行相应的处理。</li></ul><h3 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h3><p>利用访问者模式来解决这样的双重分派问题，如上面的类图所示，通过几个角色来做功能的区分，将文件的访问和处理分离成两个独立的接口。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/411436/1648478340921-52d95fa8-489f-4098-b1c7-f86c7337fe4f.png#clientId=u9509d57c-feb4-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=390&id=rpEg9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=780&originWidth=830&originalType=binary&ratio=1&rotation=0&showTitle=false&size=134454&status=done&style=none&taskId=u9699865e-5f29-4b7e-a0e9-4eee905c3bd&title=&width=415" alt="image.png"></p><ul><li><strong>访问者（Visitor）</strong>，这里指不同类型的文件操作。用一个接口和一组不同类型的具体实现来定义不同的操作类型。</li><li><strong>被访问者（Element）</strong>，这里指不同类型的文件。定义了accept操作，以Visitor作为参数，来接受不同类型visitor的对象访问。在accept方法中将this传递给访问者，通过回调再回调的操作，实现了双重分派。</li><li><strong>对象结构（ObjectStructure）</strong>，访问的组织者，可以是组合也可以是集合；能够枚举它包含的元素；提供一个接口，允许Vistor访问它的元素。</li></ul><p><strong>理解访问者模式的设计，我觉得重点在理解所谓的回调再回调。这里有两次回调就意味着有两种类型接口，第一次回调是被访问者通过accept接受访问者，第二次回调是访问者通过visit方法访问被访问者，通过两次互相调换类型的调用，也就是通过两次单分派实现了双重分派。</strong></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>王争&lt;&lt;设计模式之美&gt;&gt;<br /><a href="https://www.jianshu.com/p/cd17bae4e949">https://www.jianshu.com/p/cd17bae4e949</a><br /><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1281319659110433">https://www.liaoxuefeng.com/wiki/1252599548343744/1281319659110433</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;在实际工作中经常用到访问者模式，是比较常见的设计模式，本文主要通过以下几个方面来学习访问者模式：&lt;/</summary>
      
    
    
    
    <category term="方案与设计" scheme="https://ivonhoe.github.io/categories/%E6%96%B9%E6%A1%88%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="设计模式" scheme="https://ivonhoe.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="https://ivonhoe.github.io/2021/03/28/design-patterns-proxy/"/>
    <id>https://ivonhoe.github.io/2021/03/28/design-patterns-proxy/</id>
    <published>2021-03-27T16:19:47.000Z</published>
    <updated>2022-04-06T15:54:00.226Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>其实在日常生活中我们经常和代理模式打交道，比如当我们需要预定酒店时，我们（使用方）通常选择类似携程这样的平台来进行酒店和机票的预定，这里携程（代理）就代理了和酒店（服务提供方）之间的预订流程，使用方通过代理实现了和真实服务提供者之间的操作，那么为什么会使用代理而不是直接和服务提供方进行业务操作呢？可以通过以下两方面来考量：</p><ol><li>代理降低了沟通成本，使用者不需要和服务提供方建立通讯，所有的通讯都通过代理商来完成，这样就将1对多的关系简化成1对1的关系，简化了业务流程，降低沟通成本。</li><li>隐藏了服务提供者之间的差异，拿订酒店这件事情为例，让用户只需要关注到订酒店这件事情，和订酒店无关的其他事情都由代理商来做了</li></ol><h5 id="什么是「代理模式」？"><a href="#什么是「代理模式」？" class="headerlink" title="什么是「代理模式」？"></a>什么是「代理模式」？</h5><p>代理控制了对象的真实访问。代理模式是指，在不改变原始类（或叫被代理类）代码的情况下，通过引入代理类来给原始类附加功能。<strong>主要解决在直接访问对象时带来的问题</strong>，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。<br />这里直接访问对象时带来的问题，可以类比上面生活中的例子，车站买票太远（对象单次访问成本高）选择用代买点买票。直接去酒店订房间太麻烦（实现功能的对象太多无法直接选择出最佳的对象）而选择在酒店平台预定酒店。</p><h3 id="0x01-Binder中的静态代理"><a href="#0x01-Binder中的静态代理" class="headerlink" title="0x01 Binder中的静态代理"></a>0x01 Binder中的静态代理</h3><p>几乎所有安卓开发应该都应该知道，binder是android中实现进程间通信的方案，也都听说过所谓共享内存、Socket、管道、消息队列等等一系列其他的进程间通信（IPC）的方案，甚至听说过诸如dubbo，spring cloud之类的远程过程调用（RPC）。这里binder作为一个IPC方案同时在设计上又有很多RPC方案的影子，如果说想要理解RPC，<strong>这里一定绕不开代理模式</strong>。不管是Android的binder还是后端消息中间件dubbo都是使用代理模式来做设计的，在通讯的两端分别用代理隐藏实际的通信细节，让调用方像调用自己进程内对象方法一样实现对跨进程对象的调用。你比较熟悉组件化开发的话，也可以先从组件化的视角来类比binder通信，如果让你来实现一个进程间通信的架构方案，有哪些东西是必不可少的呢？</p><p><strong>先类比组件化</strong></p><ol><li><strong>面向接口的设计</strong>，组件间通信，通过接口暴露组件能力</li><li><strong>通过一个manager查询接口对应的服务实例</strong>，组件间相互调用，意味着组件间能够通过某种方式获取定义的组件接口所对应的实例对象，实现调用其他组件的方法就像调用自己内部方法一样</li><li><strong>服务的注册和查询</strong>，想要获取响应的接口实现，意味着有一个类似路由和路由表的东西，通过一个路由服务查询到具体的接口实现对象</li><li>其他高性能、安全性、稳定性的设计</li></ol><p><strong>再看Binder IPC</strong>，</p><ol><li>开发者使用AIDL实现进程间通信接口的定义</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs reasonml">interface IMyAidlInterface &#123;<br>    Response aidl<span class="hljs-constructor">Get(<span class="hljs-params">in</span> Request <span class="hljs-params">request</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>调用者client通过context bindService获取远程服务的代理对象，通过<code>queryLocalInterface</code>和<code>Stub.DESCRIPTOR</code>查询到远程服务在client的代理对象</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> com.<span class="hljs-property">android</span>.<span class="hljs-property">aidldemo</span>.<span class="hljs-property">IMyAidlInterface</span> <span class="hljs-title function_">asInterface</span>(<span class="hljs-params">android.os.IBinder obj</span>) &#123;<br>    <span class="hljs-keyword">if</span> ((obj == <span class="hljs-literal">null</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    android.<span class="hljs-property">os</span>.<span class="hljs-property">IInterface</span> iin = obj.<span class="hljs-title function_">queryLocalInterface</span>(<span class="hljs-variable constant_">DESCRIPTOR</span>);<br>    <span class="hljs-keyword">if</span> (((iin != <span class="hljs-literal">null</span>) &amp;&amp; (iin <span class="hljs-keyword">instanceof</span> com.<span class="hljs-property">android</span>.<span class="hljs-property">aidldemo</span>.<span class="hljs-property">IMyAidlInterface</span>))) &#123;<br>        <span class="hljs-keyword">return</span> ((com.<span class="hljs-property">android</span>.<span class="hljs-property">aidldemo</span>.<span class="hljs-property">IMyAidlInterface</span>) iin);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> com.<span class="hljs-property">android</span>.<span class="hljs-property">aidldemo</span>.<span class="hljs-property">IMyAidlInterface</span>.<span class="hljs-property">Stub</span>.<span class="hljs-title class_">Proxy</span>(obj);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>对client来说，Binder代理对象<code>Stub.proxy</code>隐藏了和远程服务对象真实通信的细节，client不需要关心这个代理对象是不是真实的服务实现方，就像调用本地方法一样调用原生服务对象。而<code>Stub.proxy</code>实现了调用参数的序列化和响应结果的序列化，帮助client拿到了远程调用的结果。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/411436/1648478466765-f2a0a569-415d-4c4e-90ba-3ea37b20bce8.png#clientId=udd0e86b6-737e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=262&id=ua9bbe8f6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=524&originWidth=627&originalType=binary&ratio=1&rotation=0&showTitle=false&size=232289&status=done&style=none&taskId=u7c80ef72-e3a2-46df-a9bb-1272ff293d5&title=&width=313.5" alt="image.png"></li></ol><p>可以对照下图理解代理过程：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/411436/1648478479146-a37ec35d-b206-4228-bd82-35cc36736701.png#clientId=udd0e86b6-737e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=260&id=u06c52024&margin=%5Bobject%20Object%5D&name=image.png&originHeight=520&originWidth=1000&originalType=binary&ratio=1&rotation=0&showTitle=false&size=243389&status=done&style=none&taskId=u3048a8ed-2f97-4f4e-beb2-4f3da2acc86&title=&width=500" alt="image.png"></p><p>同样的角色分布我们可以再看看系统的ActivityManagerService。IActivityManager是一个服务接口，代表了服务能力。ActivityManagerNative代表系统本地服务，ActivityManagerService是它的具体实现。而ActivityMangerProxy代表在app中的Binder代理对象，实现client到service调用的代理转发。</p><h3 id="0x02-Retrofit中的动态代理"><a href="#0x02-Retrofit中的动态代理" class="headerlink" title="0x02 Retrofit中的动态代理"></a>0x02 Retrofit中的动态代理</h3><p>相比较Binder的静态代理，retrofit使用了动态代理模式。所谓动态代理模式，是指并没有手动创建一个代理类，而是使用动态字节码的方式创建代理类（用class生成class），然后使用反射的方式创建代理类的对象，再使用反射方式调用被代理的方法。可以先看一个在java中最简单的动态代理写法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestProxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> args[]</span>) &#123;<br>        <span class="hljs-title class_">Subject</span> subject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealSubject</span>();<br><br>        <span class="hljs-title class_">InvocationHandler</span> handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">invoke</span>(<span class="hljs-title class_">Object</span> proxy, <span class="hljs-title class_">Method</span> method, <span class="hljs-title class_">Object</span>[] args) throws <span class="hljs-title class_">Throwable</span> &#123;<br>                <span class="hljs-title class_">Object</span> result = <span class="hljs-literal">null</span>;<br>                <span class="hljs-comment">//在调用具体函数方法前，执行功能处理</span><br>                result = method.<span class="hljs-title function_">invoke</span>(subject, args);<br>                <span class="hljs-comment">//在调用具体函数方法后，执行功能处理</span><br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-title class_">Subject</span> <span class="hljs-built_in">object</span> = (<span class="hljs-title class_">Subject</span>) <span class="hljs-title class_">Proxy</span>.<span class="hljs-title function_">newProxyInstance</span>(subject.<span class="hljs-title function_">getClass</span>().<span class="hljs-title function_">getClassLoader</span>(),<br>                subject.<span class="hljs-title function_">getClass</span>().<span class="hljs-title function_">getInterfaces</span>(), handler);<br>        <span class="hljs-built_in">object</span>.<span class="hljs-title function_">doSomething</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们使用<code>Proxy.newProxyInstance</code>和<code>InvocationHandler</code>动态构造代理对象，通过获取invoke method注解对请求的描述信息，生成<code>ServiceMethod</code>对象，并根据该对象执行相应的网络请求。</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-keyword">create</span>(<span class="hljs-keyword">final</span> <span class="hljs-keyword">Class</span>&lt;T&gt; service) <span class="hljs-comment">&#123;</span><br><span class="hljs-comment">validateServiceInterface(service);</span><br><span class="hljs-comment">return (T)</span><br><span class="hljs-comment">    Proxy.newProxyInstance(</span><br><span class="hljs-comment">        service.getClassLoader(),</span><br><span class="hljs-comment">        new Class&lt;?&gt;[] &#123;service&#125;</span>,<br>        <span class="hljs-keyword">new</span> InvocationHandler() <span class="hljs-comment">&#123;</span><br><span class="hljs-comment">          private final Platform platform = Platform.get();</span><br><span class="hljs-comment">          private final Object[] emptyArgs = new Object[0];</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">          @Override</span><br><span class="hljs-comment">          public @Nullable Object invoke(Object proxy, Method method, @Nullable Object[] args)</span><br><span class="hljs-comment">              throws Throwable &#123;</span><br><span class="hljs-comment">            // If the method is a method from Object then defer to normal invocation.</span><br><span class="hljs-comment">            if (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="hljs-comment">              return method.invoke(this, args);</span><br><span class="hljs-comment">            &#125;</span><br>            args = args != null ? args : emptyArgs<span class="hljs-punctuation">;</span><br>            return <span class="hljs-keyword">platform</span>.isDefaultMethod(<span class="hljs-keyword">method</span>)<br>                ? <span class="hljs-title function_">platform</span>.<span class="hljs-title function_">invokeDefaultMethod</span><span class="hljs-params">(<span class="hljs-keyword">method</span>, service, proxy, args)</span><br>                : loadServiceMethod(<span class="hljs-keyword">method</span>).<span class="hljs-title function_">invoke</span><span class="hljs-params">(args)</span>;<br>          &#125;<br>        &#125;)<span class="hljs-punctuation">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/411436/1648478503438-ecd40a20-c673-4c8f-a9af-3193342b78b5.png#clientId=udd0e86b6-737e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=226&id=uc7b7bc1e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=302&originWidth=538&originalType=binary&ratio=1&rotation=0&showTitle=false&size=66420&status=done&style=none&taskId=u15f526ec-58a7-4fc5-a6c3-09d54bdcc7f&title=&width=402" alt="image.png"></p><h3 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h3><p>这里借用知乎大佬的一张图，同时对比下静态代理和动态代理的差异，主要在于代理类如何生成。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/411436/1648478510603-6db1c76d-0efa-4d68-927e-50d801a4b26c.png#clientId=udd0e86b6-737e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=127&id=uab5d01e8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=201&originWidth=734&originalType=binary&ratio=1&rotation=0&showTitle=false&size=81824&status=done&style=none&taskId=ubd716343-6f89-4764-accd-b30b31c4719&title=&width=463" alt="image.png"></p><p>如果是编译或者编码过程中生成的代理类就是静态代理，所以静态代理的一个缺点就是会生成很多代理类。<br />如果在运行时或者编译时动态生成的代理类，一般就是动态代理。可以通过接口的Class对象，创建一个代理Class，通过代理Class创建代理对象。也就是所谓的用Class造Class。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://weishu.me/2016/01/12/binder-index-for-newer/">http://weishu.me/2016/01/12/binder-index-for-newer/</a><br /><a href="https://zhuanlan.zhihu.com/p/35519585">https://zhuanlan.zhihu.com/p/35519585</a><br /><a href="http://gityuan.com/2016/09/04/binder-start-service/">http://gityuan.com/2016/09/04/binder-start-service/</a><br /><a href="https://www.zhihu.com/question/20794107">https://www.zhihu.com/question/20794107</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;其实在日常生活中我们经常和代理模式打交道，比如当我们需要预定酒店时，我们（使用方）通常选择类似携程这</summary>
      
    
    
    
    <category term="方案与设计" scheme="https://ivonhoe.github.io/categories/%E6%96%B9%E6%A1%88%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="设计模式" scheme="https://ivonhoe.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>责任链模式</title>
    <link href="https://ivonhoe.github.io/2021/03/28/design-patterns-chain-of-responsibility/"/>
    <id>https://ivonhoe.github.io/2021/03/28/design-patterns-chain-of-responsibility/</id>
    <published>2021-03-27T16:19:30.000Z</published>
    <updated>2022-04-06T15:51:38.155Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>说到责任链模式一定会想到各种拦截器，在很多框架中都有拦截器的使用，如常见的okhttp中的请求处理拦截器，路由框架中的路由拦截器，作为框架的使用方你可能已经对拦截器司空见惯，但是不可否认的是一个好的设计经常会有让人有眼前一亮的感觉。本文尝试总结一下在安卓框架和源码中，责任链模式的使用场景和设计方法。 <br /><span id="more"></span></p><h3 id="0x01-什么是责任链模式"><a href="#0x01-什么是责任链模式" class="headerlink" title="0x01 什么是责任链模式"></a>0x01 什么是责任链模式</h3><p>从设计模式的角度，拦截器的设计常常称之为责任链模式（Chain of Responsibility）。责任链模式的定义：为了避免请求发送者与多个请求处理者耦合在一起，于是将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止。<br /><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/411436/1648398302641-53549587-8264-4f7d-8887-9f21106dcda2.jpeg#clientId=u546672ae-3373-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u6a2fa50d&margin=%5Bobject%20Object%5D&originHeight=178&originWidth=650&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=udaad9ee6-1deb-4453-9855-3ef259e2663&title="></p><p>责任链模式的优点：</p><ol><li>降低耦合，不需要知道整条处理链路的结构，发送者和接受者也无需知道对方的确切信息。</li><li>灵活，扩展性强，可根据需要灵活增加处理流程，可动态调整处理顺序</li><li>功能内聚，单一职责，每个类只需要关注自己处理的工作，不该处理的传递给下一个对象处理</li></ol><p>责任链模式的缺点：</p><ol><li>复杂度较高，性能可能受影响</li><li>不能保证每个请求一定被处理。由于一个请求没有明确的接收者，所以不能保证它一定会被处理，该请求可能一直传到链的末端都得不到处理。<h3 id="0x02-okhttp中的阑尾式拦截器"><a href="#0x02-okhttp中的阑尾式拦截器" class="headerlink" title="0x02 okhttp中的阑尾式拦截器"></a>0x02 okhttp中的阑尾式拦截器</h3>在RealCall.java中内置了5个拦截器。创建一个包含所有拦截器的拦截器链表。在RealInterceptorChain的proceed方法中根据index获取当前拦截器，在拦截器的intercept方法内部递归调用RealInterceptorChain的proceed方法并将index+1，更新到下一个拦截器。这里需要注意的是，最后一个拦截器的实现，在最后一个拦截器CallServerInterceptor中，并不会再调用Chain的proceed方法，而是直接根据网络结果返回response。这里可以看做整个拦截器的尽头，在胡同走到尽头后再根据原路逐级返回response。所以像是走进胡同的拦截器调用算不算半截阑尾？</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/411436/1648398302704-d3aca097-09b8-48c1-8243-dc248a4374a5.jpeg#clientId=u546672ae-3373-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u831a5098&margin=%5Bobject%20Object%5D&originHeight=136&originWidth=994&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u22c7f9be-1c91-412b-b71d-9000a851439&title="></p><figure class="highlight axapta"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">/// 拦截器起点和终点</span><br>  Response getResponseWithInterceptorChain() throws IOException &#123;<br>    <span class="hljs-comment">// Build a full stack of interceptors.</span><br>    List&lt;Interceptor&gt; interceptors = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    interceptors.addAll(<span class="hljs-keyword">client</span>.interceptors());<br>    interceptors.add(retryAndFollowUpInterceptor);<br>    interceptors.add(<span class="hljs-keyword">new</span> BridgeInterceptor(<span class="hljs-keyword">client</span>.cookieJar()));<br>    interceptors.add(<span class="hljs-keyword">new</span> CacheInterceptor(<span class="hljs-keyword">client</span>.internalCache()));<br>    interceptors.add(<span class="hljs-keyword">new</span> ConnectInterceptor(<span class="hljs-keyword">client</span>));<br>    <span class="hljs-keyword">if</span> (!forWebSocket) &#123;<br>      interceptors.addAll(<span class="hljs-keyword">client</span>.networkInterceptors());<br>    &#125;<br>    interceptors.add(<span class="hljs-keyword">new</span> CallServerInterceptor(forWebSocket));<br><br>    Interceptor.Chain chain = <span class="hljs-keyword">new</span> RealInterceptorChain(interceptors, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">0</span>,<br>        originalRequest, <span class="hljs-keyword">this</span>, eventListener, <span class="hljs-keyword">client</span>.connectTimeoutMillis(),<br>        <span class="hljs-keyword">client</span>.readTimeoutMillis(), <span class="hljs-keyword">client</span>.writeTimeoutMillis());<br><br>    <span class="hljs-keyword">return</span> chain.proceed(originalRequest);<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/// 拦截器迭代</span><br>  <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">proceed</span><span class="hljs-params">(Request request, StreamAllocation streamAllocation, HttpCodec httpCodec,</span><br><span class="hljs-params">      RealConnection connection)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    <span class="hljs-comment">// Call the next interceptor in the chain.</span><br>    <span class="hljs-type">RealInterceptorChain</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealInterceptorChain</span>(interceptors, streamAllocation, httpCodec,<br>        connection, index + <span class="hljs-number">1</span>, request, call, eventListener, connectTimeout, readTimeout,<br>        writeTimeout);<br>    <span class="hljs-type">Interceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> interceptors.get(index);<br>    <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> interceptor.intercept(next);<br><br>    <span class="hljs-keyword">return</span> response;<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">/// 单个拦截器递归回调到拦截器链</span><br><span class="hljs-keyword">public</span> <span class="hljs-function">Response <span class="hljs-title">intercept</span><span class="hljs-params">(Chain chain)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    Response networkResponse = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      networkResponse = chain.<span class="hljs-keyword">proceed</span>(networkRequest);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-comment">// If we&#x27;re crashing on I/O or otherwise, don&#x27;t leak the cache body.</span><br>      <span class="hljs-keyword">if</span> (networkResponse == <span class="hljs-keyword">null</span> &amp;&amp; cacheCandidate != <span class="hljs-keyword">null</span>) &#123;<br>        closeQuietly(cacheCandidate.body());<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> response;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="0x03-wmrouter中的洋葱式拦截器"><a href="#0x03-wmrouter中的洋葱式拦截器" class="headerlink" title="0x03 wmrouter中的洋葱式拦截器"></a>0x03 wmrouter中的洋葱式拦截器</h3><p>和okhttp的拦截器相比，wmrouter中的拦截器差异在于他并没有response返回值，拦截器之间通过callback的方式返回结果或中断拦截流程。个人理解主要有以下几点考虑。</p><ul><li>并不需要像okhttp那样针对队尾的拦截器做特殊实现，所有拦截器的实现只要考虑是next还是complete即可。这样拦截器组合和嵌套更灵活。</li><li>支持异步拦截回调</li></ul><p>wmrouter在查找路由的过程中，使用了多层UriHandler和Interceptor嵌套的拦截器，在UriHandler的handle方法中，通过shouldHandle是否被当前的Handler拦截，再通过是否包含拦截器来确定是handler拦截还是Interceptor拦截，如果是Interceptor拦截则进入下一层。<br />所以相比较okhttp的拦截器，wmrouter的拦截器模式分层更明显，更像洋葱。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">handle</span>(<span class="hljs-variable">@NonNull</span> final UriRequest request, <span class="hljs-variable">@NonNull</span> final UriCallback callback) &#123;<br>    <span class="hljs-selector-tag">if</span> (shouldHandle(request)) &#123;<br>        <span class="hljs-selector-tag">if</span> (mInterceptor != null &amp;&amp; !request.isSkipInterceptors()) &#123;<br>            <span class="hljs-selector-tag">mInterceptor</span><span class="hljs-selector-class">.intercept</span>(request, new UriCallback() &#123;<br>                <span class="hljs-variable">@Override</span><br>                public void onNext() &#123;<br>                    <span class="hljs-selector-tag">handleInternal</span>(request, callback);<br>                &#125;<br><br>                @<span class="hljs-selector-tag">Override</span><br>                <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">onComplete</span>(int result) &#123;<br>                    <span class="hljs-selector-tag">callback</span><span class="hljs-selector-class">.onComplete</span>(result);<br>                &#125;<br>            &#125;);<br>        &#125; <span class="hljs-selector-tag">else</span> &#123;<br>            <span class="hljs-selector-tag">handleInternal</span>(request, callback);<br>        &#125;<br>    &#125; <span class="hljs-selector-tag">else</span> &#123;<br>        <span class="hljs-selector-tag">callback</span><span class="hljs-selector-class">.onNext</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在ChainedInterceptor中根据递归调用next方法更新拦截器迭代，通过Callback回溯到上一层，这里的上一层可能是Interceptor也可能是UriHandler。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">next</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">final</span> Iterator&lt;UriInterceptor&gt; iterator, <span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">final</span> UriRequest request,</span><br><span class="hljs-params">                  <span class="hljs-meta">@NonNull</span> <span class="hljs-keyword">final</span> UriCallback callback)</span> &#123;<br>    <span class="hljs-keyword">if</span> (iterator.hasNext()) &#123;<br>        <span class="hljs-type">UriInterceptor</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> iterator.next();<br>        t.intercept(request, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UriCallback</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onNext</span><span class="hljs-params">()</span> &#123;<br>                next(iterator, request, callback);<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onComplete</span><span class="hljs-params">(<span class="hljs-type">int</span> resultCode)</span> &#123;<br>                callback.onComplete(resultCode);<br>            &#125;<br>        &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        callback.onNext();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以参照下图理解<br /><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/411436/1648398302774-14a9605a-d187-483a-8b3b-6cf65e1f76c2.jpeg#clientId=u546672ae-3373-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u1e4e8e96&margin=%5Bobject%20Object%5D&originHeight=523&originWidth=776&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u80dad5bb-5729-48e5-a0a7-fb999b1bb57&title="></p><p>可以参照wmrouter官方文档的流程图理解ChainedHandler和ChainedInterceptor的多层嵌套关系。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/411436/1648398302816-401efc0f-4e41-4d3f-ae15-b91933573d76.jpeg#clientId=u546672ae-3373-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=udb6dcb82&margin=%5Bobject%20Object%5D&originHeight=1000&originWidth=825&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u56434ba8-f55e-4ca8-bf00-7bb5120444c&title="></p><h3 id="0x04-Touch事件分发的贪食蛇拦截"><a href="#0x04-Touch事件分发的贪食蛇拦截" class="headerlink" title="0x04 Touch事件分发的贪食蛇拦截"></a>0x04 Touch事件分发的贪食蛇拦截</h3><p>你一定看过类似这样的事件分发流程图（出自<a href="https://www.gcssloop.com/customview/dispatch-touchevent-theory%EF%BC%89%EF%BC%9A">https://www.gcssloop.com/customview/dispatch-touchevent-theory）：</a><br /><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/411436/1648398302722-3e24c274-1333-4eb0-8726-eba1f7eeacd2.jpeg#clientId=u546672ae-3373-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u9dd305b3&margin=%5Bobject%20Object%5D&originHeight=746&originWidth=850&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=ua3485184-b498-477f-9a87-ecc583dbfd0&title="></p><p>在touch分发的流程中三个关键的方法，dispatchTouchEvent()，interceptTouchEvent(),touchEvent()分别代表事件分发，事件拦截，事件消费。你也一定听过所谓的U型事件传递路径，从Activity开始分发，到ViewGroup，再到View。根据方法返回值是true还是false来决定上述的三个方法是否分发、拦截或消费touch事件。参考如下伪代码理解</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public boolean dispatch<span class="hljs-constructor">TouchEvent(MotionEvent <span class="hljs-params">ev</span>)</span> &#123;<br>    <span class="hljs-comment">// 默认状态为没有消费过</span><br>    boolean result = <span class="hljs-literal">false</span>;             <br><br>    <span class="hljs-keyword">if</span> (!on<span class="hljs-constructor">InterceptTouchEvent(<span class="hljs-params">ev</span>)</span>) &#123;<br>        <span class="hljs-comment">// 如果没有拦截就直接分发给子View</span><br>        result = child.dispatch<span class="hljs-constructor">TouchEvent(<span class="hljs-params">ev</span>)</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!result) &#123;<br>        <span class="hljs-comment">// 如果事件没有子View消费或者是被自己拦截了,询问自身onTouchEvent</span><br>        result = on<span class="hljs-constructor">TouchEvent(<span class="hljs-params">ev</span>)</span>;<br>    &#125;<br><br>    return result;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果从责任链的角度来看，你是否想过<strong>在整个事件分发的流程中，整套机制的最终目标是什么？</strong></p><ul><li>其实事件分发的目标，是为了找到负责消费整个touch流程的view。这里的touch流程包含了DOWN、MOVE和UP事件。而CANCEL事件可以理解成一个error信号，只有当子视图消费的前驱事件，但是又被拦截了当前的事件才会收到CANCEL类型的事件。</li><li>一次触摸流程中产生事件应被同一 View 消费，全部接收或者全部拒绝。</li><li>所以才有了所谓的只有消费了DOWN事件才会接受MOVE和UP事件这样的分发规则。可以想象成一条由DOWN、MOVE和UP事件组成的贪食蛇。蛇身和蛇尾的运动是根据蛇头来的。事件分发机制先找到DOWN事件的消费者，再根据DOWN事件的touchTarget，将MOVE和UP事件分发下去。</li><li>所谓的U型传递，从ViewGroup到View，再从View到ViewGroup的事件传递，只可能是DOWN类型的事件</li></ul><p><strong>当parent和child同时设置了click事件监听，为什么是child优先响应？</strong><br />因为click事件是在onTouchEvent中响应的，而onTouchEvent的消费顺序是先child后parent，当view设置了touchListener或者是clickListener，事件就会被view拦截</p><h3 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h3><ul><li>责任链在设计实现上，往往通过链表或者递归调用的方式，将请求或事件依次从头结点向下传递，并回溯</li><li>在责任链的任意节点上，都可以根据情况决定是否终止在责任链上的事件传递，okhttp通过抛异常的方式终止，wmroutor通过callback依次退栈</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://c.biancheng.net/view/1383.html">http://c.biancheng.net/view/1383.html</a><br /><a href="https://www.debug8.com/javascript/t_66952.html">https://www.debug8.com/javascript/t_66952.html</a><br /><a href="https://segmentfault.com/a/1190000012227736">https://segmentfault.com/a/1190000012227736</a><br /><a href="https://www.gcssloop.com/customview/dispatch-touchevent-theory">https://www.gcssloop.com/customview/dispatch-touchevent-theory</a><br /><a href="https://blog.csdn.net/lfdfhl/article/details/50707724">https://blog.csdn.net/lfdfhl/article/details/50707724</a> </p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;说到责任链模式一定会想到各种拦截器，在很多框架中都有拦截器的使用，如常见的okhttp中的请求处理拦截器，路由框架中的路由拦截器，作为框架的使用方你可能已经对拦截器司空见惯，但是不可否认的是一个好的设计经常会有让人有眼前一亮的感觉。本文尝试总结一下在安卓框架和源码中，责任链模式的使用场景和设计方法。 &lt;br /&gt;</summary>
    
    
    
    <category term="方案与设计" scheme="https://ivonhoe.github.io/categories/%E6%96%B9%E6%A1%88%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="设计模式" scheme="https://ivonhoe.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>升级AndroidX遇到的问题</title>
    <link href="https://ivonhoe.github.io/2020/05/17/update-androidx-exception/"/>
    <id>https://ivonhoe.github.io/2020/05/17/update-androidx-exception/</id>
    <published>2020-05-16T18:44:51.000Z</published>
    <updated>2022-03-27T13:52:02.583Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-问题描述"><a href="#0x01-问题描述" class="headerlink" title="0x01 问题描述"></a>0x01 问题描述</h3><p>记录在升级AndroidX时遇到的一个问题，仅供参考。<br>在项目中升级AndroidX时遇到一个运行时异常，查看日志可了解到是因为找不到方法<code>addOnTabSelectedListener</code>，异常堆栈如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><pre><code class="hljs reasonml">E  Caused by: java.lang.reflect.InvocationTargetException<br>E      at java.lang.reflect.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Constructor</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance0(Native Method)</span><br>E      at java.lang.reflect.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Constructor</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(Constructor.<span class="hljs-params">java</span>:343)</span><br>E      at android.view.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>create<span class="hljs-constructor">View(LayoutInflater.<span class="hljs-params">java</span>:658)</span><br>E      at android.view.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>create<span class="hljs-constructor">ViewFromTag(LayoutInflater.<span class="hljs-params">java</span>:801)</span><br>E      at android.view.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>create<span class="hljs-constructor">ViewFromTag(LayoutInflater.<span class="hljs-params">java</span>:741)</span><br>E      at android.view.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>r<span class="hljs-constructor">Inflate(LayoutInflater.<span class="hljs-params">java</span>:874)</span><br>E      at android.view.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>r<span class="hljs-constructor">InflateChildren(LayoutInflater.<span class="hljs-params">java</span>:835)</span><br>E      at android.view.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>inflate(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>java:<span class="hljs-number">515</span>)<br>E      at android.view.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>inflate(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>java:<span class="hljs-number">423</span>)<br>E      at android.view.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>inflate(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LayoutInflater</span>.</span></span>java:<span class="hljs-number">374</span>)<br>E      at com.android.internal.policy.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PhoneWindow</span>.</span></span>set<span class="hljs-constructor">ContentView(PhoneWindow.<span class="hljs-params">java</span>:498)</span><br>E      at com.android.internal.policy.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HwPhoneWindow</span>.</span></span>set<span class="hljs-constructor">ContentView(HwPhoneWindow.<span class="hljs-params">java</span>:342)</span><br>E      at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Activity</span>.</span></span>set<span class="hljs-constructor">ContentView(Activity.<span class="hljs-params">java</span>:2941)</span><br>E      at xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br>E      at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Activity</span>.</span></span>perform<span class="hljs-constructor">Create(Activity.<span class="hljs-params">java</span>:7458)</span><br>E      at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Activity</span>.</span></span>perform<span class="hljs-constructor">Create(Activity.<span class="hljs-params">java</span>:7448)</span><br>E      at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Instrumentation</span>.</span></span>call<span class="hljs-constructor">ActivityOnCreate(Instrumentation.<span class="hljs-params">java</span>:1286)</span><br>E      at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread</span>.</span></span>perform<span class="hljs-constructor">LaunchActivity(ActivityThread.<span class="hljs-params">java</span>:3409)</span><br>E      at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread</span>.</span></span>handle<span class="hljs-constructor">LaunchActivity(ActivityThread.<span class="hljs-params">java</span>:3614)</span><br>E      at android.app.servertransaction.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LaunchActivityItem</span>.</span></span>execute(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LaunchActivityItem</span>.</span></span>java:<span class="hljs-number">86</span>)<br>E      at android.app.servertransaction.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TransactionExecutor</span>.</span></span>execute<span class="hljs-constructor">Callbacks(TransactionExecutor.<span class="hljs-params">java</span>:108)</span><br>E      at android.app.servertransaction.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TransactionExecutor</span>.</span></span>execute(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TransactionExecutor</span>.</span></span>java:<span class="hljs-number">68</span>)<br>E      at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread$H</span>.</span></span>handle<span class="hljs-constructor">Message(ActivityThread.<span class="hljs-params">java</span>:2199)</span><br>E      at android.os.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Handler</span>.</span></span>dispatch<span class="hljs-constructor">Message(Handler.<span class="hljs-params">java</span>:112)</span><br>E      at android.os.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Looper</span>.</span></span>loop(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Looper</span>.</span></span>java:<span class="hljs-number">216</span>)<br>E      at android.app.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread</span>.</span></span>main(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ActivityThread</span>.</span></span>java:<span class="hljs-number">7625</span>)<br>E      at java.lang.reflect.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Method</span>.</span></span>invoke(Native Method)<br>E      at com.android.internal.os.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RuntimeInit$MethodAndArgsCaller</span>.</span></span>run(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RuntimeInit</span>.</span></span>java:<span class="hljs-number">524</span>)<br>E      at com.android.internal.os.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ZygoteInit</span>.</span></span>main(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ZygoteInit</span>.</span></span>java:<span class="hljs-number">987</span>)<br>E  Caused by: java.lang.NoSuchMethodError: No <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">method</span> add<span class="hljs-constructor">OnTabSelectedListener(Lcom<span class="hljs-operator">/</span><span class="hljs-params">google</span><span class="hljs-operator">/</span><span class="hljs-params">android</span><span class="hljs-operator">/</span><span class="hljs-params">material</span><span class="hljs-operator">/</span><span class="hljs-params">tabs</span><span class="hljs-operator">/</span>TabLayout<span class="hljs-params">$OnTabSelectedListener</span>;)</span>V <span class="hljs-keyword">in</span> <span class="hljs-keyword">class</span> Lcom/google/android/material/tabs/TabLayout; <span class="hljs-keyword">or</span> its super classes (declaration <span class="hljs-keyword">of</span> &#x27;com.google.android.material.tabs.TabLayout&#x27; appears <span class="hljs-keyword">in</span> /data/app/xxxxxx-WbxmUkjqMEjNknQppPqeWw==/base.apk!classes2.dex)<br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="0x02-问题分析"><a href="#0x02-问题分析" class="headerlink" title="0x02 问题分析"></a>0x02 问题分析</h3><p>因为从support27到support28版本，TabLayout的API发生了变更，<code>addOnTabSelectedListener</code>方法入参发生了变化，可通过查看下图中的函数字节码可以看到，AndroidX中的该函数的入参为<code>BaseOnTabSelectedListener</code>，而support27中的该函数的入参为<code>onTabSelectedListener</code>。函数字节码如下：</p><p><img src="/res/update_androidx_exceptiion/1.png"><br><img src="/res/update_androidx_exceptiion/2.png"></p><p>发生改问题的原因是AndroidX是基于Support Library 28的重构。而在当前项目中依赖了27.0.2的TabLayout support包，并在依赖support27的基础上使用进行了AndroidX包名替换转换。所以在动手之前还是建议先把官方看清楚，在官方文档里说的很清楚了，要先把当前的 Support Library 依赖升级至版本28，然后再使用Android Studio的工具转换AndroidX。</p><h3 id="0x03-函数签名"><a href="#0x03-函数签名" class="headerlink" title="0x03 函数签名"></a>0x03 函数签名</h3><h4 id="3-1-先写个demo"><a href="#3-1-先写个demo" class="headerlink" title="3.1 先写个demo"></a>3.1 先写个demo</h4><p>demo说明：</p><ul><li>接口A声明接口方法<code>methodA</code></li><li>接口B继承A</li><li><code>methodTest</code>声明的函数参数为接口A</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMethod</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">invokeTest</span>()</span> &#123;<br>        methodTest(<span class="hljs-keyword">new</span> AbsClassB() &#123;<br><br>            @Override<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodA</span>()</span> &#123;<br><br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodTest</span>(<span class="hljs-params">AbsClassA a</span>)</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.print(<span class="hljs-string">&quot;-------&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title">AbsClassB</span> <span class="hljs-title">extends</span> <span class="hljs-title">AbsClassA</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title">AbsClassA</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodA</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>反编译以上Java代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">Compiled</span> <span class="hljs-string">from</span> <span class="hljs-string">&quot;TestMethod.java&quot;</span><br><span class="hljs-string">class</span> <span class="hljs-string">TestMethod</span> &#123;<br>  <span class="hljs-string">TestMethod();</span><br>    <span class="hljs-attr">Code:</span><br>       <span class="hljs-attr">0:</span> <span class="hljs-string">aload_0</span><br>       <span class="hljs-attr">1:</span> <span class="hljs-string">invokespecial</span> <span class="hljs-comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>       <span class="hljs-attr">4:</span> <span class="hljs-string">return</span><br><br>  <span class="hljs-string">void</span> <span class="hljs-string">invokeTest();</span><br>    <span class="hljs-attr">Code:</span><br>       <span class="hljs-attr">0:</span> <span class="hljs-string">aload_0</span><br>       <span class="hljs-attr">1:</span> <span class="hljs-string">new</span>           <span class="hljs-comment">#2                  // class TestMethod$1</span><br>       <span class="hljs-attr">4:</span> <span class="hljs-string">dup</span><br>       <span class="hljs-attr">5:</span> <span class="hljs-string">aload_0</span><br>       <span class="hljs-attr">6:</span> <span class="hljs-string">invokespecial</span> <span class="hljs-comment">#3                  // Method TestMethod$1.&quot;&lt;init&gt;&quot;:(LTestMethod;)V</span><br>       <span class="hljs-attr">9:</span> <span class="hljs-string">invokevirtual</span> <span class="hljs-comment">#4                  // Method methodTest:(LAbsClassA;)V</span><br>      <span class="hljs-attr">12:</span> <span class="hljs-string">return</span><br><br>  <span class="hljs-string">void</span> <span class="hljs-string">methodTest(AbsClassA);</span><br>    <span class="hljs-attr">Code:</span><br>       <span class="hljs-attr">0:</span> <span class="hljs-string">getstatic</span>     <span class="hljs-comment">#5                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br>       <span class="hljs-attr">3:</span> <span class="hljs-string">ldc</span>           <span class="hljs-comment">#6                  // String -------</span><br>       <span class="hljs-attr">5:</span> <span class="hljs-string">invokevirtual</span> <span class="hljs-comment">#7                  // Method java/io/PrintStream.print:(Ljava/lang/String;)V</span><br>       <span class="hljs-attr">8:</span> <span class="hljs-string">return</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>由以上可知，所谓的方法签名至于函数定义时声明的参数类型有关，和调用时传递的参数类型无关。</strong></p><h4 id="3-2-什么是函数签名？"><a href="#3-2-什么是函数签名？" class="headerlink" title="3.2 什么是函数签名？"></a>3.2 什么是函数签名？</h4><p>方法签名为了唯一标识一个方法。如果你查询一些资料和文档可能会得到下面的说法：<br><strong>说法一：</strong><br>同一类中不能存在两个名字及描述符完全相同的方法。<br>在Java中方法签名包括：方法名、形参参数列表、泛型方法类型参数列表。Java的方法签名并不包括返回值和访问修饰符。当类中存在签名相同的两个方法时编译会报错，当两个方法的其中一个签名是另一个方法的子签名时也会报错。自签名的定义是一个签名在类型擦除后与另一个签名相同，则称其为第二个签名的的子签名。</p><p><strong>说法二：</strong><br>在同一class文件中，两个方法可以拥有同样的特征签名，前提是返回值不能相同。</p><p><strong>这看起来是自相矛盾的啊，到底一个函数签名包不包含方法的返回值类型呢？</strong></p><p>如下面所示的代码，使用Java编译器编译一定是编译不通过的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestMethodSameName</span> &#123;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">foo</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> i</span>)</span> &#123;  <br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;TestMethodSameName.foo:(I)V&quot;</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">foo</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> i</span>)</span> &#123;  <br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;TestMethodSameName.foo:(I)I&quot;</span>);  <br>        <span class="hljs-keyword">return</span> i;  <br>    &#125;  <br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;  <br>        foo(<span class="hljs-number">123</span>); <span class="hljs-comment">// foo:(I)V  </span><br>        foo(<span class="hljs-number">456</span>); <span class="hljs-comment">// foo:(I)I  </span><br>    &#125;  <br>&#125; <br></code></pre></td></tr></table></figure><p>但是如果你使用使用javac和javap命令查看方法签名时你会发现</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arduino">javac TestMethodSameName.java<br>javap -s -p TestMethodSameName.<span class="hljs-keyword">class</span> <br><span class="hljs-title class_">Compiled</span> from <span class="hljs-string">&quot;TestMethodSameName.java&quot;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMethodSameName</span> &#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TestMethodSameName</span><span class="hljs-params">()</span></span>;<br>    descriptor: ()<span class="hljs-function">V</span><br><span class="hljs-function"></span><br><span class="hljs-function">  <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br>    descriptor: (I)<span class="hljs-function">I</span><br><span class="hljs-function"></span><br><span class="hljs-function">  <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(java.lang.<span class="hljs-type">String</span>[])</span></span>;<br>    descriptor: ([Ljava/lang/<span class="hljs-type">String</span>;)V<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到所谓方法描述是包含函数参数类型和返回值类型的<code>（descriptor: ([Ljava/lang/String;)V)</code>.所以是不是以上说法一和说法二都对呢？<br>其实说法一针对的是Java编译器，说法二针对的是JVM的。在虚拟机的标准里是允许一个类中方法名和形参一样但是返回值不一样，因为这两个方法对应的方法描述不一样，针对字节码层面这种情况是存在的，JVM是也正常运行的。<br>那么为什么JVM支持的东西，JAVA偏偏不支持呢？<br>因为在方法调用的时候并不能保证指定了方法的返回信息，编译器并不知道你实际调用了哪个方法。还是以上面的代码为例，当忽略返回值的调用时就搞不清到底在调用哪个方法了。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br></code></pre></td></tr></table></figure><h4 id="3-3-重载和重写"><a href="#3-3-重载和重写" class="headerlink" title="3.3 重载和重写"></a>3.3 重载和重写</h4><p>重载：同一个类中方法相同方法参数不同的方法。不能通过返回类型是否相同来判断重载。<br>重写：方法签名必定相同，返回值必定相同， 访问修饰符 子 &gt; 父， 异常类 子 &lt; 父</p><h4 id="3-4-父类的private方法子类可以重写吗？"><a href="#3-4-父类的private方法子类可以重写吗？" class="headerlink" title="3.4 父类的private方法子类可以重写吗？"></a>3.4 父类的private方法子类可以重写吗？</h4><p>JVM调用方法有五条指令，分别是</p><ol><li>invokestatic,用来调用static方法（类方法)</li><li>invokespecial,用来调用需要特殊处理的实例方法，私有方法，父类方法(super.)，初始化方法。在对象的创建过程中，new之后很多都会执行<init>方法，就是依赖字节码中是否包含invokespecial指令。静态绑定</li><li>invokevirtual,用于调用对象的实例方法，根据对象的实际类型进行分派（虚方法分派）最常见的。动态绑定 多态例子</li><li>invokeinterface,调用接口方法，在运行时搜索一个实现了这个接口方法的对象，找出适当的方法进行调用。</li><li>invokedynamic。方法动态解析出调用点限定符所引用的方法</li></ol><p><strong>程序绑定：</strong> 指的是一个方法的调用与方法所在的类(方法主体)关联起来。对java来说，绑定分为静态绑定和动态绑定；或者叫做前期绑定和后期绑定。</p><p><strong>静态绑定：</strong> 在程序执行前方法已经被绑定，此时由编译器或其它连接程序实现。例如：C。针对java简单的可以理解为程序编译期的绑定。invokespecial和invokestatic是采用静态绑定。</p><p><strong>动态绑定：</strong> 在运行时根据具体对象的类型进行绑定。invokevirtual和invokeinterface是采用动态绑定。</p><p>可以看到，在调用private、super、<init>方法时使用的invokespecial指令，而在实例对象的其他方法时使用的是invokevirtual指令。正是由于这两种绑定的不同，在子类覆盖超类的方法、并向上转型引用后，才产生了多态以及其他特殊的调用结果。运行时，invokespecial选择方法基于引用声明的类型，而不是对象实际的类型。但invokevirtual则选择当前引用的对象的类型。</p><p>回到问题，<strong>父类的private方法子类可以重写吗?</strong></p><p>答案很明显，不能，从invoke指令的角度看，父类的private方法的程序绑定在编译期就已经确定了，跟Java的多态特性是无关的，所以不能被重写。</p><h3 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h3><p>如果只是针对AndroidX的升级其实很简单，只要关注到一点，AndroidX的升级和转换要保证所有依赖的support包都升级到28.0.0以上。<br>如果从JVM规范和指令角度看，一个很小的点还是有很多值得深挖的地方的。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://mp.weixin.qq.com/s/fmnoKH-R9PCmg-3ATRMIbQ">https://mp.weixin.qq.com/s/fmnoKH-R9PCmg-3ATRMIbQ</a><br><a href="http://wxweven.win/2017/09/15/JVM-invokespecial%E5%92%8Cinvokevirtual/">http://wxweven.win/2017/09/15/JVM-invokespecial%E5%92%8Cinvokevirtual/</a><br><a href="https://hllvm-group.iteye.com/group/topic/27033">https://hllvm-group.iteye.com/group/topic/27033</a><br><a href="https://www.iteye.com/blog/rednaxelafx-479301">https://www.iteye.com/blog/rednaxelafx-479301</a><br><a href="https://www.cnblogs.com/onlywujun/p/3523991.html">https://www.cnblogs.com/onlywujun/p/3523991.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x01-问题描述&quot;&gt;&lt;a href=&quot;#0x01-问题描述&quot; class=&quot;headerlink&quot; title=&quot;0x01 问题描述&quot;&gt;&lt;/a&gt;0x01 问题描述&lt;/h3&gt;&lt;p&gt;记录在升级AndroidX时遇到的一个问题，仅供参考。&lt;br&gt;在项目中升级AndroidX时遇到一个运行时异常，查看日志可了解到是因为找不到方法&lt;code&gt;addOnTabSelectedListener&lt;/code&gt;，异常堆栈如下：&lt;/p&gt;
&lt;figure class=&quot;highlight reasonml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs reasonml&quot;&gt;E  Caused by: java.lang.reflect.InvocationTargetException&lt;br&gt;E      at java.lang.reflect.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;Constructor&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;hljs-constructor&quot;&gt;Instance0(Native Method)&lt;/span&gt;&lt;br&gt;E      at java.lang.reflect.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;Constructor&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;hljs-constructor&quot;&gt;Instance(Constructor.&lt;span class=&quot;hljs-params&quot;&gt;java&lt;/span&gt;:343)&lt;/span&gt;&lt;br&gt;E      at android.view.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;LayoutInflater&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;create&lt;span class=&quot;hljs-constructor&quot;&gt;View(LayoutInflater.&lt;span class=&quot;hljs-params&quot;&gt;java&lt;/span&gt;:658)&lt;/span&gt;&lt;br&gt;E      at android.view.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;LayoutInflater&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;create&lt;span class=&quot;hljs-constructor&quot;&gt;ViewFromTag(LayoutInflater.&lt;span class=&quot;hljs-params&quot;&gt;java&lt;/span&gt;:801)&lt;/span&gt;&lt;br&gt;E      at android.view.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;LayoutInflater&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;create&lt;span class=&quot;hljs-constructor&quot;&gt;ViewFromTag(LayoutInflater.&lt;span class=&quot;hljs-params&quot;&gt;java&lt;/span&gt;:741)&lt;/span&gt;&lt;br&gt;E      at android.view.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;LayoutInflater&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;r&lt;span class=&quot;hljs-constructor&quot;&gt;Inflate(LayoutInflater.&lt;span class=&quot;hljs-params&quot;&gt;java&lt;/span&gt;:874)&lt;/span&gt;&lt;br&gt;E      at android.view.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;LayoutInflater&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;r&lt;span class=&quot;hljs-constructor&quot;&gt;InflateChildren(LayoutInflater.&lt;span class=&quot;hljs-params&quot;&gt;java&lt;/span&gt;:835)&lt;/span&gt;&lt;br&gt;E      at android.view.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;LayoutInflater&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;inflate(&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;LayoutInflater&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;java:&lt;span class=&quot;hljs-number&quot;&gt;515&lt;/span&gt;)&lt;br&gt;E      at android.view.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;LayoutInflater&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;inflate(&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;LayoutInflater&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;java:&lt;span class=&quot;hljs-number&quot;&gt;423&lt;/span&gt;)&lt;br&gt;E      at android.view.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;LayoutInflater&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;inflate(&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;LayoutInflater&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;java:&lt;span class=&quot;hljs-number&quot;&gt;374&lt;/span&gt;)&lt;br&gt;E      at com.android.internal.policy.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;PhoneWindow&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;set&lt;span class=&quot;hljs-constructor&quot;&gt;ContentView(PhoneWindow.&lt;span class=&quot;hljs-params&quot;&gt;java&lt;/span&gt;:498)&lt;/span&gt;&lt;br&gt;E      at com.android.internal.policy.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;HwPhoneWindow&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;set&lt;span class=&quot;hljs-constructor&quot;&gt;ContentView(HwPhoneWindow.&lt;span class=&quot;hljs-params&quot;&gt;java&lt;/span&gt;:342)&lt;/span&gt;&lt;br&gt;E      at android.app.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;Activity&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;set&lt;span class=&quot;hljs-constructor&quot;&gt;ContentView(Activity.&lt;span class=&quot;hljs-params&quot;&gt;java&lt;/span&gt;:2941)&lt;/span&gt;&lt;br&gt;E      at xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&lt;br&gt;E      at android.app.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;Activity&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;perform&lt;span class=&quot;hljs-constructor&quot;&gt;Create(Activity.&lt;span class=&quot;hljs-params&quot;&gt;java&lt;/span&gt;:7458)&lt;/span&gt;&lt;br&gt;E      at android.app.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;Activity&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;perform&lt;span class=&quot;hljs-constructor&quot;&gt;Create(Activity.&lt;span class=&quot;hljs-params&quot;&gt;java&lt;/span&gt;:7448)&lt;/span&gt;&lt;br&gt;E      at android.app.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;Instrumentation&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;call&lt;span class=&quot;hljs-constructor&quot;&gt;ActivityOnCreate(Instrumentation.&lt;span class=&quot;hljs-params&quot;&gt;java&lt;/span&gt;:1286)&lt;/span&gt;&lt;br&gt;E      at android.app.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;ActivityThread&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;perform&lt;span class=&quot;hljs-constructor&quot;&gt;LaunchActivity(ActivityThread.&lt;span class=&quot;hljs-params&quot;&gt;java&lt;/span&gt;:3409)&lt;/span&gt;&lt;br&gt;E      at android.app.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;ActivityThread&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;handle&lt;span class=&quot;hljs-constructor&quot;&gt;LaunchActivity(ActivityThread.&lt;span class=&quot;hljs-params&quot;&gt;java&lt;/span&gt;:3614)&lt;/span&gt;&lt;br&gt;E      at android.app.servertransaction.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;LaunchActivityItem&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;execute(&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;LaunchActivityItem&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;java:&lt;span class=&quot;hljs-number&quot;&gt;86&lt;/span&gt;)&lt;br&gt;E      at android.app.servertransaction.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;TransactionExecutor&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;execute&lt;span class=&quot;hljs-constructor&quot;&gt;Callbacks(TransactionExecutor.&lt;span class=&quot;hljs-params&quot;&gt;java&lt;/span&gt;:108)&lt;/span&gt;&lt;br&gt;E      at android.app.servertransaction.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;TransactionExecutor&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;execute(&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;TransactionExecutor&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;java:&lt;span class=&quot;hljs-number&quot;&gt;68&lt;/span&gt;)&lt;br&gt;E      at android.app.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;ActivityThread$H&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;handle&lt;span class=&quot;hljs-constructor&quot;&gt;Message(ActivityThread.&lt;span class=&quot;hljs-params&quot;&gt;java&lt;/span&gt;:2199)&lt;/span&gt;&lt;br&gt;E      at android.os.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;Handler&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;dispatch&lt;span class=&quot;hljs-constructor&quot;&gt;Message(Handler.&lt;span class=&quot;hljs-params&quot;&gt;java&lt;/span&gt;:112)&lt;/span&gt;&lt;br&gt;E      at android.os.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;Looper&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;loop(&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;Looper&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;java:&lt;span class=&quot;hljs-number&quot;&gt;216&lt;/span&gt;)&lt;br&gt;E      at android.app.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;ActivityThread&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;main(&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;ActivityThread&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;java:&lt;span class=&quot;hljs-number&quot;&gt;7625&lt;/span&gt;)&lt;br&gt;E      at java.lang.reflect.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;Method&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;invoke(Native Method)&lt;br&gt;E      at com.android.internal.os.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;RuntimeInit$MethodAndArgsCaller&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;run(&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;RuntimeInit&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;java:&lt;span class=&quot;hljs-number&quot;&gt;524&lt;/span&gt;)&lt;br&gt;E      at com.android.internal.os.&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;ZygoteInit&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;main(&lt;span class=&quot;hljs-module-access&quot;&gt;&lt;span class=&quot;hljs-module&quot;&gt;&lt;span class=&quot;hljs-identifier&quot;&gt;ZygoteInit&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;java:&lt;span class=&quot;hljs-number&quot;&gt;987&lt;/span&gt;)&lt;br&gt;E  Caused by: java.lang.NoSuchMethodError: No &lt;span class=&quot;hljs-keyword&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;method&lt;/span&gt; add&lt;span class=&quot;hljs-constructor&quot;&gt;OnTabSelectedListener(Lcom&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;material&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;tabs&lt;/span&gt;&lt;span class=&quot;hljs-operator&quot;&gt;/&lt;/span&gt;TabLayout&lt;span class=&quot;hljs-params&quot;&gt;$OnTabSelectedListener&lt;/span&gt;;)&lt;/span&gt;V &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; Lcom/google/android/material/tabs/TabLayout; &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; its super classes (declaration &lt;span class=&quot;hljs-keyword&quot;&gt;of&lt;/span&gt; &amp;#x27;com.google.android.material.tabs.TabLayout&amp;#x27; appears &lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; /data/app/xxxxxx-WbxmUkjqMEjNknQppPqeWw==/base.apk!classes2.dex)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习总结" scheme="https://ivonhoe.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="JVM" scheme="https://ivonhoe.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>误用bitmap config导致的故障</title>
    <link href="https://ivonhoe.github.io/2020/03/09/bitmap-preconfig-bug/"/>
    <id>https://ivonhoe.github.io/2020/03/09/bitmap-preconfig-bug/</id>
    <published>2020-03-08T16:27:32.000Z</published>
    <updated>2022-04-06T15:56:36.194Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>某周六线上运营报障，在部分用户的Android手机上个别地图图标未能正常显示，只有部分手机有问题(7.0及以下版本)有问题，诡异的是只有个别图标(1个)显示有问题，大部分图标显示并没有问题,开发介入验证后发现更诡异的是，只在release版本才有这个问题，开发debug版本上并没有问题。<br>低版本显示有问题还好理解，这应该是一个版本兼容相关的问题。release和debug上个别图标有差别就有点匪夷所思了，写篇博客记录下。</p><h3 id="0x01-问题说明"><a href="#0x01-问题说明" class="headerlink" title="0x01 问题说明"></a>0x01 问题说明</h3><p>问题日志：</p><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">java</span>.lang.NullPointerException: Attempt to read from field &#x27;int android.graphics.Bitmap$Config.nativeInt&#x27; <span class="hljs-literal">on</span> a null object reference<br><span class="hljs-attribute">10</span>-<span class="hljs-number">19</span> <span class="hljs-number">14</span>:<span class="hljs-number">27</span>:<span class="hljs-number">36</span>.<span class="hljs-number">501</span> <span class="hljs-number">20394</span>-<span class="hljs-number">20394</span>/? W/System.err:     at android.graphics.Bitmap.copy(Bitmap.java:<span class="hljs-number">557</span>)<br><span class="hljs-attribute">10</span>-<span class="hljs-number">19</span> <span class="hljs-number">14</span>:<span class="hljs-number">27</span>:<span class="hljs-number">36</span>.<span class="hljs-number">501</span> <span class="hljs-number">20394</span>-<span class="hljs-number">20394</span>/? W/System.err:     at com.amap.api.maps.model.BitmapDescriptor.&lt;init&gt;(BitmapDescriptor.java:<span class="hljs-number">28</span>)<br><span class="hljs-attribute">10</span>-<span class="hljs-number">19</span> <span class="hljs-number">14</span>:<span class="hljs-number">27</span>:<span class="hljs-number">36</span>.<span class="hljs-number">501</span> <span class="hljs-number">20394</span>-<span class="hljs-number">20394</span>/? W/System.err:     at com.amap.api.maps.model.BitmapDescriptorFactory.fromBitmap(BitmapDescriptorFactory.java:<span class="hljs-number">258</span>)<br></code></pre></td></tr></table></figure><span id="more"></span><p>问题代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">val</span> opts = BitmapFactory.<span class="hljs-constructor">Options()</span><br>opts.inPreferredConfig = Bitmap.Config.RGB_565<br>opts.inTargetDensity = displayMetrics.densityDpi<br>opts.inScaled = <span class="hljs-literal">true</span><br>opts.inDensity = DisplayMetrics.DENSITY_XXHIGH<span class="hljs-comment">//typedValue.density</span><br><span class="hljs-keyword">val</span> var3 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BitmapFactory</span>.</span></span>decode<span class="hljs-constructor">Stream(<span class="hljs-params">var2</span>, <span class="hljs-params">null</span>, <span class="hljs-params">opts</span>)</span><br></code></pre></td></tr></table></figure><p>根据日志可以看出是Bitmap的config为null引起的空指针问题，在使用BitmapFactory.decodeStream时，正常解析到了Bitmap对象，但是该图片的Config获取为null，进而引发一个空指针异常，导致了后续图片加载的失败。该段代码也很简单，重新写了个demo应用单独运行这段代码，并特别使用了出现线上故障的资源图片，测试的结果依然是debug版本的demo Bitmap.getConfig获取正常，为ARGB.8888。release版本 Bitmap.getConfig获取为null。尝试修改inPreferredConfig为ARGB_8888或删除这个参数。demo运行正常，Bitmap和Bitmap.Config都能正常获取。<br>这是一个和inPreferredConfig参数有关的问题？考虑到该段代码加载的图片资源可能是透明的png，首先需要承认的是使用565模式解析有alpha通道的图片资源是并不科学的，虽然565配置对非透明图片的加载可以省一般的内存空间。但文档不是这么说的呀？<code>inPreferredConfig</code>参数指定的配置并不是一个非强制的选项，而是建议选项，Android在实际解码时会参考此参数的配置，但如果此配置不满足，Android会重新选取一个合适的配置来对图片进行解码。</p><p><img src="/res/bitmap_preconfig_bug/923F7833-056A-40DE-849B-205EC24F0F73.png"></p><p>所以基于文档的说明，使用RGB_565的配置decode有alpha通道的图片并不会有什么问题，在<strong>正常情况</strong>下Android系统实际还是会选择ARGB_8888的配置进行加载。现在很明显这不是正常情况。不正常的点在哪里？看起来肯定和这张图片有关，换个图片就能解决这个问题了，不然换个图片？不用<code>inPreferredConfig</code>参数也行，但是为什么？问题到底出在哪里？<br>一头扎进BitmapFactory.cpp中，然而并没有什么明显的线索，头大了~~</p><h3 id="0x03-线索分析"><a href="#0x03-线索分析" class="headerlink" title="0x03 线索分析"></a>0x03 线索分析</h3><p>看了大半天BitmapFactory的源码，对加载流程大致有了了解，但是对解决问题并没有什么思路，和大师交流这个问题时，他的一句话点醒了我。</p><p><img src="/res/bitmap_preconfig_bug/CF7A8756-E61A-4A45-88F7-8356DC3BA452.png"></p><p>最最诡异的其实是debug和release差异的问题啊。难道release打包时，资源打包对这个图片动了手脚？所有，手动将release版本的app解压出来，找到有问题的png。果然发现了不一样的地方，使用AS的图片查看器查看png图片，在右上角可以看到，原本在源码中32-bit color的图片在release包中变成了8-bit color。</p><p><img src="/res/bitmap_preconfig_bug/3F44D7B5-08AB-4580-BF59-AC7E6E1B9901.png"></p><p>原本2k的图片在从release包里解压出来后只有700B，aapt对资源做了压缩，难道是压缩引起的问题？在编译文件中配置<code>cruncherEnabled false</code>关闭对png的压缩操作。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">aaptOptins</span>&#123;<br>   cruncherEnabled <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>问题消失了，实锤！和资源打包时对png的压缩有关~</p><p>什么是alpha通道？</p><h4 id="0x04-调色板模式"><a href="#0x04-调色板模式" class="headerlink" title="0x04 调色板模式"></a>0x04 调色板模式</h4><p>将图像转换为调色板颜色模式时，会给每一个像素分配一个固定的颜色值，这些颜色值储存在简洁的颜色表中，或包含多达256种色的调色板中。因此，调色板颜色模式的图像包含的数据比24位颜色模式的图像小，对于颜色范围有限的图像，通过这个色彩转换模式效果更佳，用户可以设定转换颜色的调色板，从而得到指定颜色的阶数的位图。</p><p>调色板颜色模式也被称为是索引模式，调色板颜色模式只有在图像颜色小于等于256色的时候才有，16位高彩和24位32位真彩是没有调色板色的。它只支持单通道图像(8位&#x2F;像素)，因此，我们通过限制调色板、索引颜色减小文件大小，同时保持视觉上的品质不变——如用于多媒体动画的应用或网页。只有16位以下的才用调色板，真彩色不用调色板。</p><h3 id="0x05-重新理一下问题"><a href="#0x05-重新理一下问题" class="headerlink" title="0x05 重新理一下问题"></a>0x05 重新理一下问题</h3><h4 id="5-1-问题原因"><a href="#5-1-问题原因" class="headerlink" title="5.1 问题原因"></a>5.1 问题原因</h4><ol><li>android aapt针对色值数量小于256个的资源图片，在 <code>aaptOptins cruncherEnabled</code>为<code>true</code>时进行了png压缩操作。将png图片的32位全彩色模式图片转换成了8bit位索引模式</li><li>android较低版本系统在使用PreConfig&#x3D;565模式下解析8bit索引模式图片时能够正常返回解析后的Bitmap，但Bitmap Config为空。导致后续的加载错误。</li><li>基于以上两点原因，才出现了在debug模式下打包正常，在release下正常，有的图标正常，个别图标显示不出来的诡异操作。出问题的图片都是被转换成索引模式的图片，理论上可能并不止一个，只是暂时只发现了一个。</li></ol><h4 id="5-2-解决方案"><a href="#5-2-解决方案" class="headerlink" title="5.2 解决方案"></a>5.2 解决方案</h4><p>选择使用ARGB8888或者不设置<code>inPreferredConfig</code>参数进行bitmap decode。其实默认<code>inPreferredConfig</code>值就是<code>ARGB_8888</code>。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">public Bitmap.Config inPreferredConfig <span class="hljs-operator">=</span> Bitmap.Config.ARGB_8888<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="5-3-在使用inPreferredConfig的时候要注意什么？"><a href="#5-3-在使用inPreferredConfig的时候要注意什么？" class="headerlink" title="5.3 在使用inPreferredConfig的时候要注意什么？"></a>5.3 在使用<code>inPreferredConfig</code>的时候要注意什么？</h4><p>参数inpreferredconfig表示图片解码时使用的颜色模式，也就是图片中每个像素颜色的表示方式。参数inpreferredconfig的可选值有四个，分别为ALPHA_8，RGB_565，ARGB_4444，ARGB_8888。它们的含义列举如下。</p><ul><li>ALPHA_8：图片中每个像素用一个字节（8位）存储，该字节存储的是图片8位的透明度值</li><li>RGB_565：图片中每个像素用两个字节（16位）存储，两个字节中高5位表示红色通道，中间6位表示绿色通道，低5位表示蓝色通道</li><li>ARGB_4444：图片中每个像素用两个字节（16位）存储，Alpha，R，G，B四个通道每个通道用4位表示</li><li>ARGB_8888：图片中每个像素用四个字节（32位）存储，Alpha，R，G，B四个通道每个通道用8位表示</li></ul><p>根据Android官方文档的说明，如果inPreferredConfig不为null，解码器会尝试使用此参数指定的颜色模式来对图片进行解码，如果inPreferredConfig为null或者在解码时无法满足此参数指定的颜色模式，解码器会自动根据原始图片的特征以及当前设备的屏幕位深，选取合适的颜色模式来解码，例如，如果图片中包含透明度，那么对该图片解码时使用的配置就需要支持透明度，默认会使用ARGB_8888来解码。<br>inPreferredConfig指定的配置并非是一个强制选项，而是建议的选项，Android在解码时会参考该配置，如果该配置不满足，Android会重新选取一个合适的配置来对图片进行解码。</p><p>详细的验证过程可参考<a href="https://blog.csdn.net/ccpat/article/details/46834089">https://blog.csdn.net/ccpat/article/details/46834089</a></p><h3 id="0x06-为什么Bitmap-getConfig-返回null？"><a href="#0x06-为什么Bitmap-getConfig-返回null？" class="headerlink" title="0x06 为什么Bitmap.getConfig()返回null？"></a>0x06 为什么Bitmap.getConfig()返回null？</h3><p>从 getConfig 方法的文档可以看到这个描述： If the bitmap’s internal config is in one of the public formats, return that config, otherwise return null.<br>如果位图的内部 config 是公开格式的其中之一就返回这个 config，否则返回 null。<br>这里的内部格式，就是指 SkBitmap::Config 枚举值了，这里的公开格式指的是Java层Bitmap.Config的枚举值。如果这个值并未在 Java 层 Bitmap.Config 中公开，就返回 null，像索引颜色对应的 kIndex8_Config 就会导致 getConfig() 会返回 null。</p><p>可查看源码<code>external/skia/include/core/SkBitmap.h</code>，Skia的颜色配置，其中kIndex8_Config表示每像素8bits，使用 SkColorTable 来描述颜色，这个 SkColorTable 顾名思义就是颜色表了。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">enum Config &#123;<br><span class="hljs-built_in">    kNo_Config,</span>         <br><span class="hljs-built_in">    kA1_Config,</span>         <br><span class="hljs-built_in">    kA8_Config,</span>         <br>    // !&lt; <span class="hljs-number">8</span> -bits per pixel, using SkColorTable to specify the colors<br><span class="hljs-built_in">    kIndex8_Config,</span><br><span class="hljs-built_in">    kRGB_565_Config,</span>    <br><span class="hljs-built_in">    kARGB_4444_Config,</span>  <br><span class="hljs-built_in">    kARGB_8888_Config,</span>  <br><span class="hljs-built_in">    kRLE_Index8_Config,</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><code>external/skia/src/images/SkImageDecoder_libpng.cpp</code>的getBitmapConfig方法，如果当前图片是调色板模式，会执行<code>canUpscalePaletteToConfig</code>方法，该方法返回 false 则 configp 被设置为 kIndex8_Config。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">bool</span> SkPNGImageDecoder::get<span class="hljs-constructor">BitmapConfig(<span class="hljs-params">png_structp</span> <span class="hljs-params">png_ptr</span>, <span class="hljs-params">png_infop</span> <span class="hljs-params">info_ptr</span>, SkBitmap::Config<span class="hljs-operator">*</span> <span class="hljs-params">configp</span>, <span class="hljs-params">bool</span><span class="hljs-operator">*</span> <span class="hljs-params">hasAlphap</span>, SkPMColor<span class="hljs-operator">*</span> <span class="hljs-params">theTranspColorp</span>)</span> &#123;<br>    png_uint_32 origWidth, origHeight;<br>    <span class="hljs-built_in">int</span> bitDepth, colorType;<br>    png<span class="hljs-constructor">_get_IHDR(<span class="hljs-params">png_ptr</span>, <span class="hljs-params">info_ptr</span>, &amp;<span class="hljs-params">origWidth</span>, &amp;<span class="hljs-params">origHeight</span>, &amp;<span class="hljs-params">bitDepth</span>, &amp;<span class="hljs-params">colorType</span>, <span class="hljs-params">int_p_NULL</span>, <span class="hljs-params">int_p_NULL</span>, <span class="hljs-params">int_p_NULL</span>)</span>;<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-keyword">if</span> (colorType<span class="hljs-operator"> == </span>PNG_COLOR_TYPE_PALETTE) &#123;<br>        <span class="hljs-built_in">bool</span> paletteHasAlpha = has<span class="hljs-constructor">TransparencyInPalette(<span class="hljs-params">png_ptr</span>, <span class="hljs-params">info_ptr</span>)</span>;<br>        *configp = this-&gt;get<span class="hljs-constructor">PrefConfig(<span class="hljs-params">kIndex_SrcDepth</span>, <span class="hljs-params">paletteHasAlpha</span>)</span>;<br>        <span class="hljs-comment">// now see if we can upscale to their requested config</span><br>        <span class="hljs-keyword">if</span> (!can<span class="hljs-constructor">UpscalePaletteToConfig(<span class="hljs-operator">*</span><span class="hljs-params">configp</span>, <span class="hljs-params">paletteHasAlpha</span>)</span>) &#123;<br>            *configp = SkBitmap::kIndex8_Config;    <span class="hljs-comment">// 注意这里</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// ...</span><br></code></pre></td></tr></table></figure><p>当dstConfig为565_config并且图片包含alpha通道时，或者dstConfig不属于kARGB_8888_Config、kARGB_4444_Config 、kRGB_565_Config之一，则<code>canUpscalePaletteToConfig</code>如何才能令其返回<code>false</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">canUpscalePaletteToConfig</span><span class="hljs-params">(SkBitmap::Config dstConfig, <span class="hljs-type">bool</span> srcHasAlpha)</span> </span>&#123;<br>    <span class="hljs-keyword">switch</span> (dstConfig) &#123;<br>        <span class="hljs-keyword">case</span> SkBitmap::kARGB_8888_Config:<br>        <span class="hljs-keyword">case</span> SkBitmap::kARGB_4444_Config:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">case</span> SkBitmap::kRGB_565_Config:<br>            <span class="hljs-comment">// only return true if the src is opaque (since 565 is opaque)</span><br>            <span class="hljs-keyword">return</span> !srcHasAlpha;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再看getPrefConfig的实现，getPrefConfig返回由java层设置的fDefaultPref，当config为kNo_Config时，返回GetDeviceConfig(),其实也是kNo_Config。那么config什么时候为SkBitmap::kNo_Config呢？当Java层设置的inPreferredConfig为null时，fDefaultPref会被赋值为kNo_Config。详情可查看<code>getNativeBitmapConfig </code>方法。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function">SkBitmap::Config <span class="hljs-title">SkImageDecoder::getPrefConfig</span><span class="hljs-params">(SrcDepth srcDepth, <span class="hljs-type">bool</span> srcHasAlpha)</span> <span class="hljs-type">const</span> </span>&#123;<br>    SkBitmap::Config config = SkBitmap::kNo_Config;<br><br>    <span class="hljs-keyword">if</span> (fUsePrefTable) &#123;    <span class="hljs-comment">// 普通图片解码不会进入这个分支</span><br>        <span class="hljs-keyword">switch</span> (srcDepth) &#123;<br>            <span class="hljs-comment">// ...</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        config = fDefaultPref;  <span class="hljs-comment">// 注意这里</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (SkBitmap::kNo_Config == config) &#123;<br>        config = SkImageDecoder::<span class="hljs-built_in">GetDeviceConfig</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> config;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>综上所述，只要PNG文件本身是索引颜色格式，且在调用BitmapFactory.decodeXXX方法族时，将传入的BitmapFactory.Options.inPreferredConfig置为null即可解码得到索引颜色格式的Bitmap对象，如果这张PNG是带有alpha通道的，inPreferredConfig设置为RGB_565也可以。此时该Bitmap的Config为null。</strong></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.jianshu.com/p/ecacf2f60cb2">https://www.jianshu.com/p/ecacf2f60cb2</a><br><a href="https://www.jianshu.com/p/cc17d18c3447">https://www.jianshu.com/p/cc17d18c3447</a><br><a href="http://www.coreldrawchina.com/X7jiaocheng/cdr-tiaosebanyanse-moshi.html">http://www.coreldrawchina.com/X7jiaocheng/cdr-tiaosebanyanse-moshi.html</a><br><a href="https://www.jianshu.com/p/f56292504ad3">https://www.jianshu.com/p/f56292504ad3</a><br><a href="https://blog.csdn.net/ccpat/article/details/46834089">https://blog.csdn.net/ccpat/article/details/46834089</a><br><a href="https://android.googlesource.com/platform/frameworks/base/+/marshmallow-dev/tools/aapt2/Png.cpp">https://android.googlesource.com/platform/frameworks/base/+/marshmallow-dev/tools/aapt2/Png.cpp</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;某周六线上运营报障，在部分用户的Android手机上个别地图图标未能正常显示，只有部分手机有问题(7.0及以下版本)有问题，诡异的是只有个别图标(1个)显示有问题，大部分图标显示并没有问题,开发介入验证后发现更诡异的是，只在release版本才有这个问题，开发debug版本上并没有问题。&lt;br&gt;低版本显示有问题还好理解，这应该是一个版本兼容相关的问题。release和debug上个别图标有差别就有点匪夷所思了，写篇博客记录下。&lt;/p&gt;
&lt;h3 id=&quot;0x01-问题说明&quot;&gt;&lt;a href=&quot;#0x01-问题说明&quot; class=&quot;headerlink&quot; title=&quot;0x01 问题说明&quot;&gt;&lt;/a&gt;0x01 问题说明&lt;/h3&gt;&lt;p&gt;问题日志：&lt;/p&gt;
&lt;figure class=&quot;highlight apache&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs apache&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;java&lt;/span&gt;.lang.NullPointerException: Attempt to read from field &amp;#x27;int android.graphics.Bitmap$Config.nativeInt&amp;#x27; &lt;span class=&quot;hljs-literal&quot;&gt;on&lt;/span&gt; a null object reference&lt;br&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;501&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20394&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;20394&lt;/span&gt;/? W/System.err:     at android.graphics.Bitmap.copy(Bitmap.java:&lt;span class=&quot;hljs-number&quot;&gt;557&lt;/span&gt;)&lt;br&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;501&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20394&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;20394&lt;/span&gt;/? W/System.err:     at com.amap.api.maps.model.BitmapDescriptor.&amp;lt;init&amp;gt;(BitmapDescriptor.java:&lt;span class=&quot;hljs-number&quot;&gt;28&lt;/span&gt;)&lt;br&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;10&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;14&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;27&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;36&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;501&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;20394&lt;/span&gt;-&lt;span class=&quot;hljs-number&quot;&gt;20394&lt;/span&gt;/? W/System.err:     at com.amap.api.maps.model.BitmapDescriptorFactory.fromBitmap(BitmapDescriptorFactory.java:&lt;span class=&quot;hljs-number&quot;&gt;258&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习总结" scheme="https://ivonhoe.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="Bitmap" scheme="https://ivonhoe.github.io/tags/Bitmap/"/>
    
    <category term="BitmapFactory" scheme="https://ivonhoe.github.io/tags/BitmapFactory/"/>
    
  </entry>
  
  <entry>
    <title>Flutter aspectd入门指引</title>
    <link href="https://ivonhoe.github.io/2019/11/08/hello-flutter-aspectd/"/>
    <id>https://ivonhoe.github.io/2019/11/08/hello-flutter-aspectd/</id>
    <published>2019-11-08T15:16:38.000Z</published>
    <updated>2020-02-08T15:25:12.794Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>什么是aspectd？aspectd是闲鱼针对dart的AOP开源框架。<a href="https://github.com/alibaba-flutter/aspectd.git">https://github.com/alibaba-flutter/aspectd.git</a><br>阅读本文你将得到什么？</p><ol><li>掌握aspectd的环境搭建，并如何在本地成功运行aspectd的demo</li><li>掌握有关aop的基础概念</li><li>了解aspectd的基础用法和原理</li></ol><span id="more"></span><h3 id="0x01-准备"><a href="#0x01-准备" class="headerlink" title="0x01 准备"></a>0x01 准备</h3><h4 id="1-1-开发环境"><a href="#1-1-开发环境" class="headerlink" title="1.1 开发环境"></a>1.1 开发环境</h4><p>aspectd的环境搭建需要flutter源码、aspectd源码和dart源码，并需要在系统中设置相应的全局环境变量。</p><h4 id="1-1-1-flutter环境"><a href="#1-1-1-flutter环境" class="headerlink" title="1.1.1 flutter环境"></a>1.1.1 flutter环境</h4><p>下载flutter源码：</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/flutter/</span>flutter.git<br></code></pre></td></tr></table></figure><h4 id="1-1-2-aspectd下载"><a href="#1-1-2-aspectd下载" class="headerlink" title="1.1.2 aspectd下载"></a>1.1.2 aspectd下载</h4><p>下载aspectd源码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/alibaba-flutter/</span>aspectd.git<br></code></pre></td></tr></table></figure><h4 id="1-1-3-环境变量"><a href="#1-1-3-环境变量" class="headerlink" title="1.1.3 环境变量"></a>1.1.3 环境变量</h4><p>配置flutter镜像、本地flutter源码地址、flutter bin目录、dart bin目录：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">PUB_HOSTED_URL</span>=https://pub.flutter-io.cn<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">FLUTTER_STORAGE_BASE_URL</span>=https://storage.flutter-io.cn<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH_TO_FLUTTER_GIT_DIRECTORY</span>=/Users/Ivonhoe/Flutter/flutter<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH_TO_FLUTTER_GIT_DIRECTORY</span>/bin:$PATH<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PATH_TO_FLUTTER_GIT_DIRECTORY</span>/bin/cache/dart-sdk/bin:$PATH<br></code></pre></td></tr></table></figure><h4 id="1-2-安装aspectd"><a href="#1-2-安装aspectd" class="headerlink" title="1.2 安装aspectd"></a>1.2 安装aspectd</h4><p>aspectd需要<br>1.切换到flutter的git目录:<br><code>cd $&#123;path-for-git-flutter&#125;</code><br>2.将aspectd源码中的git patch文件合并到flutter源码工程中，合并git patch:<br><code>git apply --3way ~/Github/aspectd/0001-aspectd.patch</code><br>3.删除原有的的flutter编译工具：<br><code>rm bin/cache/flutter_tools.stamp</code><br>4.重新构建新的flutter编译工具：<br><code>flutter doctor -v</code></p><h4 id="1-3-运行"><a href="#1-3-运行" class="headerlink" title="1.3 运行"></a>1.3 运行</h4><p>到aspectd源码目录的example目录下执行：<br><code>flutter run --debug --verbose</code><br><strong>如果你能一次运行成功并aspectd生效，请直接跳转到第二章！</strong></p><h4 id="1-4-aspectd编译不过或demo没有效果"><a href="#1-4-aspectd编译不过或demo没有效果" class="headerlink" title="1.4 aspectd编译不过或demo没有效果"></a>1.4 aspectd编译不过或demo没有效果</h4><p>编译不过或运行demo没有打印出想要的日志是aspectd使用时最常见的问题。aspectd的基本原理实际上是使用了dart对虚拟语法树操作的api，通过对flutter dill文件进行虚拟语法树遍历，完成对dill文件的转换，进而实现对dart的切面操作。所以在aspectd的编译上需要依赖dart源码中的<code>kernal</code>和<code>front_end</code>，可通过查看aspectd源码根目录中的<code>pubspec.yaml</code>查看依赖库和对应的ref。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">dependency_overrides:</span><br><span class="hljs-symbol">  kernel:</span><br><span class="hljs-symbol">    git:</span><br><span class="hljs-symbol">      url:</span> https:<span class="hljs-comment">//github.com/dart-lang/sdk.git</span><br><span class="hljs-symbol">      ref:</span> <span class="hljs-number">5e39817</span>ec7ab7f56f381c244d105c7e40913a3e0<br><span class="hljs-symbol">      path:</span> pkg/kernel<br><span class="hljs-symbol">  front_end:</span><br><span class="hljs-symbol">    git:</span><br><span class="hljs-symbol">      url:</span> https:<span class="hljs-comment">//github.com/dart-lang/sdk.git</span><br><span class="hljs-symbol">      ref:</span> <span class="hljs-number">5e39817</span>ec7ab7f56f381c244d105c7e40913a3e0<br><span class="hljs-symbol">      path:</span> pkg/front_end<br></code></pre></td></tr></table></figure><p>在1.2步骤中，使用git patch命令修改flutter源码引入了<code>aspectd.dart</code>文件，该文件做的核心操作就包括下载aspectd的依赖库、编译aspectd.dart.snapshot和根据注解内容使用aspect.dart.snapshot执行具体的dill transform操作。所以，aspectd是否生效的两个关键点是aspectd依赖库是否下载成功和aspectd.snapshot文件是否编译成功。<br>因为aspect使用依赖github源码指定ref的方式依赖kenerl和front_end库，这个过程需要下载github上dart-lang的所有源码(约900M左右)，在国内的网络环境下很难做到一次成功，这里分享一个绕过因网络不稳定问题导致aspectd不生效的方法。</p><ol><li>手动下载dart源码，<code>git clone https://github.com/dart-lang/sdk.git</code></li><li>将dart源码切换到aspectd项目中<code>pubspec.yaml</code>指定的ref上，如上例中，可执行 <code>git checkout 5e39817ec7ab7f56f381c244d105c7e40913a3e0</code></li><li>将aspect对github源码的依赖改成对本地源码的依赖<br><img src="/res/aspectd/aspectd_1.jpeg"></li><li>手动编译aspect.dart.snapshot(在aspectd根目录中)<br><code>dart --snapshot=snapshot/aspectd.dart.snapshot tool/starter.dart</code></li><li>修改flutter源码中的aspectd.dart，强制指定aspect.dart.snapshot的目录。<br><img src="/res/aspectd/aspectd_2.jpeg"></li><li>删除flutter_tools.stamp重新编译运行<code>flutter run --debug -v</code>即可生效</li></ol><h4 id="1-5-常见问题解决"><a href="#1-5-常见问题解决" class="headerlink" title="1.5 常见问题解决"></a>1.5 常见问题解决</h4><ul><li><p>等待另一个flutter命令释放锁<br><code>Waiting for another flutter command to release the startup lock...</code><br>解决方法，将bin&#x2F;cache下的lockfile删除后重新执行命令<br><code>rm $&#123;path-for-git-flutter&#125;/bin/cache/lockfile</code></p></li><li><p>如何使用命令行编译工程<br>debug版本：<code>flutter run --debug --verbose</code><br>release版本：<code>flutter run --release --verbose</code></p></li><li><p>pub命令是什么？<br><code>flutter pub get</code><br>pub是dart提供的包管理工具，在flutter源码中的<code>flutter/bin/cache/dart-sdk/bin/pub</code>目录下有pub可执行文件，想要单独执行pub命令可讲该目录加入到系统的环境变量中<br>相当于android gradle的gradle sync<br>相当于ios pod中的pod install<br>相当于js npm中的npm install</p></li></ul><h3 id="0x02-aspectd的注解"><a href="#0x02-aspectd的注解" class="headerlink" title="0x02 aspectd的注解"></a>0x02 aspectd的注解</h3><h4 id="2-1-pragma-‘vm-entry-point’"><a href="#2-1-pragma-‘vm-entry-point’" class="headerlink" title="2.1 @pragma(‘vm:entry-point’)"></a>2.1 @pragma(‘vm:entry-point’)</h4><p>在AOT变一下，如果不能被应用主入口(main)最终可能调用到，那么将被视为无用代码而被丢弃掉。AOP代码因为其注入逻辑的无侵入性，所以不会被main调用，因为使用此注解告诉编译器不要丢弃这段逻辑。</p><h4 id="2-2-Aspect"><a href="#2-2-Aspect" class="headerlink" title="2.2 @Aspect"></a>2.2 @Aspect</h4><p>Aspect注解可以使得像asepctd源码example中<code>aop_impl.dart</code>这样的AOP实现类被方便的识别和提取，也可以起到方便开关的作用，如果想禁用掉这段AOP逻辑，移除@Aspect注解即可</p><h4 id="2-3-Call、-Execute、-Inject"><a href="#2-3-Call、-Execute、-Inject" class="headerlink" title="2.3 @Call、@Execute、@Inject"></a>2.3 @Call、@Execute、@Inject</h4><p>在介绍这几个注解之前需要理解关于AOP的几个概念，aspectd官方介绍文档对aspectd的说明引入了很对对aop设计的说明，比如什么是Advice？什么是Before\Around\After?如果对这些概念没有预先的概念，读aspectd的文档是一头雾水的，至少我是这样！</p><h5 id="2-3-1-什么是Joint-Point（连接点）"><a href="#2-3-1-什么是Joint-Point（连接点）" class="headerlink" title="2.3.1 什么是Joint Point（连接点）"></a>2.3.1 什么是Joint Point（连接点）</h5><p>能够插入切面的一个点。这个点可以是类的某个方法调用前、调用后、方法抛出异常后等。切面代码可以利用这些点插入到应用的正常流程之中，并添加行为</p><h5 id="2-3-2-什么是Pointcut（切点）"><a href="#2-3-2-什么是Pointcut（切点）" class="headerlink" title="2.3.2 什么是Pointcut（切点）"></a>2.3.2 什么是Pointcut（切点）</h5><p>指定一个通知将被引发的一系列连接点的集合。切点是连接点规则的描述。切点和连接点不是一对一的关系，一个切点匹配多个连接点</p><h5 id="2-3-3-什么是Target-Object（目标对象）"><a href="#2-3-3-什么是Target-Object（目标对象）" class="headerlink" title="2.3.3 什么是Target Object（目标对象）"></a>2.3.3 什么是Target Object（目标对象）</h5><p>包含连接点的对象</p><h5 id="2-3-3-什么是Advice（通知）"><a href="#2-3-3-什么是Advice（通知）" class="headerlink" title="2.3.3 什么是Advice（通知）"></a>2.3.3 什么是Advice（通知）</h5><p>在特定的连接点，AOP框架执行的动作。通知有常见的几种类型：</p><ul><li>前置通知Before：在目标方法被调用之前调用通知功能</li><li>后置通知After：目标方法完成之后调用通知，无论该方法是否发生异常</li><li>后置返回通知After-returning：在目标方法成功执行之后调用通知</li><li>后置异常通知After-throwing：在目标方法抛出异常后调用通知</li><li>环绕通知Around：通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为</li></ul><h5 id="2-3-4-Call、-Execute、-Inject"><a href="#2-3-4-Call、-Execute、-Inject" class="headerlink" title="2.3.4 @Call、@Execute、@Inject"></a>2.3.4 @Call、@Execute、@Inject</h5><p>aspectd只有一种统一的通知类型，就是Around。具体分为两种注解，分别是@Call和@Execute，这两种注解表达的PointCut都是通过包装原有方法实现的。差别是，@Call的PointCut是调用的地方，并不会修改原始方法的内部。@Execute会修改原有方法的内部。举个例子，分别使用@Call和@Execute对<code>test</code>方法执行切面操作</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span>()</span>&#123;<br>  print(<span class="hljs-string">&quot;print hello world!&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span>()</span>&#123;<br>  test();<br>&#125;<br></code></pre></td></tr></table></figure><p>@Call表达注解的实际代码会变成这样：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span>()</span>&#123;<br>  print(<span class="hljs-string">&quot;print hello world!&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">invokeCall</span>()</span>&#123;<br>  <span class="hljs-comment">// to do somethings</span><br>  test();<br>  <span class="hljs-comment">// to do somethings</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span>()</span>&#123;<br>  aop:invokeCall()<br>&#125;<br></code></pre></td></tr></table></figure><p>@Execute表达注解的实际代码会变成这样：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scss">void <span class="hljs-built_in">invokeExecutor</span>()&#123;<br>  <span class="hljs-comment">// to do somethings</span><br>  <span class="hljs-built_in">print</span>(&quot;print hello world!&quot;)<br>&#125;<br><br>void <span class="hljs-built_in">test</span>()&#123;<br>  <span class="hljs-built_in">invokeExecutor</span>();<br>&#125;<br><br>void <span class="hljs-selector-tag">main</span>()&#123;<br>  <span class="hljs-built_in">test</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>而@Inject相对于Call&#x2F;Executor而言，多了一个lineNum的参数，用于指定插入逻辑的具体行号。用于在具体方法中间插入处理逻辑。</p><h3 id="0x03-参考文档"><a href="#0x03-参考文档" class="headerlink" title="0x03 参考文档"></a>0x03 参考文档</h3><p><a href="https://github.com/alibaba-flutter/aspectd/issues/26">https://github.com/alibaba-flutter/aspectd/issues/26</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;什么是aspectd？aspectd是闲鱼针对dart的AOP开源框架。&lt;a href=&quot;https://github.com/alibaba-flutter/aspectd.git&quot;&gt;https://github.com/alibaba-flutter/aspectd.git&lt;/a&gt;&lt;br&gt;阅读本文你将得到什么？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;掌握aspectd的环境搭建，并如何在本地成功运行aspectd的demo&lt;/li&gt;
&lt;li&gt;掌握有关aop的基础概念&lt;/li&gt;
&lt;li&gt;了解aspectd的基础用法和原理&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Flutter" scheme="https://ivonhoe.github.io/categories/Flutter/"/>
    
    
    <category term="flutter" scheme="https://ivonhoe.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Android内存分析的一般方法</title>
    <link href="https://ivonhoe.github.io/2019/07/08/how-to-analyze-android-heap-1/"/>
    <id>https://ivonhoe.github.io/2019/07/08/how-to-analyze-android-heap-1/</id>
    <published>2019-07-08T15:04:56.000Z</published>
    <updated>2022-03-27T13:58:19.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><p>对内存问题的分析中一个必不可少的环节应该就是对hprof的分析了，常见的MAT和Leakcanry都是针对hprof文件的分析工具。这篇文章就记录下做内存分析的一般工具和分析步骤。</p><span id="more"></span><h3 id="0x02-使用dumpsys分析内存"><a href="#0x02-使用dumpsys分析内存" class="headerlink" title="0x02 使用dumpsys分析内存"></a>0x02 使用dumpsys分析内存</h3><p><code>adb shell dumpsys meminfo $applicationId [-d]</code></p><p><img src="/res/hprof/analyze_hprof_1.png"></p><p><strong>私有内存 Private (Clean and Dirty)</strong><br>这是仅属于你的进程的内存，这是你的进程被销毁时系统可以回收的RAM。通常情况下最重要的部分是Private Dirty RAM。</p><p><strong>按比例分配占用内存 PSS</strong><br>这表示您的应用的 RAM 使用情况，考虑了在各进程之间共享 RAM 页的情况。您的进程独有的任何 RAM 页会直接影响其 PSS 值，而与其他进程共享的 RAM 页仅影响与共享量成比例的 PSS 值。例如，两个进程之间共享的 RAM 页会将其一半的大小贡献给每个进程的 PSS。</p><p>通常情况下，仅需关注 Pss Total 和 Private Dirty 列。一些情况下，Private Clean 和 Heap Alloc 列提供的数据也需要关注。</p><p><strong>Dalvik Heap</strong></p><blockquote><p>PSS Total: 包括所有 Zygote 按比例分配的内存。<br>Private Dirty:  数值是仅分配到您应用的堆的实际 RAM，是由自己的分配和任何 Zygote 分配页组成，这些分配页自从 Zygote 派生应用进程以来已被修改(COW)。</p></blockquote><p><strong>.so mmap 和 .dex mmap</strong></p><blockquote><p>Pss Total: 包括应用之间共享的平台代码<br>Private Clean: 是应用自己的代码</p></blockquote><p><strong>.oat mmap</strong></p><blockquote><p>这是代码映像占用的 RAM 量，根据多个应用通常使用的预加载类计算。此映像在所有应用之间共享，不受特定应用影响</p></blockquote><p><strong>EGL mtrack 和 GL mtrack</strong></p><blockquote><p>EGL mtrack: gralloc分配的内存，主要是窗口系统，SurfaceView&#x2F;TextureView和其他的由gralloc分配的GraphicBuffer总和<br>GL mtrack: 驱动上报的GL内存使用情况。 主要是GL texture大小，GL command buffer，固定的全局驱动程序RAM开销等的总和</p></blockquote><p>这里有一个小技巧，应用开发者调用startTrimMemory会帮助app或者系统更多的释放内存，减少内存压力，但是调用的位置和时机要慎重，因为清除了缓存，在下一次绘制（vsync的下一个信号到来）的时候绘制效率不会很高。详细原理可参考：<a href="https://cloud.tencent.com/developer/article/1070616">https://cloud.tencent.com/developer/article/1070616</a></p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 清除GPU绘图缓存</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanGraphicsCache</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> ReflectUtils.getStaticMethod(<span class="hljs-string">&quot;android.view.WindowManagerGlobal&quot;</span>,<br>            <span class="hljs-string">&quot;getInstance&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">threadClazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;android.view.WindowManagerGlobal&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> threadClazz.getDeclaredMethod(<span class="hljs-string">&quot;trimMemory&quot;</span>, <span class="hljs-type">int</span>.class);<br>        m1.invoke(instance, TRIM_MEMORY_COMPLETE);<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>TOATAL</strong></p><blockquote><p>进程占用的按比例分配占用内存 (PSS) 总量。等于上方所有 PSS 字段的总和。表示您的进程占用的内存量占整体内存的比重，可以直接与其他进程和可用总 RAM 比较。<br>Private Dirty 和 Private Clean 是进程中的总分配，未与其他进程共享。它们（尤其是 Private Dirty）等于你的进程被破坏后将释放回系统中的 RAM 量。Dirty RAM 是因为已被修改而必须保持在 RAM 中的 RAM 页（因为没有交换）；Clean RAM 是已从某个持久性文件（例如正在执行的代码）映射的 RAM 页，如果一段时间不用，可以移出分页。</p></blockquote><p><strong>ViewRootImpl</strong><br>根视图数量，每一个根视图关联一个window，由此可确定涉及对话框或其他window的内存泄露。</p><p><strong>AppContexts 和 Activities</strong><br>Context和Activity对象数量，用于快速确定Activity的泄露情况。</p><h3 id="0x03-使用堆转储工具"><a href="#0x03-使用堆转储工具" class="headerlink" title="0x03 使用堆转储工具"></a>0x03 使用堆转储工具</h3><p>将android app的内存信息转换成hprof格式的磁盘文件，这个过程就叫堆转储。堆转储的目标当然是为了获取当前Java虚拟机的内存信息以供排查内存问题。在android平台上常见的三种堆转储方法。</p><ol><li>使用sdk自带的DDMS工具完成堆转储</li><li>使用Android Studio提供的Android Profiler工具完成堆转储</li><li>使用Android sdk提供的api堆转储，以下代码为api实例</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">state</span> <span class="hljs-operator">=</span> android.os.Environment.getExternalStorageState();<br>    <span class="hljs-comment">// 判断SdCard是否存在并且是可用的</span><br>    <span class="hljs-keyword">if</span> (android.os.Environment.MEDIA_MOUNTED.equals(state)) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dumpDir</span> <span class="hljs-operator">=</span> Hprof.getDumpDir(context);<br>        android.os.Debug.dumpHprofData(dumpDir);<br>        Logger.d(String.format(<span class="hljs-string">&quot;create dumpfile %s done!&quot;</span>, dumpDir));<br>        <span class="hljs-keyword">return</span> dumpDir;<br>    &#125;<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0x04-使用hprof文件分析工具"><a href="#0x04-使用hprof文件分析工具" class="headerlink" title="0x04 使用hprof文件分析工具"></a>0x04 使用hprof文件分析工具</h3><p>Memory Analyzer Tool（简称MAT） 使用方法可参考： <a href="http://www.androidperformance.com/2015/04/11/AndroidMemory-Usage-Of-MAT-Pro/">Android内存优化之二：MAT使用进阶</a>。<br>这里补充的是，MAT支持使用OQL（对象查询语言）查询堆文件信息，你可以像类似使用SQL查询数据库一样查询堆文件上的内存对象的信息，举个例子，我想知道当前内存中有多少个Activity？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> instanceof android.app.Activity<br></code></pre></td></tr></table></figure><p><a href="/res/jvm-2/mat-1.png"></a></p><p>查询大小大于100kb大小的Bitmap对象，图略</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> instanceof android.graphics.Bitmap s <span class="hljs-keyword">where</span> s.<span class="hljs-variable">@retainedHeapSize</span> <span class="hljs-operator">&gt;</span><span class="hljs-number">100000</span><br></code></pre></td></tr></table></figure><p>关于OQL详情参考：<a href="http://help.eclipse.org/kepler/index.jsp%EF%BC%8C%E6%90%9C%E7%B4%A2OQL">http://help.eclipse.org/kepler/index.jsp，搜索OQL</a></p><h3 id="0x05-使用Leakcanary监控泄露"><a href="#0x05-使用Leakcanary监控泄露" class="headerlink" title="0x05 使用Leakcanary监控泄露"></a>0x05 使用Leakcanary监控泄露</h3><p>LeakCanary是内存泄露检测工具，<a href="https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/">LeakCanary 中文使用说明</a>和LeakCanary的开源地址：<a href="https://github.com/square/leakcanary">https://github.com/square/leakcanary</a></p><p><strong>如何监控内存泄露的发生？</strong><br>利用弱引用。当JVM进行垃圾回收时，无论内存是否充足，如果该对象只有弱引用存在，那么该对象会被垃圾回收器回收。所以Leakcanary在进行内存泄露的监控时，利用弱引用的上述特性，在对象生命周期结束后主动gc并检查该对象的弱引用是否被回收，如果弱引用没有被正常回收，说明在对象生命周期结束以后，该对象还被其他对象持有他的非弱引用。该对象还有到达GC ROOTS的可达路径。如果在对象生命周期结束后弱引用不存在了，说明该对象已经被JVM的垃圾回收器正常回收了，该对象的内存空间也被正常回收。所以Leakcanary设计成是对有明确生命周期的对象的自动监控，比如Activity对象，也可以是你想要跟踪的有明确生命周期的对象。</p><p><strong>如何判断弱引用被回收？</strong><br>利用ReferenceQueue。当垃圾回收器准备回收一个被引用包装的对象时，该引用会被加入到关联的ReferenceQueue。程序可以通过判断引用队列中是否已经加入引用,来了解被引用的对象是否被GC回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java">Retryable.Result <span class="hljs-title function_">ensureGone</span><span class="hljs-params">(<span class="hljs-keyword">final</span> KeyedWeakReference reference, <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> watchStartNanoTime)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">gcStartNanoTime</span> <span class="hljs-operator">=</span> System.nanoTime();<br>    <span class="hljs-comment">//计算watch方法到gc垃圾回收的时长</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">watchDurationMs</span> <span class="hljs-operator">=</span> NANOSECONDS.toMillis(gcStartNanoTime - watchStartNanoTime);<br>    <span class="hljs-comment">//尝试移除已经到达引用队列的弱引用</span><br>    removeWeaklyReachableReferences();<br>    <span class="hljs-comment">//判断是否在debug</span><br>    <span class="hljs-keyword">if</span> (debuggerControl.isDebuggerAttached()) &#123;<br>      <span class="hljs-comment">// The debugger can create false leaks. (debug可以创造错误的内存泄露)</span><br>      <span class="hljs-keyword">return</span> RETRY;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (gone(reference)) &#123;<span class="hljs-comment">//若当前对象已经可达了，即不会造成你内存泄露</span><br>      <span class="hljs-keyword">return</span> DONE;<br>    &#125;<br>    <span class="hljs-comment">//手动gc，确保引用对象是否真的被回收了。因为在dump内存信息之前提示内存泄露的时候，希望系统经过充分gc垃圾回收，而不存在任何的误判，对leakcanary容错性的考虑</span><br>    gcTrigger.runGc();<br>    <span class="hljs-comment">//清除已经到达引用队列的弱引用</span><br>    removeWeaklyReachableReferences();<br>    <span class="hljs-keyword">if</span> (!gone(reference)) &#123;<span class="hljs-comment">//此时对象还没到达对列，代表已经内存泄露了</span><br>      <span class="hljs-type">long</span> <span class="hljs-variable">startDumpHeap</span> <span class="hljs-operator">=</span> System.nanoTime();<br>      <span class="hljs-type">long</span> <span class="hljs-variable">gcDurationMs</span> <span class="hljs-operator">=</span> NANOSECONDS.toMillis(startDumpHeap - gcStartNanoTime);<br>      <span class="hljs-comment">//dump出内存泄露的heap文件,这里可能触发GC</span><br>      <span class="hljs-type">File</span> <span class="hljs-variable">heapDumpFile</span> <span class="hljs-operator">=</span> heapDumper.dumpHeap();<br>      <span class="hljs-keyword">if</span> (heapDumpFile == RETRY_LATER) &#123;<br>        <span class="hljs-comment">// Could not dump the heap.(不能dump heap堆文件)</span><br>        <span class="hljs-keyword">return</span> RETRY;<br>      &#125;<br>      <span class="hljs-comment">//dump heap文件的时间计算</span><br>      <span class="hljs-type">long</span> <span class="hljs-variable">heapDumpDurationMs</span> <span class="hljs-operator">=</span> NANOSECONDS.toMillis(System.nanoTime() - startDumpHeap);<br>      <span class="hljs-comment">//真正分析内存泄露以及路径</span><br>      <span class="hljs-type">HeapDump</span> <span class="hljs-variable">heapDump</span> <span class="hljs-operator">=</span> heapDumpBuilder.heapDumpFile(heapDumpFile).referenceKey(reference.key)<br>          .referenceName(reference.name)<br>          .watchDurationMs(watchDurationMs)<br>          .gcDurationMs(gcDurationMs)<br>          .heapDumpDurationMs(heapDumpDurationMs)<br>          .build();<br>      heapdumpListener.analyze(heapDump);<br>    &#125;<br>    <span class="hljs-keyword">return</span> DONE;<br>  &#125;<br></code></pre></td></tr></table></figure><p><strong>如何分析对象的被引用情况？</strong><br>遍历对象树。</p><h3 id="0x06-使用三方库手动分析hprof文件"><a href="#0x06-使用三方库手动分析hprof文件" class="headerlink" title="0x06 使用三方库手动分析hprof文件"></a>0x06 使用三方库手动分析hprof文件</h3><p>可使用square提供的堆文件分析库(<code>com.squareup.haha:haha:2.0.4</code>)对hprof文件进行解析得到对象树。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">private</span> Snapshot getSnapShot(<span class="hljs-keyword">String</span> hprofPath) &#123;<br>    File heapDumpFile = <span class="hljs-keyword">new</span> <span class="hljs-type">File</span>(hprofPath);<br>    HprofBuffer hprofBuffer = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        hprofBuffer = <span class="hljs-keyword">new</span> <span class="hljs-type">MemoryMappedFileBuffer</span>(heapDumpFile);<br>        HprofParser parser = <span class="hljs-keyword">new</span> <span class="hljs-type">HprofParser</span>(hprofBuffer);<br>        <span class="hljs-keyword">return</span> parser.parse();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-1-对象搜索"><a href="#6-1-对象搜索" class="headerlink" title="6.1 对象搜索"></a>6.1 对象搜索</h4><p>可根据解析获得的Snapshot对象完成对特定类名对象的查找操作。进而批量分析出当前内存中执行类型对象的数量和对象引用情况。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs smali">List&lt;ClassObj&gt; classObjList = snapshot.findAllDescendantClasses(filterKey());<br>List&lt;Instance&gt; allInstance =<span class="hljs-built_in"> new </span>ArrayList&lt;&gt;();<br>for (ClassObj classObj<span class="hljs-keyword"> :</span> classObjList) &#123;<br>    ClassObj instanceClass = snapshot.findClass(classObj.getClassName());<br>    for (Instance<span class="hljs-built_in"> instance </span>: instanceClass.getInstancesList()) &#123;<br>        allInstance.add(instance);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-2-对象树遍历"><a href="#6-2-对象树遍历" class="headerlink" title="6.2 对象树遍历"></a>6.2 对象树遍历</h4><p>可通过解析到的snapshot对象获取Root节点，自定义对象数爬虫，从Root节点遍历整个对象树，查找出异常对象的分布。如希望查找出当前对象树中，找到最大的组件类型有哪些：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">mDistanceVisitor = <span class="hljs-keyword">new</span> <span class="hljs-constructor">RetainedSizeVisitor()</span>;<br>snapshot.compute<span class="hljs-constructor">Dominators()</span>;<br><span class="hljs-comment">// 找到最大的组件类型</span><br>mDistanceVisitor.<span class="hljs-keyword">do</span><span class="hljs-constructor">Visit(<span class="hljs-params">snapshot</span>.<span class="hljs-params">getGCRoots</span>()</span>);<br></code></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Ivonhoe on 2018/9/26.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RetainedSizeVisitor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">NonRecursiveVisitor</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * App space中retained size最大的对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> FixedSizePriorityQueue mMaxRetainedQueue;<br><br>    <span class="hljs-keyword">private</span> List&lt;HeapInstanceEntry&gt; maxInstance;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RetainedSizeVisitor</span><span class="hljs-params">()</span> </span>&#123;<br>        mMaxRetainedQueue = <span class="hljs-keyword">new</span> FixedSizePriorityQueue(<span class="hljs-number">30</span>);<br>        maxInstance = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">visitRootObj</span><span class="hljs-params">(RootObj root)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.visitRootObj(root);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">defaultAction</span><span class="hljs-params">(Instance instance)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.defaultAction(instance);<br><br>        findTopNRetainedSizeInstanceInAppSpace(instance);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 找到retained大小最大的n个对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">findTopNRetainedSizeInstanceInAppSpace</span><span class="hljs-params">(Instance child)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (child != <span class="hljs-keyword">null</span> &amp;&amp; !(child <span class="hljs-keyword">instanceof</span> ClassObj) &amp;&amp; child.getHeap().getId() == <span class="hljs-string">&#x27;A&#x27;</span>) &#123;<br>            mMaxRetainedQueue.add(child);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doVisit</span><span class="hljs-params">(Iterable&lt;? <span class="hljs-keyword">extends</span> Instance&gt; startNodes)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.doVisit(startNodes);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FixedSizePriorityQueue</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> PriorityQueue&lt;Instance&gt; queue;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSize; <span class="hljs-comment">//堆的最大容量</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FixedSizePriorityQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxSize)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (maxSize &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>            <span class="hljs-keyword">this</span>.maxSize = maxSize;<br>            <span class="hljs-keyword">this</span>.queue = <span class="hljs-keyword">new</span> PriorityQueue(maxSize, <span class="hljs-keyword">new</span> Comparator&lt;Instance&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Instance o1, Instance o2)</span> </span>&#123;<br>                    <span class="hljs-keyword">return</span> ((Long) o1.getTotalRetainedSize()).compareTo(o2.getTotalRetainedSize());<br>                &#125;<br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Instance e)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (queue.size() &lt; maxSize) &#123; <span class="hljs-comment">//未达到最大容量，直接添加</span><br>                queue.add(e);<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//队列已满</span><br>                Instance peek = queue.peek();<br>                <span class="hljs-keyword">if</span> (peek != <span class="hljs-keyword">null</span> &amp;&amp; (e.getTotalRetainedSize() &gt; peek.getTotalRetainedSize())) &#123;<br>                    queue.poll();<br>                    queue.add(e);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://developer.android.com/studio/command-line/dumpsys#meminfo">https://developer.android.com/studio/command-line/dumpsys#meminfo</a><br><a href="https://cloud.tencent.com/developer/article/1070616">https://cloud.tencent.com/developer/article/1070616</a><br><a href="https://cloud.tencent.com/developer/article/1070616">https://cloud.tencent.com/developer/article/1070616</a><br><a href="http://gityuan.com/2016/01/02/memory-analysis-command/">http://gityuan.com/2016/01/02/memory-analysis-command/</a><br><a href="https://blog.csdn.net/msf568834002/article/details/78881341">https://blog.csdn.net/msf568834002/article/details/78881341</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h3&gt;&lt;p&gt;对内存问题的分析中一个必不可少的环节应该就是对hprof的分析了，常见的MAT和Leakcanry都是针对hprof文件的分析工具。这篇文章就记录下做内存分析的一般工具和分析步骤。&lt;/p&gt;</summary>
    
    
    
    <category term="性能优化" scheme="https://ivonhoe.github.io/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="性能优化" scheme="https://ivonhoe.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android虚拟机的几个问题探究</title>
    <link href="https://ivonhoe.github.io/2019/06/27/android-vm-1/"/>
    <id>https://ivonhoe.github.io/2019/06/27/android-vm-1/</id>
    <published>2019-06-27T14:17:52.000Z</published>
    <updated>2019-06-27T14:28:32.545Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><p>这里说的Android虚拟机指运行在Android平台上的虚拟机，即日常遇到的Dalvik和ART虚拟机。这篇文章记录了自己对Android虚拟机几个问题的理解。只是个人学习和理解过程的记录，如有不当之处万望指正，邮箱<a href="mailto:&#121;&#97;&#x6e;&#x67;&#102;&#97;&#x6e;&#51;&#54;&#56;&#x37;&#x40;&#49;&#x36;&#51;&#46;&#99;&#111;&#109;">&#121;&#97;&#x6e;&#x67;&#102;&#97;&#x6e;&#51;&#54;&#56;&#x37;&#x40;&#49;&#x36;&#51;&#46;&#99;&#111;&#109;</a>。也希望在面对下面这些所谓JVM常见问题时能给你带来不一样的思考。</p><ul><li>问题1：如何理解JVM内存模型？</li><li>问题2：什么是GC ROOTS？</li><li>问题3：Android虚拟机有没有分代回收？</li></ul><span id="more"></span><h3 id="0x02-堆转储HPROF协议"><a href="#0x02-堆转储HPROF协议" class="headerlink" title="0x02 堆转储HPROF协议"></a>0x02 堆转储HPROF协议</h3><p>在看JVM内存模型时，不妨先了解一下堆转储文件的协议。通过HPROF的问题格式可以大致了解JVM在内存中的划分情况。</p><h4 id="2-1-HPROF文件格式"><a href="#2-1-HPROF文件格式" class="headerlink" title="2.1 HPROF文件格式"></a>2.1 HPROF文件格式</h4><p>总的来说，HPROF文件分为两个大的部分，分别是Hprof Header和Hprof Body。其中Header部分又包括以下几个部分：</p><ul><li>fixed header：包含文件描述以’&#x2F;0’结尾，id字段的长度信息等</li><li>string table：包含所有用到的字符串，包括类目、方法名、常量名等。</li><li>class table：包含所有的类信息</li><li>stack frame：包含所有线程的栈帧信息</li><li>stack trace：包含所有线程的虚拟机栈情况</li></ul><p>Body部分就是完整的jvm堆信息，将堆上的对象引用状况表述到文件中。其中在表述类对象是静态方法和静态成员变量时稍复杂，详细格式请查看 3.2 ~ 3.4。以下是HPROF文件格式的详细说明：</p><p>||||||||||||<br>| :——– | :——–:| :——: |:——: |:——: |:——: |:——: |<br>| “JAVA PROFILE 1.0.3&#x2F;0”(Magic Code) |  4byte mIdSize (储存id的字节长度) |  8byte (Time Stamp)  |<br>| 0x01(string table) |   4 byte |  4 byte(字符串length)  |   mIdSize byte |     strlen(length) byte|<br>| …… |   …… |  ……  |   …… | …… |<br>| 0x02（class table) |   4 byte |  4 byte (length)  |  4byte（class serial number） | mIdSize byte| 4 byte（Stack trace serial number）| 4 byte（class name string id）<br>| …… |   …… |  ……  |   …… | …… |<br>| 0x04（stack frame) |   4 byte |  4 byte (length)  | mIdSize byte | mIdSize byte (methodName string id) | mIdSize byte (methodSignature string id) | mIdSize byte (sourceFile string id ) | mIdSize byte (serial) | mIdSize byte (lineNumber )|<br>| …… |   …… |  ……  |   …… | …… |<br>| 0x05（stack trace) |   4 byte |  4 byte (length)  | 4 byte serialNumber | 4 byte threadSerialNumber | 4 byte numFrames | numFrames * mIdSize byte stack frame id|<br>| …… |   …… |  ……  |   …… | …… |<br>| 0x0C（HEAP DUMP) |   4 byte |  mIdSize byte (length)  |<br>| 0xFF（ROOT_UNKNOWN) |   mIdSize byte string id |<br>| 0x01（ROOT_JNI_GLOBAL) |   mIdSize byte string id | mIdSize byte jni global id|<br>| 0x02（ROOT_JNI_LOCAL) |   mIdSize byte string id |  4 byte thread serial number | 4 byte stack frame number |<br>| 0x03（ROOT_JAVA_FRAME) |   mIdSize byte string id |  4 byte thread serial number | 4 byte stack frame number |<br>| 0x04（ROOT_NATIVE_STACK) |   mIdSize byte string id |  4 thread serial number|<br>| 0x05（ROOT_STICKY_CLASS) |   mIdSize byte string id |<br>| 0x06（ROOT_THREAD_BLOCK) |   mIdSize byte string id |  4 thread serial number|<br>| 0x07（ROOT_MONITOR_USED) |   mIdSize byte string id |<br>| 0x08（ROOT_THREAD_OBJECT) |   mIdSize byte string id |  4 byte thread serial number | 4 byte stackSerialNumber |<br>| 0x20（ROOT_CLASS_DUMP) |   mIdSize byte string id |<br>| 0x21（ROOT_INSTANCE_DUMP) | mIdSize byte string id | mIdSize byte stackId | mIdSize byte class id | 4 byte remaining |<br>| 0x22(ROOT_OBJECT_ARRAY_DUMP)| mIdSize byte string id | mIdSize byte stack id |    num elements | mIdSize byte class id| mIdSize * num elements(skip) |<br>| 0x23(ROOT_PRIMITIVE_ARRAY_DUMP)|    mIdSize byte string id | mIdSize byte stack id | 4 byte num elements |    4 byte primitive type |    mIdSize * num elements(skip) |<br>| 0xC3(ROOT_PRIMITIVE_ARRAY_NODATA)|    mIdSize byte string id |    mIdSize byte stack id | 4 byte num elements |    4 byte primitive type |    4 * num elements(skip) |<br>| 0xfe(ROOT_HEAP_DUMP_INFO)    | mIdSize byte heap id | mIdSize byte heap name id(string id)<br>| 0x89(ROOT_INTERNED_STRING)| mIdSize byte string id |<br>| 0x8a(ROOT_FINALIZING)    | mIdSize byte string id |<br>| 0x8b(ROOT_DEBUGGER)    | mIdSize byte string id |<br>| 0x8c(ROOT_REFERENCE_CLEANUP) | mIdSize byte string id |<br>| 0x8d(ROOT_VM_INTERNAL) | mIdSize byte string id |<br>| 0x8e(ROOT_JNI_MONITOR) |    mIdSize byte string id | 4 byte thread serial number | 4 byte stack frame number |<br>| 0x90(ROOT_UNREACHABLE) | mIdSize byte    string id|<br>| 0x1C（HEAP DUMP SEGMENT) |   4 byte |  mIdSize byte (length)  |</p><h4 id="2-2-ROOT-CLASS-DUMP的格式"><a href="#2-2-ROOT-CLASS-DUMP的格式" class="headerlink" title="2.2 ROOT_CLASS_DUMP的格式"></a>2.2 ROOT_CLASS_DUMP的格式</h4><p>||||<br>| :——– | :——–:|<br>| 0x20(ROOT_CLASS_DUMP)    | 1 |<br>| id|     4|<br>| stack serial number|     4|<br>| super class id|     4|<br>| class loader id|     4|<br>| signeres id|     4|<br>| protection domain id|     4|<br>| reserved|     4|<br>| reserved|     4|<br>| instance size    | 4|<br>| const pool num entries|     2|<br>| 2 * num entries    |<br>| static fields num entries    | 2|<br>| static fields    | static fields num entries * (static fields)，下面会再单独列出来|<br>| instance fields num entries|     2|<br>| instance fields|     instance fields num entries * (instance fields)</p><h4 id="2-3-0x20-ROOT-CLASS-DUMP-Static-Fields"><a href="#2-3-0x20-ROOT-CLASS-DUMP-Static-Fields" class="headerlink" title="2.3 0x20(ROOT_CLASS_DUMP).Static Fields"></a>2.3 0x20(ROOT_CLASS_DUMP).Static Fields</h4><p>|||||<br>| :——– | :——–:| :——: |<br>| 4    | 1    | 4|<br>| static fields id|     static fields type|     type size| </p><h4 id="2-4-0x20-ROOT-CLASS-DUMP-Instance-Fields"><a href="#2-4-0x20-ROOT-CLASS-DUMP-Instance-Fields" class="headerlink" title="2.4 0x20(ROOT_CLASS_DUMP).Instance Fields"></a>2.4 0x20(ROOT_CLASS_DUMP).Instance Fields</h4><p>||||<br>| :——– | :——–:|<br>| 4    | 1|<br>| instance id|     instance type| </p><h4 id="2-5-HEAP-DUMP和HEAP-DUMP-SEGMENT的区别"><a href="#2-5-HEAP-DUMP和HEAP-DUMP-SEGMENT的区别" class="headerlink" title="2.5 HEAP DUMP和HEAP DUMP SEGMENT的区别"></a>2.5 HEAP DUMP和HEAP DUMP SEGMENT的区别</h4><p>如果你仔细研究了上面的内容的话，可能你就会有这样一个问题，HEAP DUMP和HEAP DUMP SEGMENT有什么区别？为什么要有两个标记？<br>其实堆转储的hprof文件格式中，原本是使用4字节32位存储堆对象的 “HEAP DUMP” (0x0C)的区块长度，但同时也就限制了HEAP DUMP的大小必须在4GB以内。在出现这个问题的情况下，在HPROF文件中新增了”HEAP DUMP SEGMENT” (0x1C)的格式，用来将超过4GB的JVM堆对象信息分别存储到文件的多个区块中。</p><p><a href="https://www.ibm.com/developerworks/community/blogs/kevgrig/entry/be_careful_with_hprof_heapdumps_bigger_than_4gb?lang=en_us">Be Careful with HPROF Heapdumps Bigger than 4GB </a> @2013-04-16</p><h3 id="0x03-理解JVM内存模型"><a href="#0x03-理解JVM内存模型" class="headerlink" title="0x03 理解JVM内存模型"></a>0x03 理解JVM内存模型</h3><p><img src="/res/android-vm-1/jvm-memory-model.png" alt="jvm-memory-model.png"></p><ol><li><p><strong>程序计数器</strong><br>在一个确定的时刻都只会执行一条线程中的指令，一条线程中有多个指令，为了线程切换可以恢复到正确执行位置，每个线程都需有独立的一个程序计数器，不同线程之间的程序计数器互不影响，独立存储。如果线程执行的是个java方法，那么计数器记录虚拟机字节码指令的地址。如果为native【底层方法】，那么计数器为空。这块内存区域是虚拟机规范中唯一没有OutOfMemoryError的区域。</p></li><li><p><strong>Java虚拟机栈</strong><br>线程私有，每个方法被执行的时候都会创建一个栈帧用于存储局部变量表，操作栈，动态链接，方法出口等信息。每一个方法被调用的过程就对应一个栈帧在虚拟机栈中从入栈到出栈的过程。</p></li><li><p><strong>本地方法栈</strong><br>线程私有，本地方法栈的功能和特点类似于虚拟机栈，不同的是，本地方法栈服务的对象是JVM执行的native方法，而虚拟机栈服务的是JVM执行的java方法。我们常见的HotSpot虚拟机选择合并了虚拟机栈和本地方法栈。</p></li><li><p><strong>Java堆</strong><br>所有线程共享的内存区域，所有对象实例及数组都要在堆上分配内存。</p></li><li><p><strong>方法区</strong><br>所有线程共享的内存区域，为了区分堆，又被称为非堆。用于存储已被虚拟机加载的类信息、常量、静态变量，如static修饰的变量加载类的时候就被加载到方法区中。</p></li></ol><p>在谈到JVM内存结构时，从HPROF文件的header和body部分就有体现，从数据上划分结构就可以分为方法区（包括运行时常量池，也就是header中string table的部分）、java堆（body部分）、虚拟机栈、本地方法栈和程序计数器。其中方法区和java堆部分是所有线程共享的数据区，其他则为线程独有的数据区。<strong>为什么会有这样的结构划分和设计？</strong><br>先看设计内存的目的，是因为随着CPU运转速度越来越快，磁盘远远跟不上CPU的读写速度，才设计了内存。但是随着CPU的发展，内存的读写速度也远远跟不上CPU的读写速度，为了解决这一纠纷，CPU厂商在每颗CPU上加入了高速缓存来缓解这种症状。基于高速缓存的存储交互很好的解决了处理器与内存之间的矛盾，也引入了新的问题：缓存一致性问题。在多处理器系统中，每个处理器有自己的高速缓存，而他们又共享同一块内存。回到JVM的内存模型中， Java中通过多线程机制使得多个任务同时执行处理，所有的线程共享JVM内存区域main memory，而每个线程又单独的有自己的工作内存，当线程与内存区域进行交互时，数据从主存拷贝到工作内存，进而交由线程处理。这样也就说的通了，为啥在JVM中有的区域是线程共享的，有的区域是线程独享的。</p><h3 id="0x04-什么是GC和GC-ROOTS？"><a href="#0x04-什么是GC和GC-ROOTS？" class="headerlink" title="0x04 什么是GC和GC_ROOTS？"></a>0x04 什么是GC和GC_ROOTS？</h3><h4 id="4-1-什么是GC"><a href="#4-1-什么是GC" class="headerlink" title="4.1 什么是GC"></a>4.1 什么是GC</h4><p>垃圾回收(Garbage Collection，简称GC)，是垃圾回收器提供的一种用于在空闲时间不定时回收无任何对象引用的对象占据的内存空间的一种机制。这种机制也不单单只有Java虚拟机才有，ObjectC和C#都有自己相应的垃圾回收机制，垃圾回收机制是帮助程序员自动管理对象内存空间的机制。</p><h4 id="4-2-什么是GC-ROOTS"><a href="#4-2-什么是GC-ROOTS" class="headerlink" title="4.2 什么是GC ROOTS"></a>4.2 什么是GC ROOTS</h4><p>常见的垃圾回收方式，引用计数算法和根搜索算法。<br><strong>引用计数</strong>就像是每个对象有个账本，当一个对象被另一个对象引用时该对象的引用计数器+1，当引用失效时引用计数器-1，任何引用计数为0的对象可以被当作垃圾收集。引用计数有一个先天的缺陷，那就是多个对象相互持有引用形成一个引用环是，那么环中的所有对象引用计数都不为0，这时这些对象都不能被垃圾回收器回收。<br><strong>根节点搜索</strong>指的是从根节点集合出发找到所有引用链可达对象，当一个对象到根节点集合（GC ROOTS）没有任何引用链存在时就证明此对象是不可用的。从对比JVM规范的垃圾回收根节点(来自：<a href="http://help.eclipse.org/luna/index.jsp?topic=/org.eclipse.mat.ui.help/concepts/gcroots.html&cp=37_2_3">Garbage Collection Roots</a>)、HPROF文件协议中的GC ROOTS tag类型和square haha库源码中对GC ROOTS的类型定义，参照下表。</p><p>|JVM规范名称| HPROF中的TAG | haha库中的RootType枚举类型 | 描述 |<br>| :——– | :——–:| :——: |:——: |:——: |:——: |:——: |<br>| System Class    | 0x05 | RootType.SYSTEM_CLASS  | 被bootstrap&#x2F;system class加载器加载的类，例如所有rt.jar中包名为 java.util.*的类 |<br>| JNI Local    | 0x02  | RootType.NATIVE_LOCAL | native代码中的本地变量，例如user defined JNI code or JVM internal code |<br>| JNI Global    | 0x01 | RootType.NATIVE_STATIC | native中的全局变量，例如user defined JNI code or JVM internal code |<br>| Thread Block    | 0x06  | RootType.THREAD_BLOCK | |<br>| Thread    |  |  | |<br>| Busy Monitor    | 0x07 | RootType.BUSY_MONITOR  | 所有调用 wait()、 notify()方法的， 或者同步的。For example, by calling synchronized(Object) or by entering a synchronized method. Static method means class, non-static method means object. |<br>| Java Local    | 0x03 | RootType.JAVA_LOCAL | 本地变量，例如线程栈帧中的参数和方法 |<br>| Native Stack    | 0x04 | RootType.NATIVE_STACK | In or out parameters in native code, such as user defined JNI code or JVM internal code. This is often the case as many methods have native parts and the objects handled as method parameters become GC roots. For example, parameters used for file&#x2F;network I&#x2F;O methods or reflection |<br>| Finalizable    | 0x8a | RootType.FINALIZING | 在finalizer等待队列里的对象 |<br>| Unfinalized    |  |  | |<br>| Unreachable    | 0x90 | RootType.UNREACHABLE | 从其他根节点都无法到达的对象 |<br>| Java Stack Frame    | 0x03 | RootType.JAVA_LOCAL | A Java stack frame, holding local variables. Only generated when the dump is parsed with the preference set to treat Java stack frames as objects. |<br>| Unknown    | 0xff | RootType.UNKNOWN | |<br>|     | 0x89 | RootType.INTERNED_STRING | |<br>|     | 0x8b | RootType.DEBUGGER | |<br>|     | 0x8c | RootType.REFERENCE_CLEANUP | |<br>|     | 0x8d | RootType.VM_INTERNAL | |<br>|     | 0x8e | RootType.NATIVE_MONITOR | |</p><p>对照上面这个表总结起来，所谓JVM GC Roots是进行垃圾回收时根节点的集合。大致包含以下几个方面：</p><ul><li>所有Java线程当前活跃的栈帧所指向GC堆里的对象的引用，换句话说，当前所有正在被调用的方法的引用类型的参数&#x2F;局部变量&#x2F;临时值。</li><li>VM的一些静态数据结构里指向GC堆里的对象的引用，例如说HotSpot VM里的Universe里有很多这样的引用。</li><li>所有当前被加载的Java类</li><li>JNI handles，包括global handles和local handles</li><li>Java类的引用类型静态变量</li><li>Java类的运行时常量池里的引用类型常量（String或Class类型）</li><li>String常量池（StringTable）里的引用</li></ul><p>按照根搜索GC的思想，从根节点出发的找到的对象就被认定为存活的，其他的对象都是“无用的”，但是GC ROOTS的集合不应该是一成不变的，特别是面对分代GC时。为啥这样说呢？分代GC是一种部分收集（partial collection）的做法。在执行部分收集时，从GC堆的非收集部分指向收集部分的引用，也必须作为GC roots的一部分。具体到分两代的分代式GC来说，如果第0代叫做young gen，第1代叫做old gen，那么如果有minor GC &#x2F; young GC只收集young gen里的垃圾，则young gen属于“收集部分”，而old gen属于“非收集部分”，那么从old gen指向young gen的引用就必须作为minor GC &#x2F; young GC的GC ROOTS的一部分。所以针对一次GC来说，GC ROOTS的类型类型范围未必只有jvm规范定义中所列举的那几种情况。</p><h3 id="0x05-Android虚拟机有分代GC吗？"><a href="#0x05-Android虚拟机有分代GC吗？" class="headerlink" title="0x05 Android虚拟机有分代GC吗？"></a>0x05 Android虚拟机有分代GC吗？</h3><p>Android Q开始google才为ART虚拟机添加分代收集机制。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.cnblogs.com/kingszelda/p/7226080.html">JVM内存模型与GC算法</a><br><a href="https://my.oschina.net/u/217380/blog/1507542">Android Hprof 协议</a><br><a href="https://www.zhihu.com/question/53613423/answer/135743258">java的gc为什么要分代？RednaxelaFX的回答</a><br><a href="https://cloud.tencent.com/developer/article/1405124">Android Q Beta 正式发布 | 精于形，安于内</a><br><a href="https://www.cnblogs.com/dingyingsi/p/3760447.html">https://www.cnblogs.com/dingyingsi/p/3760447.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h3&gt;&lt;p&gt;这里说的Android虚拟机指运行在Android平台上的虚拟机，即日常遇到的Dalvik和ART虚拟机。这篇文章记录了自己对Android虚拟机几个问题的理解。只是个人学习和理解过程的记录，如有不当之处万望指正，邮箱&lt;a href=&quot;mailto:&amp;#121;&amp;#97;&amp;#x6e;&amp;#x67;&amp;#102;&amp;#97;&amp;#x6e;&amp;#51;&amp;#54;&amp;#56;&amp;#x37;&amp;#x40;&amp;#49;&amp;#x36;&amp;#51;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&quot;&gt;&amp;#121;&amp;#97;&amp;#x6e;&amp;#x67;&amp;#102;&amp;#97;&amp;#x6e;&amp;#51;&amp;#54;&amp;#56;&amp;#x37;&amp;#x40;&amp;#49;&amp;#x36;&amp;#51;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;。也希望在面对下面这些所谓JVM常见问题时能给你带来不一样的思考。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题1：如何理解JVM内存模型？&lt;/li&gt;
&lt;li&gt;问题2：什么是GC ROOTS？&lt;/li&gt;
&lt;li&gt;问题3：Android虚拟机有没有分代回收？&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习总结" scheme="https://ivonhoe.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Android系统上绘制圆角和阴影的几种姿势</title>
    <link href="https://ivonhoe.github.io/2019/01/29/android-corner-shadow/"/>
    <id>https://ivonhoe.github.io/2019/01/29/android-corner-shadow/</id>
    <published>2019-01-29T03:41:57.000Z</published>
    <updated>2022-04-07T02:37:15.877Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><p>在实际的开发工程中，对视图增加圆角和阴影效果的绘制是比较常见的需求，Android系统提供了一系列的方法以帮助开发者实现基础的视图圆角和阴影效果，但在面对实际的视觉需求时，想要完美达到视觉设计师的设计要求就难免需要了解一些基础的绘图原理和绘图方法才能达到特殊的设计需求，这里就简单对比和总结了常见的圆角和阴影的绘图方法。</p><span id="more"></span><h3 id="0x02-圆角"><a href="#0x02-圆角" class="headerlink" title="0x02 圆角"></a>0x02 圆角</h3><h4 id="2-1-View的圆角背景实现圆角效果"><a href="#2-1-View的圆角背景实现圆角效果" class="headerlink" title="2.1 View的圆角背景实现圆角效果"></a>2.1 View的圆角背景实现圆角效果</h4><p>使用原生提供的ShapeDrawable实现背景。</p><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">shape</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">solid</span> <span class="hljs-attr">android:color</span>=<span class="hljs-string">&quot;#ff0000&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">corners</span> <span class="hljs-attr">android:topLeftRadius</span>=<span class="hljs-string">&quot;10dp&quot;</span></span><br><span class="hljs-tag">             <span class="hljs-attr">android:topRightRadius</span>=<span class="hljs-string">&quot;10dp&quot;</span></span><br><span class="hljs-tag">             <span class="hljs-attr">android:bottomRightRadius</span>=<span class="hljs-string">&quot;10dp&quot;</span></span><br><span class="hljs-tag">             <span class="hljs-attr">android:bottomLeftRadius</span>=<span class="hljs-string">&quot;10dp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">shape</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/res/shadow/android_corner_shadow_0.png" alt="Alt text"></p><h4 id="2-2-使用圆角贴图实现圆角效果"><a href="#2-2-使用圆角贴图实现圆角效果" class="headerlink" title="2.2 使用圆角贴图实现圆角效果"></a>2.2 使用圆角贴图实现圆角效果</h4><p>在介绍“贴图”之前先说明在Android绘图相关的两个必备知识，分布是Paint Style和Path。</p><h5 id="2-2-1-Paint-Style"><a href="#2-2-1-Paint-Style" class="headerlink" title="2.2.1 Paint Style"></a>2.2.1 Paint Style</h5><p>在用画笔（Paint）的时候有三种Style，选择不同的画笔样式时就可达到不同的画笔效果，分别是 </p><ul><li>Paint.Style.STROKE 只绘制图形轮廓(描边) </li><li>Paint.Style.FILL 只绘制图形内容 </li><li>Paint.Style.FILL_AND_STROKE 既绘制轮廓也绘制内容<br><img src="/res/shadow/android_corner_shadow_1.png" alt="Alt text"></li></ul><h5 id="2-2-2-Path"><a href="#2-2-2-Path" class="headerlink" title="2.2.2 Path"></a>2.2.2 Path</h5><p>当我们在想要绘制一些形状时，Canvas提供了一些基础形状的绘制方法，如圆形、矩形、椭圆等。你只需要选择相应的绘制方法并设置你想要的绘制参数就能绘制出你想要的简单图形效果。但对于那些复杂一点的图形则没法去绘制，如一个心形、正多边形、五角星等，使用Path不仅能够绘制简单图形，也可以绘制这些比较复杂的图形。Path封装了由直线和曲线(二次，三次贝塞尔曲线等)构成的几何路径。你能用Canvas中的drawPath来把这条路径画出来(同样支持Paint的不同绘制模式)，也可以用于剪裁画布和根据路径绘制文字。</p><h5 id="2-2-3-如何制作圆角贴图"><a href="#2-2-3-如何制作圆角贴图" class="headerlink" title="2.2.3 如何制作圆角贴图"></a>2.2.3 如何制作圆角贴图</h5><p><strong>以左上角贴图实现为例，使用Path约束绘图范围</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">RectF fakeCornerRectF = sRectF;<br>fakeCornerRectF.set(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, mCornerRoundRadius<span class="hljs-operator"> * </span><span class="hljs-number">2</span>, mCornerRoundRadius<span class="hljs-operator"> * </span><span class="hljs-number">2</span>);<br><span class="hljs-comment">// 绘制左上圆角背景</span><br><span class="hljs-keyword">if</span> (mTopLeftCorner) &#123;<br>    fakeCornerRectF.offset<span class="hljs-constructor">To(<span class="hljs-params">left</span> - <span class="hljs-params">mCornerOffset</span>, <span class="hljs-params">top</span> - <span class="hljs-params">mCornerOffset</span>)</span>;<br>    mCompatibilityModePath.rewind<span class="hljs-literal">()</span>;<br>    mCompatibilityModePath.move<span class="hljs-constructor">To(<span class="hljs-params">left</span> - <span class="hljs-params">mCornerOffset</span>, <span class="hljs-params">top</span> - <span class="hljs-params">mCornerOffset</span>)</span>;<br>    mCompatibilityModePath.line<span class="hljs-constructor">To(<span class="hljs-params">left</span> + <span class="hljs-params">mCornerRoundRadius</span>, <span class="hljs-params">top</span> - <span class="hljs-params">mCornerOffset</span>)</span>;<br>    mCompatibilityModePath.arc<span class="hljs-constructor">To(<span class="hljs-params">fakeCornerRectF</span>, START_TOP, -QUARTER_CIRCLE)</span>;<br>    mCompatibilityModePath.close<span class="hljs-literal">()</span>;<br>    canvas.draw<span class="hljs-constructor">Path(<span class="hljs-params">mCompatibilityModePath</span>, <span class="hljs-params">mBackgroundPaint</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/res/shadow/android_corner_shadow_2.png" alt="Alt text"></p><p><strong>使用Paint.Style.FILL画笔绘制，将贴图效果绘制在ImageView容器的（0，0）坐标上。即可达到想要的圆角效果</strong></p><h4 id="2-3-对Bitmap的裁剪实现圆角效果"><a href="#2-3-对Bitmap的裁剪实现圆角效果" class="headerlink" title="2.3 对Bitmap的裁剪实现圆角效果"></a>2.3 对Bitmap的裁剪实现圆角效果</h4><p>例如使用android support包里的RoundedBitmapDrawable，创建一个被裁剪圆角的BitmapDrawable。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RoundedBitmapDrawable</span> <span class="hljs-variable">drawable</span> <span class="hljs-operator">=</span> RoundedBitmapDrawableFactory.create(mContext.getResources(), bitmap);<br>drawable.setCornerRadius(<span class="hljs-number">40</span>);<br></code></pre></td></tr></table></figure><h4 id="2-4-对Canvas画板做裁剪实现圆角效果"><a href="#2-4-对Canvas画板做裁剪实现圆角效果" class="headerlink" title="2.4 对Canvas画板做裁剪实现圆角效果"></a>2.4 对Canvas画板做裁剪实现圆角效果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDraw</span><span class="hljs-params">(Canvas canvas)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> getPaddingLeft();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">top</span> <span class="hljs-operator">=</span> getPaddingTop();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> canvas.getWidth() - getPaddingRight();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">bottom</span> <span class="hljs-operator">=</span> getHeight() - getPaddingBottom();<br><br>    mCanvasRect.set(left, top, right, bottom);<br>    mCanvasPath.reset();<br>    mCanvasPath.addRoundRect(mCanvasRect, mRx, mRy, Path.Direction.CW);<br>    canvas.clipPath(mCanvasPath);<br>    <span class="hljs-built_in">super</span>.onDraw(canvas);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0x03-阴影"><a href="#0x03-阴影" class="headerlink" title="0x03 阴影"></a>0x03 阴影</h3><h4 id="3-1-elevation属性和translationZ属性"><a href="#3-1-elevation属性和translationZ属性" class="headerlink" title="3.1 elevation属性和translationZ属性"></a>3.1 elevation属性和translationZ属性</h4><p>UI 控件的elevation属性可以设置其高度，呈现在界面中的直观效果就是阴影效果，在 xml 布局文件中，通过 android:elevation 属性设置，在 java 代码中通过 View 类提供的setElevation()方法设置。但是这个属性存在版本兼容问题，是 Android 5.0 引进的 API。所以，当 minSdkVersion 值小于21时，系统会在 xml 的对应使用地方给出一个 lint 提示：</p><p><code>Attribute elevation is only used in API level 21 and higher</code></p><p>当然你也可以选择忽略这个提示，或者使用tools:targetApi属性消除这个提示，这样做的话，在低于5.0版本的系统中将不会出现阴影效果。然而，有一个更好的办法做到兼容，那就是借助ViewCompat这个万能的兼容类,使View 的 elevation 属性兼容至低版本中：</p><p><code>ViewCompat.setElevation(View view, float elevation)</code></p><p>注意：尤其要注意，视图的阴影一定是由有轮廓的视图投射出来的。简单来说，就是需要设置控件的背景，即 android:background 属性。我们可以选择图片作为背景，也可以使用 <shape> 标签定义一个 drawable 形状。</p><h4 id="3-2-使用-9图实现阴影效果"><a href="#3-2-使用-9图实现阴影效果" class="headerlink" title="3.2 使用.9图实现阴影效果"></a>3.2 使用.9图实现阴影效果</h4><p>说到阴影效果最简单最省力的方法莫过于设置一个.9的背景图啦！这里推荐一个站点，可以在线制作.9阴影图。<a href="http://inloop.github.io/shadow4android/">http://inloop.github.io/shadow4android/</a></p><h4 id="3-3-使用模糊画笔绘制阴影效果"><a href="#3-3-使用模糊画笔绘制阴影效果" class="headerlink" title="3.3 使用模糊画笔绘制阴影效果"></a>3.3 使用模糊画笔绘制阴影效果</h4><p><img src="/res/shadow/android_corner_shadow_3.png" alt="Alt text"></p><p>先看想要做到的阴影效果，想要在红色的轮播banner下方显示一条红色的阴影效果。用已知的阴影方案比如设置视图的Z轴高度或者设置.9阴影背景都无法实现这种效果。</p><p>可以将实现上图的局部阴影效果的绘制步骤分解成两层：</p><ol><li>自定义一个ShadowLayout容器，在onDraw方法中重写绘制步骤</li><li>如何绘制阴影效果？使用带有BlurMaskFilter效果的画笔在合适的地方绘制一个椭圆阴影。可以理解成先用一个模糊画笔先画眉，再在合适的位置上绘制想要的图片。画眉效果如下图：</li></ol><p><img src="/res/shadow/android_corner_shadow_4.png" alt="Alt text"></p><p>这里有个前提，需要关闭当前View的硬件加速功能。<code>setLayerType(LAYER_TYPE_SOFTWARE, null)</code>。具体的实现代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDraw</span><span class="hljs-params">(Canvas canvas)</span> &#123;<br>    drawShadow(canvas);<br><br>    <span class="hljs-built_in">super</span>.onDraw(canvas);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawShadow</span><span class="hljs-params">(Canvas canvas)</span> &#123;<br>    <span class="hljs-keyword">if</span> (shadowView != <span class="hljs-literal">null</span> &amp;&amp; shadowOn) &#123;<br>        canvas.drawOval(getDrawOvalRect(), getShadowPaint());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getShadowColor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (!runPalette) &#123;<br>        <span class="hljs-keyword">return</span> shadowColor;<br>    &#125;<br>    runPalette = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (shadowView <span class="hljs-keyword">instanceof</span> ImageView) &#123;<br>        <span class="hljs-keyword">if</span> (((ImageView) shadowView).getDrawable() <span class="hljs-keyword">instanceof</span> ColorDrawable) &#123;<br>            shadowColor = getDarkerColor(((ColorDrawable) ((ImageView) shadowView).getDrawable()).getColor());<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (((ImageView) shadowView).getDrawable() <span class="hljs-keyword">instanceof</span> BitmapDrawable) &#123;<br>            <span class="hljs-type">Bitmap</span> <span class="hljs-variable">bitmap</span> <span class="hljs-operator">=</span> ((BitmapDrawable) ((ImageView) shadowView).getDrawable()).getBitmap();<br>            Palette.<span class="hljs-type">Swatch</span> <span class="hljs-variable">mSwatch</span> <span class="hljs-operator">=</span> Palette.from(bitmap).generate().getDominantSwatch();<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != mSwatch) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">rgb</span> <span class="hljs-operator">=</span> mSwatch.getRgb();<br>                shadowColor = <span class="hljs-number">0x4C000000</span> | (Color.red(rgb) &lt;&lt; <span class="hljs-number">16</span>) | (Color.green(rgb) &lt;&lt; <span class="hljs-number">8</span>) | Color.blue(rgb);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            shadowColor = Color.TRANSPARENT;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> shadowColor;<br>&#125;<br><br><span class="hljs-keyword">private</span> Paint <span class="hljs-title function_">getShadowPaint</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (shadowView != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rgb</span> <span class="hljs-operator">=</span> getShadowColor();<br>        shadowPaint.setColor(rgb);<br>        shadowPaint.setMaskFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BlurMaskFilter</span>(paddingBottom, BlurMaskFilter.Blur.NORMAL));<br><span class="hljs-comment">//            shadowPaint.setShadowLayer(radius, 0, shadowDimen, rgb);</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> shadowPaint;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0x04-参考文档"><a href="#0x04-参考文档" class="headerlink" title="0x04 参考文档"></a>0x04 参考文档</h3><p><a href="https://yifeng.studio/2017/02/26/android-elevation-and-shadow/">https://yifeng.studio/2017/02/26/android-elevation-and-shadow/</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h3&gt;&lt;p&gt;在实际的开发工程中，对视图增加圆角和阴影效果的绘制是比较常见的需求，Android系统提供了一系列的方法以帮助开发者实现基础的视图圆角和阴影效果，但在面对实际的视觉需求时，想要完美达到视觉设计师的设计要求就难免需要了解一些基础的绘图原理和绘图方法才能达到特殊的设计需求，这里就简单对比和总结了常见的圆角和阴影的绘图方法。&lt;/p&gt;</summary>
    
    
    
    <category term="绘制与动画" scheme="https://ivonhoe.github.io/categories/%E7%BB%98%E5%88%B6%E4%B8%8E%E5%8A%A8%E7%94%BB/"/>
    
    
    <category term="绘制与动画" scheme="https://ivonhoe.github.io/tags/%E7%BB%98%E5%88%B6%E4%B8%8E%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>ANR分析记录(一)</title>
    <link href="https://ivonhoe.github.io/2018/10/14/android-anr-1/"/>
    <id>https://ivonhoe.github.io/2018/10/14/android-anr-1/</id>
    <published>2018-10-14T13:09:15.000Z</published>
    <updated>2022-03-27T14:00:24.516Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><p>Application Not Responding（简称:ANR）指应用中一些特定的事件（如用户触摸事件、广播等）在应用的主线程没有在规定的时间内处理完，系统自动做出终止应用运行的响应。问题出现的原因主要是两个方面：</p><blockquote><ol><li>应用进程自身引起的，例如：主线程阻塞、挂起、死循环</li><li>应用进程的其他线程的CPU占用率高，使得主线程无法抢占到CPU时间片</li></ol></blockquote><p>常见的三种ANR类型：</p><ol><li>KeyDispatchTimeout(谷歌默认5s，MTK平台上是8s): 主要类型按键或触摸事件在特定时间内无响应</li><li>BroadcastTimeout(10s): 主要是BroadcastRecevier在规定时间无法处理完成。前台广播超时时间是10s,后台广播超时是60s,这类超时没有提示框弹出。代码见AMS的<code>BROADCAST_FG_TIMEOUT</code>和<code>BROADCAST_BG_TIMEOUT</code>。</li><li>ServiceTimeout(20s): Service在规定时间内无法处理完成操作，即会报出服务超时，这类ANR同样没有提示框出现。超时时间，前台Service是20s，后台Service是200s。代码见ActivityServices的<code>SERVICE_TIMEOUT</code>和<code>SERVICE_BACKGROUND_TIMEOUT</code>。</li></ol><span id="more"></span><h3 id="0x02-KeyDispatchingTimedOut"><a href="#0x02-KeyDispatchingTimedOut" class="headerlink" title="0x02 KeyDispatchingTimedOut"></a>0x02 KeyDispatchingTimedOut</h3><h4 id="2-1-错误实例"><a href="#2-1-错误实例" class="headerlink" title="2.1 错误实例"></a>2.1 错误实例</h4><p>先看下面的错误实例：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>    setContentView(R.layout.activity_main);<br><br>    <span class="hljs-comment">// 异步操作数组</span><br>    saveListToDb();<br><br>    traverseList();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">traverseList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Handler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>();<br>    handler.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>()&#123;<br>        <span class="hljs-keyword">synchronized</span> (mList) &#123;<br>        <span class="hljs-comment">// todo something</span><br>        &#125;<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveListToDb</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">synchronized</span> (mList) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// todo save list</span><br>                    Thread.sleep(<span class="hljs-number">50000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;).start();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-adb日志和traces分析"><a href="#2-2-adb日志和traces分析" class="headerlink" title="2.2 adb日志和traces分析"></a>2.2 adb日志和traces分析</h4><p>在子线程保存数据到文件或数据库(这里用sleep操作模拟耗时io操作)，如果同时可能涉及到在主线程操作同一个锁对象的情况在，这时你是否会习惯的使用synchronized关键词保证list的同步呢？当在主线程和异步线程产生了对相同对象的竞争关系，那这时就很容易出现主线程的阻塞，而阻塞的时间长短就取决于主线程啥时候获取到竞争对象。而此时反馈在系统层面当用户操作不会得到响应，最终应用以ANR的形式退出。运行上面的错误代码你会获取类似下面的ANR日志信息<br><code>Input dispatching timed out (Waiting because no window has focus but there is a focused application that may eventually add a window when it finishes starting up.)</code><br>查看虚拟机trace文件输出目录<code>adb shell getprop dalvik.vm.stack-trace-file</code>，再查看手机目录下<code>/data/anr/traces.txt</code>的文件内容，会发现main线程在等待释放锁&lt;0x0af98db2&gt;,而这个锁正在被thread 10所持有</p><p><img src="/res/anr-1/anr-1.png" alt="Alt text"></p><p>再查看tid&#x3D;10的线程的线程状态，该线程正在sleeping，这也印证了上面实例的代码，主线程在等待一个sleep线程释放锁而导致了ANR。当然在实际项目中的日志和原因未必会这么明显，但形如实例的错误代码确实是很常见的场景。</p><p><img src="/res/anr-1/anr-2.png" alt="Alt text"></p><h4 id="2-3-traces-txt关键信息注"><a href="#2-3-traces-txt关键信息注" class="headerlink" title="2.3 traces.txt关键信息注"></a>2.3 traces.txt关键信息注</h4><ol><li>pid为进程id，sysTid&#x3D;pid，这里主线程的线程号&#x3D;进程号，prio&#x3D;5为线程优先级</li><li>当一个线程占有一个锁的时候，会打印-locked&lt;0xxxxxxx&gt;</li><li>当该线程正在等待别的线程释放该锁，会打印waiting to lock &lt;0xxxxxx&gt;</li><li>如果代码中有wait()调用的话，首先是locked，然后会打印waiting on &lt;0xxxxxx&gt;</li></ol><h4 id="2-4-ANR-Input-event-dispatching-timed-out-Reason"><a href="#2-4-ANR-Input-event-dispatching-timed-out-Reason" class="headerlink" title="2.4  ANR Input event dispatching timed out Reason"></a>2.4  ANR Input event dispatching timed out Reason</h4><p>参考<a href="http://gityuan.com/2017/01/01/input-anr/%E7%9A%84input-anr%E5%BC%82%E5%B8%B8%E5%8E%9F%E5%9B%A0%E7%9A%84%E6%80%BB%E7%BB%93%EF%BC%8Cinput">http://gityuan.com/2017/01/01/input-anr/的input-anr异常原因的总结，input</a> anr主要分为以下几类。</p><ol><li>无窗口, 有应用：Waiting because no window has focus but there is a focused application that may eventually add a window when it finishes starting up.</li><li>窗口暂停: Waiting because the [targetType] window is paused.</li><li>窗口未连接: Waiting because the [targetType] window’s input channel is not registered with the input dispatcher. The window may be in the process of being removed.</li><li>窗口连接已死亡：Waiting because the [targetType] window’s input connection is [Connection.Status]. The window may be in the process of being removed.</li><li>窗口连接已满：Waiting because the [targetType] window’s input channel is full. Outbound queue length: [outboundQueue长度]. Wait queue length: [waitQueue长度].</li><li>按键事件，输出队列或事件等待队列不为空：Waiting to send key event because the [targetType] window has not finished processing all of the input events that were previously delivered to it. Outbound queue length: [outboundQueue长度]. Wait queue length: [waitQueue长度].</li><li>非按键事件，事件等待队列不为空且头事件分发超时500ms：Waiting to send non-key event because the [targetType] window has not finished processing certain input events that were delivered to it over 500ms ago. Wait queue length: [waitQueue长度]. Wait queue head age: [等待时长].</li></ol><ul><li>targetType: 取值为”focused”或者”touched”</li><li>Connection.Status: 取值为”NORMAL”，”BROKEN”，”ZOMBIE”</li></ul><p>所以如2.1中实例代码，当ANR发生在Activity的onCreate流程中时，你讲看到<code>无窗口, 有应用</code>的日志信息，当ANR发生在对某个View的OnClickListener中时，你将从日志中获取<code>事件等待队列不为空且头事件分发超时500ms</code>的信息，这样通过不同的日志信息就可大致定位ANR出现的用户场景，进而方便定位出问题代码。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="http://yuanfentiank789.github.io/2017/09/05/ANR%E5%88%86%E6%9E%90/">http://yuanfentiank789.github.io/2017/09/05/ANR%E5%88%86%E6%9E%90/</a><br><a href="http://gityuan.com/2017/01/01/input-anr/">http://gityuan.com/2017/01/01/input-anr/</a><br><a href="https://maoao530.github.io/2017/02/21/anr-analyse/">https://maoao530.github.io/2017/02/21/anr-analyse/</a><br><a href="http://rayleeya.iteye.com/blog/1955657">http://rayleeya.iteye.com/blog/1955657</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h3&gt;&lt;p&gt;Application Not Responding（简称:ANR）指应用中一些特定的事件（如用户触摸事件、广播等）在应用的主线程没有在规定的时间内处理完，系统自动做出终止应用运行的响应。问题出现的原因主要是两个方面：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;应用进程自身引起的，例如：主线程阻塞、挂起、死循环&lt;/li&gt;
&lt;li&gt;应用进程的其他线程的CPU占用率高，使得主线程无法抢占到CPU时间片&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;常见的三种ANR类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;KeyDispatchTimeout(谷歌默认5s，MTK平台上是8s): 主要类型按键或触摸事件在特定时间内无响应&lt;/li&gt;
&lt;li&gt;BroadcastTimeout(10s): 主要是BroadcastRecevier在规定时间无法处理完成。前台广播超时时间是10s,后台广播超时是60s,这类超时没有提示框弹出。代码见AMS的&lt;code&gt;BROADCAST_FG_TIMEOUT&lt;/code&gt;和&lt;code&gt;BROADCAST_BG_TIMEOUT&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;ServiceTimeout(20s): Service在规定时间内无法处理完成操作，即会报出服务超时，这类ANR同样没有提示框出现。超时时间，前台Service是20s，后台Service是200s。代码见ActivityServices的&lt;code&gt;SERVICE_TIMEOUT&lt;/code&gt;和&lt;code&gt;SERVICE_BACKGROUND_TIMEOUT&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="性能优化" scheme="https://ivonhoe.github.io/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="anr" scheme="https://ivonhoe.github.io/tags/anr/"/>
    
  </entry>
  
  <entry>
    <title>移动端无痕埋点实践详解(二)</title>
    <link href="https://ivonhoe.github.io/2018/09/11/how-to-track-users-2/"/>
    <id>https://ivonhoe.github.io/2018/09/11/how-to-track-users-2/</id>
    <published>2018-09-11T13:07:24.000Z</published>
    <updated>2022-03-27T14:02:28.658Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><p>在<a href="https://ivonhoe.github.io/2018/07/03/how-to-track-users/">移动端无痕埋点实践详解（一）</a>这篇文章大致总结了移动端无痕埋点的基本原理。主要介绍了什么是无痕埋点，无痕埋点的基础数据流程以及在Android系统上总体思路。这篇文章着重总结下无痕埋点方案的实施过程中在Android和iOS系统上几个细节的解决方案。</p><span id="more"></span><h3 id="0x02-xpath"><a href="#0x02-xpath" class="headerlink" title="0x02 xpath"></a>0x02 xpath</h3><h4 id="2-1-什么是xpath"><a href="#2-1-什么是xpath" class="headerlink" title="2.1 什么是xpath"></a>2.1 什么是xpath</h4><p>xpath是移动端定义可操作区域的数字标识，是用来标识可操作的控件的。既然想要通过一串字符标识在移动端app中的可操作控件，那么xpath的生成规则需要满足以下几个原则：</p><ul><li>唯一性: 在当前app中不存在不同控件对应相同Xpath</li><li>稳定性: 不同版本app中，在没有页面结构变更的情况下，不同版本中相同页面中相同控件的Xpath要保持不变</li></ul><h4 id="2-1-Android中如何生成xpath"><a href="#2-1-Android中如何生成xpath" class="headerlink" title="2.1 Android中如何生成xpath"></a>2.1 Android中如何生成xpath</h4><p>在满足上述xpath原则的基础上，可通过以下几个参数作为组成XPath的生成参数：</p><ul><li><strong>页面</strong>：标记当前控件所在的页面url，Webview页面为其html的url，native页面url可定义该页面的virtual url</li><li><strong>页面中位置</strong>：如何描述一个控件在该页面的位置，在Android系统中很容易想到DecorView和页面子view的关系。使用View到DecorView的位置关系来描述视图控件在该页面中的相对位置。</li></ul><p><img src="/res/trace_user2/trace1.png" alt="Alt text"></p><ul><li><strong>控件标记</strong>：这里的控件标记指的是相对于相同父容器的兄弟视图来说，如何更好的区别彼此。这里很容易能够想到view id。但是这里并不推荐使用view id作为标记。因为id是在版本迭代过程中很容易因为资源数量的变化而发生变化。并不能满足标记稳定性的原则，目前在Android上我选择resource name作为视图控件的标记。在ios上</li></ul><p>综上所述就可以得到以下的XPath生成方式。</p><p>$ xpath &#x3D; Md5(url+root path + resource name)$</p><h4 id="2-2-iOS系统中如何生成xpath"><a href="#2-2-iOS系统中如何生成xpath" class="headerlink" title="2.2 iOS系统中如何生成xpath"></a>2.2 iOS系统中如何生成xpath</h4><p>参考 <a href="https://www.jianshu.com/p/69ce01e15042">https://www.jianshu.com/p/69ce01e15042</a></p><h4 id="2-3-如何识别xpath"><a href="#2-3-如何识别xpath" class="headerlink" title="2.3 如何识别xpath"></a>2.3 如何识别xpath</h4><p>在用户产生用户点击数据的过程中，埋点系统上报控件xpath给埋点后台，但是在实际的数据分析过程中需要知道每个xpath对应的控件和区块名称具体是什么。在每个电商系统中针对埋点都会有一套自己的位置模型规范，简称SPM（super position model）。所以针对最终的数据分析和统计需要一个xpath到spm的映射关系，将实际产生的xpath埋点数据转换成业务中的SPM。实现方式也很简单，只需要在开发版本中提供一个编辑模式，将移动端本地生成的xpath通过一个编辑工具转换成SPM数据就可以了，简单的效果图如下所示：</p><p><img src="/res/trace_user2/trace2.jpeg" alt="Alt text"></p><h3 id="0x03-Android如何记录页面跳转"><a href="#0x03-Android如何记录页面跳转" class="headerlink" title="0x03 Android如何记录页面跳转"></a>0x03 Android如何记录页面跳转</h3><p>在考虑记录页面跳转的方案时，可能最先想到的是在通过统一路由跳转的方式跟踪所有页面跳转，但是实际的项目中首先你得有个统一的路由不是？在面对已有的项目代码从工作量和效果上来说这种方式都不是最佳方案。即便是已有统一的路由方案也很难保证没有错埋漏埋的情况存在。别忘记 <strong>ActivityLifecycleCallbacks</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> RuntimeActivityCallbacks implements Application.ActivityLifecycleCallbacks &#123;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String, Long&gt; mPageResumeTime = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 页面对应的referrerId，一个activity可能有多个子页面，一个activity的referrerId为当前显示的子页面的referrerId</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Map&lt;Integer, String&gt; mPageReferrerMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;<span class="hljs-literal">()</span>;<br><br>    @Override<br>    public void on<span class="hljs-constructor">ActivityResumed(Activity <span class="hljs-params">activity</span>)</span> &#123;<br>        <span class="hljs-comment">// 针对页面的跟踪</span><br>        <span class="hljs-keyword">if</span> (activity instanceof IPageTracker) &#123;<br>            IPageTracker pageTracker = (IPageTracker) activity;<br>            String url = pageTracker.get<span class="hljs-constructor">ReferrerId()</span>;<br><br>            mPageResumeTime.put(url, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>current<span class="hljs-constructor">TimeMillis()</span>);<br>            mPageReferrerMap.put(activity.hash<span class="hljs-constructor">Code()</span>, url);<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AppTraceTool</span>.</span></span>trace<span class="hljs-constructor">OpenPage(<span class="hljs-params">url</span>, ModuleManager.<span class="hljs-params">getTopPageUrl</span>()</span>);<br>            <br>            <span class="hljs-comment">// 保存当前页面为top</span><br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ModuleManager</span>.</span></span>set<span class="hljs-constructor">TopPageUrl(<span class="hljs-params">url</span>)</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ModuleManager</span>.</span></span>set<span class="hljs-constructor">TopPageUrl(<span class="hljs-string">&quot;unknown&quot;</span>)</span>;<br>        &#125;<br>    &#125;<br><br>    @Override<br>    public void on<span class="hljs-constructor">ActivityStopped(Activity <span class="hljs-params">activity</span>)</span> <br>        <span class="hljs-comment">// 针对页面的跟踪</span><br>        <span class="hljs-keyword">if</span> (activity instanceof IPageTracker) &#123;<br>            IPageTracker pageTracker = (IPageTracker) activity;<br>            String url = pageTracker.get<span class="hljs-constructor">ReferrerId()</span>;<br>            mPageResumeTime.remove(url);<br>            mPageReferrerMap.remove(activity.hash<span class="hljs-constructor">Code()</span>);<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AppTraceTool</span>.</span></span>trace<span class="hljs-constructor">LeavePage(<span class="hljs-params">url</span>, <span class="hljs-params">second</span>)</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="0x04-如何使用无痕埋点方案记录业务数据"><a href="#0x04-如何使用无痕埋点方案记录业务数据" class="headerlink" title="0x04 如何使用无痕埋点方案记录业务数据"></a>0x04 如何使用无痕埋点方案记录业务数据</h3><h3 id="转载请标明出处病已blog-https-ivonhoe-github-io"><a href="#转载请标明出处病已blog-https-ivonhoe-github-io" class="headerlink" title="转载请标明出处病已blog https://ivonhoe.github.io/"></a>转载请标明出处<a href="https://ivonhoe.github.io/">病已blog https://ivonhoe.github.io/</a></h3>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h3&gt;&lt;p&gt;在&lt;a href=&quot;https://ivonhoe.github.io/2018/07/03/how-to-track-users/&quot;&gt;移动端无痕埋点实践详解（一）&lt;/a&gt;这篇文章大致总结了移动端无痕埋点的基本原理。主要介绍了什么是无痕埋点，无痕埋点的基础数据流程以及在Android系统上总体思路。这篇文章着重总结下无痕埋点方案的实施过程中在Android和iOS系统上几个细节的解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="方案与设计" scheme="https://ivonhoe.github.io/categories/%E6%96%B9%E6%A1%88%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="无痕埋点" scheme="https://ivonhoe.github.io/tags/%E6%97%A0%E7%97%95%E5%9F%8B%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Android插件化之从入门到放弃</title>
    <link href="https://ivonhoe.github.io/2018/07/18/abandon-the-plugin-framework/"/>
    <id>https://ivonhoe.github.io/2018/07/18/abandon-the-plugin-framework/</id>
    <published>2018-07-18T12:45:30.000Z</published>
    <updated>2022-04-07T02:20:49.404Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><p>Android插件化框架一直以来就是安卓平台上的一个重要技术方向，从携程的DynamicAPK到360RePlugin再到阿里巴巴的Atlas，甚至美团和滴滴的安卓团队都有自己的一套安卓插件化解决方案。面对业界如此热门的技术方向，在对比业界开源的插件化方案后，团队内部于去年10月份开始(2017.10)在项目中选择开源的Small插件化框架进行了尝试。鞋是否合适需要穿上脚才能知道。这篇文章总结了我在使用Small插件化框架后，自己对插件化的理解和思考。</p><h3 id="关于Small插件化的其他文档"><a href="#关于Small插件化的其他文档" class="headerlink" title="关于Small插件化的其他文档"></a>关于Small插件化的其他文档</h3><p><a href="https://ivonhoe.github.io/2018/01/18/Small%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/"><strong>《Android插件化之Small框架实践总结》</strong></a><br><a href="https://ivonhoe.github.io/2018/01/18/Small%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/"><strong>《Android插件化之Small框架原理》</strong></a><br><a href="https://ivonhoe.github.io/2018/03/14/small-bug-555-fix/"><strong>《Android插件化之资源加载机制》</strong></a></p><span id="more"></span><h3 id="0x02-重新审视插件化框架的利弊"><a href="#0x02-重新审视插件化框架的利弊" class="headerlink" title="0x02 重新审视插件化框架的利弊"></a>0x02 重新审视插件化框架的利弊</h3><h4 id="2-1-插件化方案想要解决的核心问题"><a href="#2-1-插件化方案想要解决的核心问题" class="headerlink" title="2.1 插件化方案想要解决的核心问题"></a>2.1 插件化方案想要解决的核心问题</h4><blockquote><p>安卓的动态化发布</p></blockquote><p>动态化就像是天赋，有些人天生就有的能力却是需要你花非常大精力也未必能获取到的。前端的开发应该从来不需要动态化的方案吧！插件化方案的一个最大作用应该就是绕开应用市场的审核周期，尽可能的像后端Java或者前端JS一样，随时发布随时生效。</p><blockquote><p>真正意义上的模块解耦</p></blockquote><p>插件化的方式让模块与模块之间在开发方式上真正的隔离，达到了解耦的目标。而这在<strong>之前</strong>android原生的开发方式上是很难达到的。</p><blockquote><p>dex 65535问题</p></blockquote><p>插件化的方案也可以看做一个dex分包和资源分包的方案。</p><h4 id="2-2-Small插件化方案带来的新问题"><a href="#2-2-Small插件化方案带来的新问题" class="headerlink" title="2.2 Small插件化方案带来的新问题"></a>2.2 Small插件化方案带来的新问题</h4><p>在<a href="https://ivonhoe.github.io/2018/01/18/Small%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/">《Android插件化之Small框架实践总结》</a> 中对比了Small插件化框架的优缺点，选择Small最重要的原因还是轻量化，当然很多问题也是轻量化带来的。</p><blockquote><p>兼容性问题</p></blockquote><p>兼容性问题大致分布在以下几个方面：</p><ol><li>与google最新系统和编译工具的兼容。18年第三季度最新版本Android P系统的新手机会陆续上市，插件化架构对新系统的兼容性问题会变的急切。并且插件化框架针对安卓系统的黑科技也越来越不被新版本系统接受。Android Studio 3.1最新新编译工具的兼容问题。</li><li>业界移动安全方案的兼容。常见的三方dex加壳方案无法在插件化框架上顺利运用。</li><li>第三方框架的兼容，常见涉及AOP的第三方框架，如AAC和Small框架不兼容。甚至React Native方案都需要花很多时间和精力去适配。</li></ol><blockquote><p>插件化框架带来的稳定性问题</p></blockquote><ol><li>资源查找失败的bug，虽然已经接近了在个别国产手机上的资源查找失败问题，详情见<a href="https://ivonhoe.github.io/2018/03/14/small-bug-555-fix/">《Android插件化之资源加载》</a>。但是在Android 7.1以上的系统上依然出现偶现的资源查找失败问题。并且崩溃率（错误数&#x2F;启动次数）在0.3%左右。这个比例其实不算低了。这个bug暂时只能通过将插件资源转移到宿主分身中绕过。但是如果把所有插件资源都放到宿主中以规避这个问题，那插件化就没有任何意义了。</li></ol><h4 id="2-3-重新思考插件化框架给安卓app的收益"><a href="#2-3-重新思考插件化框架给安卓app的收益" class="headerlink" title="2.3 重新思考插件化框架给安卓app的收益"></a>2.3 重新思考插件化框架给安卓app的收益</h4><p>在团队技术选型上优先考虑的应该是和现有业务适配吧。如果你所面对的业务不存在快速迭代频繁发布的需求，插件化框架的威力可能就要减小一半了。同时在选择个人开发者维护的开源项目时，依然是要考虑到其架构的稳定性和bug的修复时效。因为一旦在一个商业化的项目中使用开源框架，稳定性和兼容性一定会放在首要位置的。在这一点上，可能从大公司孵化出的开源项目会更有优势。</p><p>在回看插件化框架对android应用中模块解耦的贡献，对比android应用的原生的开发方式。能够从插件化框架吸收的模块解耦方法上可以看到大致这几个方面。</p><blockquote><p>模块间的解耦要依赖工具而不是约定开发规范</p></blockquote><p>以2个业务app模块为例，应该有一个工具存在避免这两个模块产生耦合关系，如果一旦存在耦合关系就可能编译报错。而不是靠开发者约定的开发规范。因为规范是可以不遵守的。这是同层级间的耦合管理。</p><blockquote><p>避免依赖传递 </p></blockquote><p>这是不同层级的模块间耦合问题。implementation关键词就可以解决这个问题。</p><blockquote><p>路由</p></blockquote><p>相比较插件化框架你可能更需要一个页面路由工具，业界有很多业界路由框架，比如阿里的ARouter，路由用来解决模块解耦带来的页面跳转问题，所以自己动手实现一个简单的路由工具也不是很难。</p><h4 id="2-3-implementation、api和compile的差异"><a href="#2-3-implementation、api和compile的差异" class="headerlink" title="2.3 implementation、api和compile的差异"></a>2.3 implementation、api和compile的差异</h4><p>可以查看google文档上对Android Studio 3.0后新引入的依赖配置的差异说明。<br><a href="https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration">https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration</a></p><p><img src="/res/no-small/google-implementation.png"></p><p>简单来说google将compile配置拆成了两个关键词，分别是api和implementation。api和implementation的差异不单单是编译效率的差异，我觉得更重要的是，implementation避免了依赖的传递。以下图对比api和implementation的差异可以发现，当使用implementation配置依赖时，app模块将不会直接依赖<code>D</code>模块。在使用老的依赖配置<code>compile</code>时，实际上并没有做到模块的分层，最底下的模块依然可以被最上层的模块依赖，实际的依赖规则在开发者的规范里，而不存在项目模块的管理中。</p><p><img src="/res/no-small/implementation-api.png"></p><h3 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h3><p>以上就是我对插件化框架的看法，如果你的业务存在开始迭代频繁发布的情况存在，那么你可能就很需要一个插件化框架来带来开发方式上的改变，核心在于提高了研发效率。但是在使用插件化项目之前你需要对插件化框架的边界和扩展边界的成本有一个清晰的认识。实际上上面所说的所有插件化框架带来的问题都是可以解决的。问题的关键在于在你的团队这样的付出和产出是否值得呢？相信每个人都可能会有不同的看法。</p><p><strong>当然开源的插件化框架依然是重点学习的方向，理解不同插件化方案的实现原理是深入理解安卓系统很好的切入点。接下来我还会花更多的时间深入的学习360和阿里巴巴的插件化方案。</strong></p><p>最近在读《邓小平改变中国》这本书，让我对从文革结束到改革开放前那段对大多数中国人讳莫如深的历史有了大致的了解。<strong>“实践是检验真理的唯一标准”</strong>，这句很多80后90后耳熟能详的口号背后，原来发生了这么多的波折，冲破了如此多的障碍。<strong>理论与实践的统一是马克思主义的一个最基本的原则</strong>。<strong>实事求是是毛泽东思想的精髓</strong>。听起来虚头巴脑，但确实应该是解决问题和对待未知事物的核心方法论。对！这是一篇技术总结。</p><h3 id="0x05-转载请标明出处病已blog-https-ivonhoe-github-io"><a href="#0x05-转载请标明出处病已blog-https-ivonhoe-github-io" class="headerlink" title="0x05 转载请标明出处病已blog https://ivonhoe.github.io/"></a>0x05 转载请标明出处<a href="https://ivonhoe.github.io/">病已blog https://ivonhoe.github.io/</a></h3>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h3&gt;&lt;p&gt;Android插件化框架一直以来就是安卓平台上的一个重要技术方向，从携程的DynamicAPK到360RePlugin再到阿里巴巴的Atlas，甚至美团和滴滴的安卓团队都有自己的一套安卓插件化解决方案。面对业界如此热门的技术方向，在对比业界开源的插件化方案后，团队内部于去年10月份开始(2017.10)在项目中选择开源的Small插件化框架进行了尝试。鞋是否合适需要穿上脚才能知道。这篇文章总结了我在使用Small插件化框架后，自己对插件化的理解和思考。&lt;/p&gt;
&lt;h3 id=&quot;关于Small插件化的其他文档&quot;&gt;&lt;a href=&quot;#关于Small插件化的其他文档&quot; class=&quot;headerlink&quot; title=&quot;关于Small插件化的其他文档&quot;&gt;&lt;/a&gt;关于Small插件化的其他文档&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://ivonhoe.github.io/2018/01/18/Small%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/&quot;&gt;&lt;strong&gt;《Android插件化之Small框架实践总结》&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://ivonhoe.github.io/2018/01/18/Small%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/&quot;&gt;&lt;strong&gt;《Android插件化之Small框架原理》&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://ivonhoe.github.io/2018/03/14/small-bug-555-fix/&quot;&gt;&lt;strong&gt;《Android插件化之资源加载机制》&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Android插件化" scheme="https://ivonhoe.github.io/categories/Android%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
    
    <category term="插件化" scheme="https://ivonhoe.github.io/tags/%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android客户端HTTP网络框架设计与实践</title>
    <link href="https://ivonhoe.github.io/2018/07/08/network-architecture-design/"/>
    <id>https://ivonhoe.github.io/2018/07/08/network-architecture-design/</id>
    <published>2018-07-08T13:30:33.000Z</published>
    <updated>2022-03-27T14:03:10.572Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><p>不管是android、ios还是浏览器端的开发，在正常的产品迭代过程中HTTP网络请求都是高频使用的功能。以android端为例，在使用常见的http网络框架时，如<code>HttpUrlConnection</code>,<code>HttpClient</code>或者<code>okHttp </code>，开发者都必须在此自身业务场景的基础上进行api的二次封装。一个功能强大且易用的网络框架不仅仅能够提高开发效率，起到事半功倍的效果，还能起到规范业务开发结果的作用。<br>希望通过这篇文章，总结下自己在设计和实现一个网络框架时的思考过程，也帮助团队同学了解现有网络框架的能力和不足。</p><span id="more"></span><h3 id="0x02-使用者的视角"><a href="#0x02-使用者的视角" class="headerlink" title="0x02 使用者的视角"></a>0x02 使用者的视角</h3><h4 id="2-1-使用volley"><a href="#2-1-使用volley" class="headerlink" title="2.1 使用volley"></a>2.1 使用volley</h4><p>发送Http get请求的示例代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// Instantiate the RequestQueue.</span><br><span class="hljs-title class_">RequestQueue</span> queue = <span class="hljs-title class_">Volley</span>.<span class="hljs-title function_">newRequestQueue</span>(<span class="hljs-variable language_">this</span>);<br><span class="hljs-title class_">String</span> url =<span class="hljs-string">&quot;http://www.google.com&quot;</span>;<br><br><span class="hljs-comment">// Request a string response from the provided URL.</span><br><span class="hljs-title class_">StringRequest</span> stringRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRequest</span>(<span class="hljs-title class_">Request</span>.<span class="hljs-property">Method</span>.<span class="hljs-property">GET</span>, url,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>.<span class="hljs-property">Listener</span>&lt;<span class="hljs-title class_">String</span>&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">onResponse</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> response</span>) &#123;<br>        <span class="hljs-comment">// Display the first 500 characters of the response string.</span><br>        mTextView.<span class="hljs-title function_">setText</span>(<span class="hljs-string">&quot;Response is: &quot;</span>+ response.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>,<span class="hljs-number">500</span>));<br>    &#125;<br>&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>.<span class="hljs-title class_">ErrorListener</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">onErrorResponse</span>(<span class="hljs-params">VolleyError error</span>) &#123;<br>        mTextView.<span class="hljs-title function_">setText</span>(<span class="hljs-string">&quot;That didn&#x27;t work!&quot;</span>);<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">// Add the request to the RequestQueue.</span><br>queue.<span class="hljs-title function_">add</span>(stringRequest);<br></code></pre></td></tr></table></figure><p>查看以上Volley使用的官方示例，可以将其划分为以下几个使用步骤：</p><ol><li>构建一个请求队列</li><li>构造一个请求Request对象和接收请求结果的<code>Response.Listener</code></li><li>将请求Request添加到请求队列中</li></ol><p>通过volley的使用方法你就可以大致猜测volley在完成一个网络请求的大致过程。开发者使用请求相关信息和接收返回结果的<code>Callback</code>封装成一个<code>Request</code>,并将其放在请求队列中，在请求队列的背后一定有负责真正网络请求任务的线程从队列中消费网络请求的<code>Request</code>，在获取网络请求结果后通过线程间消息机制将网络请求的结果在主线程返回给接受消息的<code>Response.Listener</code>。当然真正的过程肯定会更复杂。但是不管怎样，volley的设计思路是一个经典的生产者消费者模式。<br>从一个Volley api使用者的视角回头再看一下volley，你是否有这些疑问？</p><ul><li>在一个开发者的使用过程，他需要知道请求队列的存在吗？除非他想要改变请求的优先级规则或者有其他想要改变请求在请求队列中顺序的需求。</li><li>构造<code>Request</code>的方式不友好。以Get请求为例，需要自己手动将请求参数拼接到请求url中。如果是POST请求情况还会更复杂。</li><li>接受请求结果的方式不友好，指定<code>Response.Listener</code>对象接收请求让代码不够美观不说，更建立了请求者和请求框架之间的强耦合关系。以上面的示例代码为例，如果这段代码写在Activity中，构造的<code>Response.Listener</code>的匿名内部类存在当前Activity的隐式引用，很容易引起不必要的内存泄露。如果这段代码不在Activity中，那还要多一层数据的轮转机制。简直是开发者的噩梦。</li><li>针对失败的回调处理并不科学。在实际的业务开发中，你可能需要针对某几类返回数据做异常处理，虽然他们整个Http请求的网络过程是正常的，但是针对这些返回的结果把它看成异常流。如果希望Volley在这一点达到你的要求你还需要多一层封装。</li></ul><h4 id="2-2-使用okhttp"><a href="#2-2-使用okhttp" class="headerlink" title="2.2 使用okhttp"></a>2.2 使用okhttp</h4><p>发送Http post请求的示例代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//创建网络处理的对象</span><br>OkHttpClient client = <span class="hljs-keyword">new</span> OkHttpClient.<span class="hljs-constructor">Builder()</span><br>        .read<span class="hljs-constructor">Timeout(5, TimeUnit.SECONDS)</span><br>        .build<span class="hljs-literal">()</span>;<br><br><span class="hljs-comment">//post请求来获得数据</span><br><span class="hljs-comment">//创建一个RequestBody，存放重要数据的键值对</span><br>RequestBody body = <span class="hljs-keyword">new</span> FormBody.<span class="hljs-constructor">Builder()</span><br>        .add(<span class="hljs-string">&quot;showapi_appid&quot;</span>, <span class="hljs-string">&quot;13074&quot;</span>)<br>        .add(<span class="hljs-string">&quot;showapi_sign&quot;</span>, <span class="hljs-string">&quot;ea5b4bf2e140498bb772d1bf2a51a7a0&quot;</span>).build<span class="hljs-literal">()</span>;<br><span class="hljs-comment">//创建一个请求对象，传入URL地址和相关数据的键值对的对象</span><br>Request request = <span class="hljs-keyword">new</span> Request.<span class="hljs-constructor">Builder()</span><br>        .url(<span class="hljs-string">&quot;http://route.showapi.com/341-3&quot;</span>)<br>        .post(body).build<span class="hljs-literal">()</span>;<br><br><span class="hljs-comment">//创建一个能处理请求数据的操作类</span><br>Call call = client.<span class="hljs-keyword">new</span><span class="hljs-constructor">Call(<span class="hljs-params">request</span>)</span>;<br><br><span class="hljs-comment">//使用异步任务的模式请求数据</span><br>call.enqueue(<span class="hljs-keyword">new</span> <span class="hljs-constructor">Callback()</span> &#123;<br>    @Override<br>    public void on<span class="hljs-constructor">Failure(Call <span class="hljs-params">call</span>, IOException <span class="hljs-params">e</span>)</span> &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Log</span>.</span></span>e(“TAG”,<span class="hljs-string">&quot;错误信息：&quot;</span> + e.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);<br>    &#125;<br><br>    @Override<br>    public void on<span class="hljs-constructor">Response(Call <span class="hljs-params">call</span>, Response <span class="hljs-params">response</span>)</span> throws IOException &#123;<br>       <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Log</span>.</span></span>e(“TAG”,response.body<span class="hljs-literal">()</span>.<span class="hljs-built_in">string</span><span class="hljs-literal">()</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>相比较volley，okhttp在请求api的设计上更合理些。okhttp使用RequestBuilder和BodyBuilder构造网络请求，并且隐藏了网络框架的内部实现，让请求的过程更简单优雅。但在接收请求结果上依然选择<code>Callback</code>监听的方式。</p><h3 id="0x03-设计者如何面对"><a href="#0x03-设计者如何面对" class="headerlink" title="0x03 设计者如何面对"></a>0x03 设计者如何面对</h3><h4 id="3-1-请求需求与请求协议"><a href="#3-1-请求需求与请求协议" class="headerlink" title="3.1 请求需求与请求协议"></a>3.1 请求需求与请求协议</h4><p>目前android平台上主流的网络请求都是基于OkHttp框架的，okhttp框架针对http协议进行了封装和优化，支持http&#x2F;2协议，共享连接池的设计有利于提高请求效率，拦截器的设计支持监视、重写、和重试等特殊业务场景的需求。极大地降低了开发者的使用成本，同时兼备稳定性和可扩展性。所以我们在分析volley和okhttp在实际业务中的不足和优势，选择使用okhttp进行网络请求和连接，在其基础上进行业务封装，力求设计出尽可能的符合自身业务需求和场景的网络框架。具体使用设计需求如下：</p><ol><li>尽可能优雅的方式构造一个网络请求，不管他是get、post还是其他请求方法，也不管请求参数格式是form还是json。在构造Request方式上力求简单统一。</li><li>尽可能简单的方式获取请求结果，最好不要再用Callback的方式接收回调数据。</li><li>支持多种不同的请求结果类型，不管是<code>String</code>还是<code>JSON</code>，不管是Java对象还是文件，都能简单的获取。</li><li>对失败的异常处理要更符合自身业务场景，并不是网络连接错误才会触发请求失败的接口</li></ol><p>结合以上几点对网络框架的期望，所以诞生了以下实例的API：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getMethodTest</span><span class="hljs-params">()</span> </span>&#123;<br>    TestLog.d(<span class="hljs-string">&quot;get url:&quot;</span> + getUrl(PATH_GET));<br><br>    BasicRequest request = RequestBuilder.obtain().get()<br>            .setUrl(getUrl(PATH_GET))<br>            .addParam(<span class="hljs-string">&quot;shopIds&quot;</span>, <span class="hljs-number">123445</span>)<br>            .into(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>L, (<span class="hljs-keyword">short</span>) <span class="hljs-number">1</span>, <span class="hljs-keyword">false</span>, <span class="hljs-number">1</span>D, <span class="hljs-number">1</span>f)<br>            .buildJsonRequest(ShopInfo.class);<br><br>    request.send();<br>&#125;<br><br><span class="hljs-meta">@Keep</span><br><span class="hljs-meta">@NetworkCallback</span>(name = <span class="hljs-string">&quot;getMethod;getMethod2&quot;</span>, type = ResponseType.SUCCESS)<br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onGetMethodSuccess</span><span class="hljs-params">(ShopInfo info, <span class="hljs-keyword">int</span> h, <span class="hljs-keyword">long</span> h1, <span class="hljs-keyword">short</span> h2, <span class="hljs-keyword">boolean</span> h3, <span class="hljs-keyword">double</span> h4</span></span><br><span class="hljs-params"><span class="hljs-function">        , <span class="hljs-keyword">float</span> h5)</span> </span>&#123;<br>    TestLog.d(<span class="hljs-string">&quot;++++++++get method success:&quot;</span> + info.toString());<br>&#125;<br><br><span class="hljs-meta">@Keep</span><br><span class="hljs-meta">@NetworkCallback</span>(name = <span class="hljs-string">&quot;getMethod&quot;</span>, type = ResponseType.FAILED)<br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onGetMethodFailed</span><span class="hljs-params">(CommonError <span class="hljs-keyword">error</span>, <span class="hljs-keyword">int</span> h, <span class="hljs-keyword">long</span> h1, <span class="hljs-keyword">short</span> h2, <span class="hljs-keyword">boolean</span> h3,</span></span><br><span class="hljs-params"><span class="hljs-function">                               <span class="hljs-keyword">double</span> h4, <span class="hljs-keyword">float</span> h5)</span> </span>&#123;<br>    TestLog.d(<span class="hljs-string">&quot;++++++++get method failed:&quot;</span> + <span class="hljs-keyword">error</span>.toString());<br>&#125;<br></code></pre></td></tr></table></figure><p>API说明：</p><ul><li><code>RequestBuilder.obtain</code>从对象池中返回复用的Request对象</li><li><code>.get()</code> <code>.postJson()</code> <code>.postFormEncode()</code> <code>postStream(Binary binary)</code>等方法封装了常见的get与post请求并指定了不同的body格式</li><li>使用<code>addParam(key, value)</code>方法添加请求参数，这里并不因为请求方法的不同而存在api上的差异</li><li><strong>使用注解标记接收网络请求结果回调的方法</strong>。如上例中，<code>onGetMethodSuccess()</code>和 <code>onGetMethodFailed()</code>方便被<code>NetworkCallback</code>注解标记，并且通过<code>BasicRequest.into(this, &quot;getMethod&quot;, 1, 1L, (short) 1, false, 1D, 1f)</code>绑定了请求与回调方法之间的关系。其中into的方法参数一次为：包含改回调方法的对象，注解的名称，以及Callback方法需要的其他额外参数。</li><li><code>buildJsonRequest</code>将返回结果自动转换成<code>ShopInfo</code>对象。</li></ul><h4 id="3-2-缓存"><a href="#3-2-缓存" class="headerlink" title="3.2 缓存"></a>3.2 缓存</h4><p>Http缓存策略是一个相对复杂的问题，大致分为以下三个方面：</p><h5 id="3-2-1-缓存存储策略"><a href="#3-2-1-缓存存储策略" class="headerlink" title="3.2.1 缓存存储策略"></a>3.2.1 缓存存储策略</h5><p><strong>决定Http的相应内容是否可缓存在客户端</strong>。Http响应头中的<code>Cache-Control</code>字段，分为<code>Public</code>、<code>Private</code>、<code>no-cache</code>、<code>max-age</code> 、<code>no-store</code>5种类型。其中前4个都会缓存文件数据（关于 no-cache 应理解为“不建议使用本地缓存”，其仍然会缓存数据到本地），后者 no-store 则不会在客户端缓存任何响应数据。</p><h5 id="3-2-2-缓存过期策略"><a href="#3-2-2-缓存过期策略" class="headerlink" title="3.2.2 缓存过期策略"></a>3.2.2 缓存过期策略</h5><p><strong>决定客户端是否可直接从本地缓存数据中加载数据并展示，否则就发请求到服务端获取</strong>。Http响应头中的<code>Expires</code>字段指明了缓存数据有效的绝对时间，告诉客户端到了这个时间点后该本地缓存就该作废了。这里的作废是指客户端不能直接再从本地读取缓存，需要再发一次请求到服务端去确认。确认下这个缓存还有没有用。这个过程就要说到下面的缓存对比策略。</p><h5 id="3-2-3-缓存对比策略"><a href="#3-2-3-缓存对比策略" class="headerlink" title="3.2.3 缓存对比策略"></a>3.2.3 缓存对比策略</h5><p><strong>决定客户端本地的缓存数据是否仍然有效。</strong>客户端检测到数据过期或浏览器刷新后，往往会重新发起一个 http 请求到服务器，服务器此时并不急于返回数据，而是看请求头有没有带标识（ If-Modified-Since、If-None-Match）过来，如果判断标识仍然有效，则返回304告诉客户端取本地缓存数据来用即可（这里要注意的是你必须要在首次响应时输出相应的头信息（Last-Modified、ETags）到客户端）。</p><p>根据上述的三种缓存策略，这里贴出客户端对http缓存控制的关键代码:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 先检查是否有未过期缓存</span><br><span class="hljs-comment"> */</span><br>CacheControl cacheControl = cacheKey.get<span class="hljs-constructor">CacheControl()</span>;<br><span class="hljs-keyword">if</span> (cacheControl != null<span class="hljs-operator"> &amp;&amp; </span>cacheControl.should<span class="hljs-constructor">Cache()</span>) &#123;<br>    cacheEntry = mCacheManager.get(cacheKey);<br>    <span class="hljs-comment">// TestLog.d(&quot;缓存=====cache entry:&quot; + cacheEntry);</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 如果存在缓存数据，检查是否过期</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (cacheEntry != null) &#123;<br>    boolean isExpired = cacheEntry.is<span class="hljs-constructor">Expired()</span>;<br>    <span class="hljs-keyword">if</span> (!isExpired) &#123;<br>        <span class="hljs-comment">// 没有过期，delivery缓存信息</span><br>        Headers headers = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CacheExecutor</span>.</span></span>get<span class="hljs-constructor">ResponseHeaders(<span class="hljs-params">cacheEntry</span>)</span>;<br>        byte<span class="hljs-literal">[]</span> body = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CacheExecutor</span>.</span></span>get<span class="hljs-constructor">ResponseBody(<span class="hljs-params">cacheEntry</span>)</span>;<br><br>        Object result = perform<span class="hljs-constructor">ParseResponse(<span class="hljs-params">requestEvent</span>, <span class="hljs-params">headers</span>, <span class="hljs-params">body</span>)</span>;<br>        response = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BasicResponse</span>.</span></span>success(result);<br>        return;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 过期，检查是否有Etag和Last-Modified信息</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TextUtils</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">cacheEntry</span>.<span class="hljs-params">etag</span>)</span>) &#123;<br>            requestHeaders.set(<span class="hljs-string">&quot;If-None-Match&quot;</span>, cacheEntry.etag);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (cacheEntry.lastModified &gt; <span class="hljs-number">0</span>) &#123;<br>            requestHeaders.set(<span class="hljs-string">&quot;If-Modified-Since&quot;</span>,<br>                    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DateUtils</span>.</span></span>format<span class="hljs-constructor">MillisToGMT(<span class="hljs-params">cacheEntry</span>.<span class="hljs-params">lastModified</span>)</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如何确定缓存时间的关键流程：</p><p><img src="/res/network/cache-ttl.png"></p><h4 id="3-3-JSON转换与错误处理"><a href="#3-3-JSON转换与错误处理" class="headerlink" title="3.3 JSON转换与错误处理"></a>3.3 JSON转换与错误处理</h4><p>首先需要定义一个CommonResponse，所有的JSON格式的Response都继承它。按照服务端低响应状态的约定，当status为<code>false</code>时表示请求结果失败，这里说的失败指的是无法返回客户端预期的正确业务结果。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonResponse</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Serializable</span></span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> boolean status;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 描述</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> message;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 响应码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> responseCode;<br>&#125;<br></code></pre></td></tr></table></figure><p>当网络出现异常导致的连接失败时，或者当服务端返回的数据无法正常序列化为指定的类的实例时，或者CommonResponse的status变量为false时，网络框架都会抛出一个可被自动捕获的<code>Throwable</code>，并将返回值和错误类型回调到标记为<code>@NetworkCallback(type = ResponseType.FAILED)</code>的对应方法中。</p><h3 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h3><p>因为篇幅的原因，暂时只针对上述的几个方面较的阐述了一个网络框架的设计思路，还包括但不仅限于下面的这些讨论方向，有机会再详聊！如：</p><blockquote><p>线程的切换<br>对响应数据完整性的校验<br>Zip文件的请求与自动解压缩，bspatch算法的增量文件请求并根据增量文件自动生成全量文件等<br>网络模块与缓存模块的解耦设计<br>网络性能的监控<br>httpDNS方案的应用<br>cookie的管理(可参考github开源项目<code>nohttp</code>项目的设计)</p></blockquote><p>在实际的业务开发过程中，针对上述问题的设计和封装已经能够覆盖大部分复杂的业务场景。相信一定能让一个开发人员写出赏心悦目自嗨的代码了。</p><h3 id="0x05-参考文档"><a href="#0x05-参考文档" class="headerlink" title="0x05 参考文档"></a>0x05 参考文档</h3><p><a href="https://tech.youzan.com/android_http/">https://tech.youzan.com/android_http/</a></p><p><a href="https://mp.weixin.qq.com/s/qOMO0LIdA47j3RjhbCWUEQ">https://mp.weixin.qq.com/s/qOMO0LIdA47j3RjhbCWUEQ</a></p><p><a href="https://www.cnblogs.com/chenqf/p/6386163.html">https://www.cnblogs.com/chenqf/p/6386163.html</a></p><p><a href="http://blog.csdn.net/yaofeiNO1/article/details/54428021">http://blog.csdn.net/yaofeiNO1/article/details/54428021</a></p><p><a href="http://blog.csdn.net/qmickecs/article/details/73696954">http://blog.csdn.net/qmickecs/article/details/73696954</a></p><p><a href="http://blog.csdn.net/qmickecs/article/details/73822619">http://blog.csdn.net/qmickecs/article/details/73822619</a></p><h3 id="转载请标明出处病已blog-https-ivonhoe-github-io"><a href="#转载请标明出处病已blog-https-ivonhoe-github-io" class="headerlink" title="转载请标明出处病已blog https://ivonhoe.github.io/"></a>转载请标明出处<a href="https://ivonhoe.github.io/">病已blog https://ivonhoe.github.io/</a></h3>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h3&gt;&lt;p&gt;不管是android、ios还是浏览器端的开发，在正常的产品迭代过程中HTTP网络请求都是高频使用的功能。以android端为例，在使用常见的http网络框架时，如&lt;code&gt;HttpUrlConnection&lt;/code&gt;,&lt;code&gt;HttpClient&lt;/code&gt;或者&lt;code&gt;okHttp &lt;/code&gt;，开发者都必须在此自身业务场景的基础上进行api的二次封装。一个功能强大且易用的网络框架不仅仅能够提高开发效率，起到事半功倍的效果，还能起到规范业务开发结果的作用。&lt;br&gt;希望通过这篇文章，总结下自己在设计和实现一个网络框架时的思考过程，也帮助团队同学了解现有网络框架的能力和不足。&lt;/p&gt;</summary>
    
    
    
    <category term="方案与设计" scheme="https://ivonhoe.github.io/categories/%E6%96%B9%E6%A1%88%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="网络" scheme="https://ivonhoe.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>移动端无痕埋点实践详解(一)</title>
    <link href="https://ivonhoe.github.io/2018/07/03/how-to-track-users/"/>
    <id>https://ivonhoe.github.io/2018/07/03/how-to-track-users/</id>
    <published>2018-07-03T09:53:56.000Z</published>
    <updated>2022-03-27T14:02:18.731Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>用户数据埋点的一般解决思路是使用代码手动埋点。国内主要的第三方数据分析服务商，如百度统计、友盟、TalkingData等都提供这一方案。但是使用代码手动埋点的方式，投入资源大，往往很难能够有实际产出。其中一个很重要的原因其实是在分析实际业务数据之前，很难知道我真正想看什么样的数据。用代码手动的埋点方案经常会导致一个尴尬的解决，想要看的数据没有埋，埋了的数据不准。<br>用户数据埋点是少见的涉及到一个产品研发团队所有角色的项目。从运营的数据需求，到产品经理的抽象和规范，到移动端前端的手动采集数据，再到服务端和大数据的存储和转换，最终把结果反馈给运营和产品经理。埋点的实际产出涉及到几乎所有部门，如果按照链式的工作流来解决埋点问题，当任何一个环节出现问题，都会对整个项目结果的产出产生影响。这篇文章记录了无痕埋点方案的思路与其核心问题的解决方案。</p><span id="more"></span><p><img src="/res/trace_user/trace1.png"></p><h3 id="0x01-什么是无痕埋点？"><a href="#0x01-什么是无痕埋点？" class="headerlink" title="0x01 什么是无痕埋点？"></a>0x01 什么是无痕埋点？</h3><p>所谓的”无痕埋点”，其实就是通过技术手段，无差别的记录用户在产品中的行为，当有一天突然想对某一个控件做点击分析时，不再需要开发手动添加数据采集信息。因为从部署埋点方案的时候，就一直在收集所有的用户的数据了。用户的数据并不是分析需求产生的那一刻才有的。无痕埋点在无差别的记录用户所有行为，而实际的埋点结果产出取决于BI工程师对无痕埋点数据的清洗。</p><p>从技术角度总结以往埋点项目结果产出困难的原因，这些也是无痕埋点方案想要解决的核心问题。</p><ul><li>通过代码手动埋点比较原始，出错概率较高。</li><li>埋点链路较长，出现错埋漏埋需要重新发布</li><li>埋点数据准确性无法校验</li></ul><p>所以，在项目上使用无痕埋点来解决项目链路过长的问题的方法是将埋点数据的产生过程分成两个并行的部分。将数据的采集过程前置，不再依赖运营和产品经理的需求产出。现有全量用户数据，再由运营和产品分析数据产出结果。</p><p><img src="/res/trace_user/trace2.png"></p><h3 id="0x02-移动端无痕埋点如何实现？"><a href="#0x02-移动端无痕埋点如何实现？" class="headerlink" title="0x02 移动端无痕埋点如何实现？"></a>0x02 移动端无痕埋点如何实现？</h3><p>移动端埋点的方案以在Android系统上实现为例，关键在于解决2个问题：</p><blockquote><ul><li>如何统一标识控件</li><li>统一拦截用户操作行为。这里说的用户操作主要还是用户的单击事件。</li></ul></blockquote><h4 id="2-1-如何标识控件"><a href="#2-1-如何标识控件" class="headerlink" title="2.1 如何标识控件"></a>2.1 如何标识控件</h4><p>为了自动生成事件标识，我们需要获取每个控件自身的ID、类名以及位于所属父组件的Index等特征信息，并逐级向上遍历找到根节点。约定控件标识的生成规则为 <code>/root/ClassName:id/ClassName:id</code>，以某一个业务界面的<code>扫一扫</code>按钮为例，寻找它到root节点的控件路径，它的控件标识字符串应该是 <code>/root/RelativeLayout:-1/FrameLayout:1997209645/RelativeLayout:-1/RelativeLayout:1997209836/LinearLayout:1997209965/TextView:1997209967</code>，并通过md5算法将这个标识字符串生成为<code>XPATH</code>就是我们想要的控件标识。当后台上报数据中包含<code>1e3cdc9499fac8088220756a46c85599</code>的点击时。我们就认为是<code>扫一扫</code>控件被点击了。</p><p><img src="/res/trace_user/trace3.png"></p><h4 id="2-2-如何统一拦截单击事件"><a href="#2-2-如何统一拦截单击事件" class="headerlink" title="2.2 如何统一拦截单击事件"></a>2.2 如何统一拦截单击事件</h4><p>还是以Android端上的实现为例，如何统一拦截用户的单击事件呢？先看如何实现一个单击操作的响应，在Android上一般的做法是针对View设置一个单击的监听。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Interface definition for a callback to be invoked when a view is clicked.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">OnClickListener</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Called when a view has been clicked.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * @param v The view that was clicked.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-built_in">void</span> onClick(View v);<br>&#125;<br></code></pre></td></tr></table></figure><p>那么有没有办法统一把所有的单击事件都替换掉呢？在运行时！业务开发的工程师还是按照原生Android系统的api实现对单击事件的响应，埋点SDK在运行时统一替换所有的<code>View.OnClickListener</code>，将其替换成原有<code>View.OnClickListener</code>的包装。当执行<code>AutoTraceListenerWrapper</code>的时候实际执行的还是原有<code>Listener</code>的单击事件，同时又能统一拦截所有的单击事件。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> AutoTraceListenerWrapper implements <span class="hljs-keyword">View</span>.OnClickListener &#123;<br><br>    private <span class="hljs-keyword">View</span>.OnClickListener mClickListener;<br><br>    <span class="hljs-built_in">public</span> AutoTraceListenerWrapper(<span class="hljs-keyword">View</span>.OnClickListener listener) &#123;<br>        mClickListener = listener;<br>    &#125;<br><br>    @Override<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> onClick(<span class="hljs-keyword">View</span> <span class="hljs-keyword">view</span>) &#123;<br>        onViewClick(<span class="hljs-keyword">view</span>);<br><br>        <span class="hljs-keyword">if</span> (mClickListener != <span class="hljs-keyword">null</span>) &#123;<br>            mClickListener.onClick(<span class="hljs-keyword">view</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么如何统一替换所有的View的单击监听呢？只需要遍历安卓视图结构的View Tree，使用反射机制替换掉所有的原生<code>OnClickListener</code>就可以了。</p><h3 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h3><p>埋点问题是不能通过一个方案适配所有业务场景的，不同的场景下需要选择不同的埋点方案。无痕埋点方案针对的是用户的简单用户行为事件，比如如何规范采集用户的点击事件。例如针对页面跳转的事件统计还是需要你单独埋点。埋点数据能不能最终完美的呈现依赖的不单单是技术方案，还有更多的是数据规范的问题。例如在面对运行时才能获知的业务信息时，如何使用埋点技术将需要的业务信息做统一的上报，是另一个重要的关键点。例如在做数据清洗时如何建立规范的数据中间表？无痕埋点只是获取完整埋点数据的第一步。</p><p><a href="https://ivonhoe.github.io/2018/09/11/how-to-track-users-2/">移动端无痕埋点实践详解(二)</a></p><h3 id="0x04-参考文档"><a href="#0x04-参考文档" class="headerlink" title="0x04 参考文档"></a>0x04 参考文档</h3><p><a href="https://tech.meituan.com/mt-mobile-analytics-practice.html">美团点评前端无痕埋点实践</a></p><p><a href="https://blog.csdn.net/vshuang/article/details/60361314">数据采集与埋点简介之 代码埋点、可视化埋点与无痕埋点</a></p><h3 id="0x05-转载请标明出处病已blog-https-ivonhoe-github-io"><a href="#0x05-转载请标明出处病已blog-https-ivonhoe-github-io" class="headerlink" title="0x05 转载请标明出处病已blog https://ivonhoe.github.io/"></a>0x05 转载请标明出处<a href="https://ivonhoe.github.io/">病已blog https://ivonhoe.github.io/</a></h3><h3 id="转载请标明出处病已blog-https-ivonhoe-github-io"><a href="#转载请标明出处病已blog-https-ivonhoe-github-io" class="headerlink" title="转载请标明出处病已blog https://ivonhoe.github.io/"></a>转载请标明出处<a href="https://ivonhoe.github.io/">病已blog https://ivonhoe.github.io/</a></h3>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;用户数据埋点的一般解决思路是使用代码手动埋点。国内主要的第三方数据分析服务商，如百度统计、友盟、TalkingData等都提供这一方案。但是使用代码手动埋点的方式，投入资源大，往往很难能够有实际产出。其中一个很重要的原因其实是在分析实际业务数据之前，很难知道我真正想看什么样的数据。用代码手动的埋点方案经常会导致一个尴尬的解决，想要看的数据没有埋，埋了的数据不准。&lt;br&gt;用户数据埋点是少见的涉及到一个产品研发团队所有角色的项目。从运营的数据需求，到产品经理的抽象和规范，到移动端前端的手动采集数据，再到服务端和大数据的存储和转换，最终把结果反馈给运营和产品经理。埋点的实际产出涉及到几乎所有部门，如果按照链式的工作流来解决埋点问题，当任何一个环节出现问题，都会对整个项目结果的产出产生影响。这篇文章记录了无痕埋点方案的思路与其核心问题的解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="方案与设计" scheme="https://ivonhoe.github.io/categories/%E6%96%B9%E6%A1%88%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="无痕埋点" scheme="https://ivonhoe.github.io/tags/%E6%97%A0%E7%97%95%E5%9F%8B%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Android NDK编译错误解决</title>
    <link href="https://ivonhoe.github.io/2018/06/05/ndk17-build-error/"/>
    <id>https://ivonhoe.github.io/2018/06/05/ndk17-build-error/</id>
    <published>2018-06-05T13:10:54.000Z</published>
    <updated>2022-03-27T13:49:50.363Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x01-问题描述"><a href="#0x01-问题描述" class="headerlink" title="0x01 问题描述"></a>0x01 问题描述</h4><p><strong>现象：</strong> 将ndk版本升级到    <code>17.0.4754217</code>编译报错</p><figure class="highlight gradle"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs gradle">* What went wrong:<br>Execution failed <span class="hljs-keyword">for</span> <span class="hljs-keyword">task</span> <span class="hljs-string">&#x27;:app+stub:transformNativeLibsWithStripDebugSymbolForRelease&#x27;</span>.<br>&gt; A problem occurred starting process <span class="hljs-string">&#x27;command &#x27;</span><span class="hljs-regexp">/Users/I</span>vonhoe<span class="hljs-regexp">/Library/</span>Android<span class="hljs-regexp">/sdk/</span>ndk-bundle<span class="hljs-regexp">/toolchains/mi</span>ps64el-linux-android-<span class="hljs-number">4.9</span><span class="hljs-regexp">/prebuilt/</span>darwin-x86_64<span class="hljs-regexp">/bin/mi</span>ps64el-linux-android-strip<span class="hljs-string">&#x27;&#x27;</span><br><br>* <span class="hljs-keyword">Try</span>:<br>Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.<br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata">Caused <span class="hljs-keyword">by</span>: java.io.IOException: Cannot <span class="hljs-keyword">run</span> <span class="hljs-keyword">program</span> <span class="hljs-string">&quot;/Users/Ivonhoe/Library/Android/sdk/ndk-bundle/toolchains/mips64el-linux-android-4.9/prebuilt/darwin-x86_64/bin/mips64el-linux-android-strip&quot;</span> (<span class="hljs-keyword">in</span> directory <span class="hljs-string">&quot;/Users/Ivonhoe/Workspace/keyaccount-repo/app+stub&quot;</span>): <span class="hljs-keyword">error</span>=2, <span class="hljs-keyword">No</span> such <span class="hljs-keyword">file</span> or directory<br>        at <span class="hljs-keyword">net</span>.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:25)<br>        ... 4 <span class="hljs-keyword">more</span><br>Caused <span class="hljs-keyword">by</span>: java.io.IOException: <span class="hljs-keyword">error</span>=2, <span class="hljs-keyword">No</span> such <span class="hljs-keyword">file</span> or directory<br>        ... 5 <span class="hljs-keyword">more</span><br><br></code></pre></td></tr></table></figure><span id="more"></span><p><strong>原因：</strong></p><p>升级android ndk版本到17时未同时升级gradle编译工具到3.0.0以上，低版本的编译工具会执行mips64的脚本。而mips64的脚本在ndk17上已经被删除了！</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">This</span> mipsel-linux-android-<span class="hljs-number">4</span>.<span class="hljs-number">9</span> directory exists to make the NDK compatible with the Android<br><span class="hljs-attribute">SDK</span>&#x27;s Gradle plugin, version <span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> and earlier, which expects the NDK<br><span class="hljs-attribute">to</span> have a MIPS toolchain directory.<br></code></pre></td></tr></table></figure><p><strong>解决方案：</strong><br>一种解决办法是同时升级gradle编译工具的版本。但是因为项目的原因，无法使用最新版本的gradle编译工具，只能使用2.3.0版本的编译工具，所以使用一个绕过问题的方法，<br>在<code>/Users/Ivonhoe/Library/Android/sdk/ndk-bundle/toolchains/mips64el-linux-android-4.9/prebuilt/darwin-x86_64/bin/</code>目录创建一个<code>mips64el-linux-android-strip</code>的空文件。记得使用<code>chmod </code>命令修改空文件的执行权限。</p><h4 id="0x03-参考文档："><a href="#0x03-参考文档：" class="headerlink" title="0x03 参考文档："></a>0x03 参考文档：</h4><p><a href="https://github.com/android-ndk/ndk/issues/700">React Native apps fail to build since NDK update to r17 (due to missing mipsel-linux-android-4.9 toolchain files)</a></p><h3 id="转载请标明出处病已blog-https-ivonhoe-github-io"><a href="#转载请标明出处病已blog-https-ivonhoe-github-io" class="headerlink" title="转载请标明出处病已blog https://ivonhoe.github.io/"></a>转载请标明出处<a href="https://ivonhoe.github.io/">病已blog https://ivonhoe.github.io/</a></h3>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;0x01-问题描述&quot;&gt;&lt;a href=&quot;#0x01-问题描述&quot; class=&quot;headerlink&quot; title=&quot;0x01 问题描述&quot;&gt;&lt;/a&gt;0x01 问题描述&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;现象：&lt;/strong&gt; 将ndk版本升级到    &lt;code&gt;17.0.4754217&lt;/code&gt;编译报错&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs gradle&quot;&gt;* What went wrong:&lt;br&gt;Execution failed &lt;span class=&quot;hljs-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;:app+stub:transformNativeLibsWithStripDebugSymbolForRelease&amp;#x27;&lt;/span&gt;.&lt;br&gt;&amp;gt; A problem occurred starting process &lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;command &amp;#x27;&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/Users/I&lt;/span&gt;vonhoe&lt;span class=&quot;hljs-regexp&quot;&gt;/Library/&lt;/span&gt;Android&lt;span class=&quot;hljs-regexp&quot;&gt;/sdk/&lt;/span&gt;ndk-bundle&lt;span class=&quot;hljs-regexp&quot;&gt;/toolchains/mi&lt;/span&gt;ps64el-linux-android-&lt;span class=&quot;hljs-number&quot;&gt;4.9&lt;/span&gt;&lt;span class=&quot;hljs-regexp&quot;&gt;/prebuilt/&lt;/span&gt;darwin-x86_64&lt;span class=&quot;hljs-regexp&quot;&gt;/bin/mi&lt;/span&gt;ps64el-linux-android-strip&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;br&gt;* &lt;span class=&quot;hljs-keyword&quot;&gt;Try&lt;/span&gt;:&lt;br&gt;Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs stata&quot;&gt;Caused &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: java.io.IOException: Cannot &lt;span class=&quot;hljs-keyword&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;program&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;/Users/Ivonhoe/Library/Android/sdk/ndk-bundle/toolchains/mips64el-linux-android-4.9/prebuilt/darwin-x86_64/bin/mips64el-linux-android-strip&amp;quot;&lt;/span&gt; (&lt;span class=&quot;hljs-keyword&quot;&gt;in&lt;/span&gt; directory &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;/Users/Ivonhoe/Workspace/keyaccount-repo/app+stub&amp;quot;&lt;/span&gt;): &lt;span class=&quot;hljs-keyword&quot;&gt;error&lt;/span&gt;=2, &lt;span class=&quot;hljs-keyword&quot;&gt;No&lt;/span&gt; such &lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt; or directory&lt;br&gt;        at &lt;span class=&quot;hljs-keyword&quot;&gt;net&lt;/span&gt;.rubygrapefruit.platform.internal.DefaultProcessLauncher.start(DefaultProcessLauncher.java:25)&lt;br&gt;        ... 4 &lt;span class=&quot;hljs-keyword&quot;&gt;more&lt;/span&gt;&lt;br&gt;Caused &lt;span class=&quot;hljs-keyword&quot;&gt;by&lt;/span&gt;: java.io.IOException: &lt;span class=&quot;hljs-keyword&quot;&gt;error&lt;/span&gt;=2, &lt;span class=&quot;hljs-keyword&quot;&gt;No&lt;/span&gt; such &lt;span class=&quot;hljs-keyword&quot;&gt;file&lt;/span&gt; or directory&lt;br&gt;        ... 5 &lt;span class=&quot;hljs-keyword&quot;&gt;more&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="学习总结" scheme="https://ivonhoe.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="ndk" scheme="https://ivonhoe.github.io/tags/ndk/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出JVM垃圾回收算法</title>
    <link href="https://ivonhoe.github.io/2018/06/03/jvm-gc-1/"/>
    <id>https://ivonhoe.github.io/2018/06/03/jvm-gc-1/</id>
    <published>2018-06-03T14:43:32.000Z</published>
    <updated>2018-09-11T13:29:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h4><p>在学习JVM如何进行垃圾回收方法时，发现所谓的JVM垃圾回收思想和现实生活的场景有很多相似的地方。所以用餐厅回收餐桌的方式类比JVM垃圾回收算法，应该能帮助JVM学习的理解和记忆。</p><h4 id="0x01-经典垃圾回收算法"><a href="#0x01-经典垃圾回收算法" class="headerlink" title="0x01 经典垃圾回收算法"></a>0x01 经典垃圾回收算法</h4><blockquote><p>标记-清除（Mark-Sweep）</p></blockquote><p>研发园开了家新餐厅，餐厅老板在考虑如何回收餐盘时先使用了最简单的方式，那就是服务员在顾客用餐的过程中，不定时的观察餐厅，针对用完餐的顾客记录他们的位置（当然一般的服务员的脑海中自行处理），统一回收他们的餐具和餐盘。这种回收方式会有一个明显的问题，那就是回收后的餐厅座位，很有可能是不连续的。如果后续有同行的顾客想坐在一起，那很可能找不到连续的座位。</p><span id="more"></span><p><img src="/res/gc/mark.jpg"></p><blockquote><p>复制算法（Copying）</p></blockquote><p>为了解决餐厅座位碎片化的问题，餐厅的老板提出了一个大胆的想法，这是一个很会思考的老板。把餐厅的用餐区域分成两部分A厅和B厅，当对A厅中的餐桌做回收时，将A厅中还未用完餐的顾客，‘请’到B厅去用餐，并且让这些顾客在B厅中拼桌用餐（为了餐位连续）。这样所有A厅中的位置都空余出来了，并且B厅中的用餐区域和未用餐区域都是连续的！简直是强迫症晚期。看似完美的解决了回收后餐位碎片化的问题。但是依然带来了其他的一些问题。</p><p>缺点：</p><ul><li>餐厅的运营区域是一个整体，现在只能同时对外开放A厅，运营空间变小了。</li><li>当有很多顾客需要从A厅转移到B厅时，效率太低。</li><li>用餐体验很差</li></ul><p>优点：</p><ul><li>不容易产生碎片</li></ul><p><img src="/res/gc/copy.jpg"></p><blockquote><p>标记-整理算法（Mark-Compact）</p></blockquote><p>当实行复制算法解决餐位回收的问题后，餐厅的老板针对新问题又有了新想法，只要移动顾客就可以解决碎片化问题，为啥我要将餐厅分成两个部分呢？毕竟那样不能最大效率的利用餐厅的用餐区域。创造性的提出了标记-整理算法，结合前面两中方法的优缺点，当餐厅准备回收餐位时，移动所有未用晚餐的顾客，并且让从餐厅的第一桌开始拼桌。保证后面的餐桌都是回收的并且座位都是连续的。这样既提高了餐厅餐桌的利用率又保证了当有大量组团顾客进店用餐时，餐厅能够提供大量的连续餐桌。</p><p><img src="/res/gc/mark-compact.jpg"></p><h4 id="0x02-分代收集（Generational-Collection）"><a href="#0x02-分代收集（Generational-Collection）" class="headerlink" title="0x02 分代收集（Generational Collection）"></a>0x02 分代收集（Generational Collection）</h4><p>如果还是用开餐厅的方式来思考JVM的话，可以把分代回收看做餐厅针对不同顾客的等级推出的个性化服务。分代收集算法并没有新的思想，只是根据对象存活周期的不同将内存划分为几块，一般把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，大量的对象都是’朝生夕死‘，每次垃圾回收是，都可以发现大量对象死去，所以针对新生代的垃圾回收一般选择<strong>复制算法</strong>。只需要复制少量存活对象就可以完成收集。针对老年代的垃圾回收，对象的存活时间较长，就必须使用<strong>’标记-清除‘或者’标记-整理‘</strong>算法来进行回收。</p><p>在新生代中，绝大多数的对象都是’朝生夕死‘的，新生代并不需要按照1：1的比例划分内存空间，而是将内存分为一个较大的Eden空间和一个较小的Survivor空间，并将Survivor空间分成两个较小空间，分别是From Space和ToSpace。每次使用Eden空间和其中的一块Survivor空间，当进行回收时，将该两块空间中还存活的对象复制到另一块Survivor空间中。Hotspot虚拟机默认Eden和Survivor的大小比例是8：1，也就是每次新生代可用内存空间为整个新生代容量的90%。</p><p><img src="/res/gc/gc.jpg"></p><p>这里很显然会有一个问题，理论上每次新生代GC都会回收绝大多数的对象，但是无法保证GC存活后的对象大学都不超过整个新生代的10%。当Survivor空间的内存不够用是，就需要老年代做内存担保。同样用餐厅的理论来理解，你希望把A厅的顾客转移到B厅，但是B厅已经没有足够空间容纳所有顾客了，这时候可以选择将顾客安置在VIP包厢【老年代】。并且每次在新生代GC中存活的对象，其年龄就会+1，默认情况下年龄达到15的对象会被转移到老年代。这里也很好理解，餐厅的忠实吃货为啥不给办张VIP卡呢？</p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><p><a href="">《深入理解Java虚拟机》周志明 著</a></p><p><a href="https://www.cnblogs.com/cielosun/p/6674431.html">Java基础：JVM垃圾回收算法</a></p><h3 id="转载请标明出处病已blog-https-ivonhoe-github-io"><a href="#转载请标明出处病已blog-https-ivonhoe-github-io" class="headerlink" title="转载请标明出处病已blog https://ivonhoe.github.io/"></a>转载请标明出处<a href="https://ivonhoe.github.io/">病已blog https://ivonhoe.github.io/</a></h3>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h4&gt;&lt;p&gt;在学习JVM如何进行垃圾回收方法时，发现所谓的JVM垃圾回收思想和现实生活的场景有很多相似的地方。所以用餐厅回收餐桌的方式类比JVM垃圾回收算法，应该能帮助JVM学习的理解和记忆。&lt;/p&gt;
&lt;h4 id=&quot;0x01-经典垃圾回收算法&quot;&gt;&lt;a href=&quot;#0x01-经典垃圾回收算法&quot; class=&quot;headerlink&quot; title=&quot;0x01 经典垃圾回收算法&quot;&gt;&lt;/a&gt;0x01 经典垃圾回收算法&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;标记-清除（Mark-Sweep）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;研发园开了家新餐厅，餐厅老板在考虑如何回收餐盘时先使用了最简单的方式，那就是服务员在顾客用餐的过程中，不定时的观察餐厅，针对用完餐的顾客记录他们的位置（当然一般的服务员的脑海中自行处理），统一回收他们的餐具和餐盘。这种回收方式会有一个明显的问题，那就是回收后的餐厅座位，很有可能是不连续的。如果后续有同行的顾客想坐在一起，那很可能找不到连续的座位。&lt;/p&gt;</summary>
    
    
    
    <category term="学习总结" scheme="https://ivonhoe.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="JVM" scheme="https://ivonhoe.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>拒绝单例模式</title>
    <link href="https://ivonhoe.github.io/2018/05/27/singleton/"/>
    <id>https://ivonhoe.github.io/2018/05/27/singleton/</id>
    <published>2018-05-27T14:23:37.000Z</published>
    <updated>2022-03-27T14:02:51.066Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00前言"><a href="#0x00前言" class="headerlink" title="0x00前言"></a>0x00前言</h3><p>相信很多同学在学习设计模式的过程中，最先了解的就是单例模式，至少我是这样。单例模式看似简单容易理解，实际上却有很多坑，正因为这样也成为了很多公司面试必考的面试题。实际使用单例模式时，难免会遇到滥用的情况，理解单例更要学会何时拒绝单例。</p><h3 id="0x01单例模式的基础知识"><a href="#0x01单例模式的基础知识" class="headerlink" title="0x01单例模式的基础知识"></a>0x01单例模式的基础知识</h3><h4 id="1-单例的几种写法"><a href="#1-单例的几种写法" class="headerlink" title="1. 单例的几种写法?"></a>1. 单例的几种写法?</h4><span id="more"></span><ul><li>懒汉式: 懒加载模式，需要的时候才创建实例。当有多个线程并行调用 getInstance() 的时候，就会创建多个实例。需要考虑线程安全问题。</li><li>饿汉式：单例的实例被声明成 static 和 final 变量了，在第一次加载类到内存中时就会初始化，所以创建实例本身是线程安全的。</li><li>静态内部类：JVM本身机制保证了线程安全问题，由于 SingletonHolder 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的；同时读取实例的时候不会进行同步，没有性能缺陷；也不依赖 JDK 版本。</li></ul><h4 id="2-为什么要双重检验锁"><a href="#2-为什么要双重检验锁" class="headerlink" title="2. 为什么要双重检验锁?"></a>2. 为什么要双重检验锁?</h4><figure class="highlight smali"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs smali">public<span class="hljs-keyword"> static</span> Singleton getSingleton() &#123;<br>   <span class="hljs-built_in"> if </span>(instance == null) &#123;                         //Single Checked<br>        synchronized (Singleton.class) &#123;<br>           <span class="hljs-built_in"> if </span>(instance == null) &#123;                 //Double Checked<br>               <span class="hljs-built_in"> instance </span>=<span class="hljs-built_in"> new </span>Singleton();<br>            &#125;<br>        &#125;<br>    &#125;<br>   <span class="hljs-built_in"> return </span>instance ;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>第一个条件是说，如果实例创建了，那就不需要同步了，直接返回就好了。</li><li>不然，我们就开始同步线程。</li><li>第二个条件是说，如果被同步的线程中，有一个线程创建了对象，那么别的线程就不用再创建了。</li></ol><h4 id="3-重排序问题"><a href="#3-重排序问题" class="headerlink" title="3. 重排序问题"></a>3. 重排序问题</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">instance</span> <span class="hljs-operator">=</span> new Singleton()<br></code></pre></td></tr></table></figure><p>这并不是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。</p><ol><li>给 instance 分配内存</li><li>调用 Singleton 的构造函数来初始化成员变量</li><li>将instance对象指向分配的内存空间（执行完这步 instance 就为非 null 了）</li></ol><p>但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。<br>对此，我们只需要把singleton声明成 volatile 就可以了。</p><h3 id="0x02-滥用单例带来哪些问题？"><a href="#0x02-滥用单例带来哪些问题？" class="headerlink" title="0x02 滥用单例带来哪些问题？"></a>0x02 滥用单例带来哪些问题？</h3><p>你的项目中可能会有一堆的Manager或者Controller，最简单获取方法是把他们设计成一个个单例，只需要通过一个getInstance的方法获取到他的唯一实例对象，在任何代码中的任何地方，甚至不需要上下文。是否思考过下面的这些问题？</p><blockquote><p>1.你的单例会有应用的生命周期吗？</p></blockquote><p>按照单例的定义，无法构建除该单例以外的实例，并且这个单例有一个静态引用，单例不会被虚拟机垃圾回收。单例对象一旦创建，对象的引用是保存在静态区，<strong>单例对象在堆上分配的内存空间只有在程序终止后才会释放</strong>，过多的单例必然增大内存的消耗，<strong>并且如果你的单例中的上下文引用了不当，可能会造成严重的内存泄露问题</strong>。单例的设计应该只用来保存全局的状态，并且不能和任何作用域绑定。如果这些状态的作用域比一个完整的应用程序的生命周期要短，那么这个状态就不应该用单例来管理。</p><blockquote><p>2.如何尽可能的减少依赖【耦合】？</p></blockquote><p>有依赖就有耦合，如果你的单例提供的是某一个特定功能的公共方法或状态。那调用方和被调用方就会因为单例的设计建立了强耦合关系。甚至更极端的情况中，包含了多个单例之间的相互依赖甚至循环依赖关系。那你永远不可能将各种角色模块化拆分出来。</p><blockquote><p>3.如果你想针对你的单例做扩展或升级怎么办?</p></blockquote><p>对单例的实现升级其实并不是单例模式要解决的问题，但是<strong>单例模式缺少抽象</strong>，在使用过程中必然会遇到这样的问题。在业务的发展过程中，一定会遇到需要对已有单例进行实现升级的情况，比如你需要对相同功能换一种方式实现？或者需要增加删除一个方法或接口？甚至可能变成一个完全不一样的功能。这时候的单例就会遇到一些问题，你不单单需要修改单例，你还需要修改依赖单例的上层业务代码。</p><h3 id="0x03如何尽可能少的使用单例模式？"><a href="#0x03如何尽可能少的使用单例模式？" class="headerlink" title="0x03如何尽可能少的使用单例模式？"></a>0x03如何尽可能少的使用单例模式？</h3><p>单例的好处是简单易用，单例模式在系统设置了全局的访问点，优化和共享资源的访问。但是滥用单例也带来的上述的三个方面的危害，无法统一管理对象的生命周期、增加耦合、针对实现编程而不是针对接口编程。如何享受单例模式带来的好处并且解决她带来的危害在于，如何通过一种解耦的方式全局获取一个单例对象，并且这个单例对象的生命周期是可管理的，并且这个单例对象是针对接口的抽象实现。</p><ul><li>针对接口实现：单例不再提供getInstance方法，并且根据不同的抽象接口实现</li><li>提供全局的访问点: 调用方可以通过全局的SingleManager获取实现接口的具体实例</li><li>可管理的对象生命周期: 所有的单例的唯一对象都由SingleManager管理</li><li>低耦合的：为了避免循环引用问题，<strong>SingletonManager在运行时根据配置文件通过反射的方式实例化每个接口的具体实现类</strong>，调用方只依赖SingletonManager，并且通过SingletonManager获取接口的实现实例</li></ul><p><img src="/res/singleton/singleton.png"></p><h3 id="0x04-参考文档"><a href="#0x04-参考文档" class="headerlink" title="0x04 参考文档"></a>0x04 参考文档</h3><p><a href="https://coolshell.cn/articles/265.html">深入浅出单实例SINGLETON设计模式</a></p><h3 id="转载请标明出处病已blog-https-ivonhoe-github-io"><a href="#转载请标明出处病已blog-https-ivonhoe-github-io" class="headerlink" title="转载请标明出处病已blog https://ivonhoe.github.io/"></a>转载请标明出处<a href="https://ivonhoe.github.io/">病已blog https://ivonhoe.github.io/</a></h3>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x00前言&quot;&gt;&lt;a href=&quot;#0x00前言&quot; class=&quot;headerlink&quot; title=&quot;0x00前言&quot;&gt;&lt;/a&gt;0x00前言&lt;/h3&gt;&lt;p&gt;相信很多同学在学习设计模式的过程中，最先了解的就是单例模式，至少我是这样。单例模式看似简单容易理解，实际上却有很多坑，正因为这样也成为了很多公司面试必考的面试题。实际使用单例模式时，难免会遇到滥用的情况，理解单例更要学会何时拒绝单例。&lt;/p&gt;
&lt;h3 id=&quot;0x01单例模式的基础知识&quot;&gt;&lt;a href=&quot;#0x01单例模式的基础知识&quot; class=&quot;headerlink&quot; title=&quot;0x01单例模式的基础知识&quot;&gt;&lt;/a&gt;0x01单例模式的基础知识&lt;/h3&gt;&lt;h4 id=&quot;1-单例的几种写法&quot;&gt;&lt;a href=&quot;#1-单例的几种写法&quot; class=&quot;headerlink&quot; title=&quot;1. 单例的几种写法?&quot;&gt;&lt;/a&gt;1. 单例的几种写法?&lt;/h4&gt;</summary>
    
    
    
    <category term="方案与设计" scheme="https://ivonhoe.github.io/categories/%E6%96%B9%E6%A1%88%E4%B8%8E%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="设计模式" scheme="https://ivonhoe.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS</title>
    <link href="https://ivonhoe.github.io/2018/05/21/https/"/>
    <id>https://ivonhoe.github.io/2018/05/21/https/</id>
    <published>2018-05-21T13:55:38.000Z</published>
    <updated>2018-09-11T13:28:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>https为什么安全？因为相对http的明文传输，https引入了数据加密和身份认证。服务器和客户端的消息只有服务器和客户端能够读懂，保证了数据的保密性。同时在交换数据之前，验证了对方的合法身份，保证了通信双方的安全。这篇总结主要记录了在理解https安全性的过程中遇到的问题。</p><h3 id="0x01-什么是对称加密和非对称加密"><a href="#0x01-什么是对称加密和非对称加密" class="headerlink" title="0x01 什么是对称加密和非对称加密"></a>0x01 什么是对称加密和非对称加密</h3><p>在https的协议中如何实现数据加密和身份认证呢？简单来说是客户端先获取非对称加密的公钥，通过公钥和服务器协商生成对称加密的对称密钥，并使用对称密钥加密传输数据。</p><span id="more"></span><p><img src="/res/https/https-1.png"></p><h4 id="1-1-对称加密"><a href="#1-1-对称加密" class="headerlink" title="1.1 对称加密"></a>1.1 对称加密</h4><p><strong>什么是对称加密：</strong>加密和解密使用相同密钥的算法。它要求发送方和接收方在安全通信之前，商定一个对称密钥。对称算法的安全性完全依赖于密钥，密钥泄漏就意味着任何人都可以对他们发送或接收的消息解密，所以密钥的保密性对通信至关重要。</p><p><strong>特点：</strong>计算量小、加密速度快、加密效率高。交易双方都使用同样密钥，安全性得不到保证。每次使用对称加密算法时，都需要使用其他人不知道的惟一密钥，这会使得发收信息双方所拥有的钥匙数量呈几何级数增长，密钥管理成为负担。</p><p><strong>代表算法：</strong> DES、AES</p><h4 id="1-2-非对称加密"><a href="#1-2-非对称加密" class="headerlink" title="1.2 非对称加密"></a>1.2 非对称加密</h4><p><strong>什么是非对称加密：</strong> 需要两个密钥来进行加密和解密。分别是公开密钥和私有密钥。如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。 </p><p><strong>特点：</strong> CPU计算资源消耗非常大，效率较低。非对称加密算法对加密内容的长度有限制，不能超过公钥长度。比如现在常用的公钥长度是2048位，意味着待加密内容不能超过256个字节。</p><p><strong>代表算法：</strong> RSA</p><h3 id="0x02-中间人劫持"><a href="#0x02-中间人劫持" class="headerlink" title="0x02 中间人劫持"></a>0x02 中间人劫持</h3><p>如果在通信过程中，客户端的请求被中间人劫持，那么中间人可以就可伪装成“冒牌客户端”和服务器通信，同时伪装成“冒牌服务器”与客户端通信。从而达到获取客户端服务端通信内容的目的！主要过程如下：</p><ol><li>中间人在服务器发送公钥之前劫持客户端请求，伪造客户端向服务端发起SSL握手</li><li>中间人获取服务端加密公钥，伪造出一个自己的公钥发送给客户端</li><li>客户端接受到伪造的公钥，使用伪造的公钥发送对称密钥</li><li>中间人劫持到对称密钥，并利用自己的私钥解密出对称密钥</li><li>利用步骤2中的正确服务器加密公钥，加密客户端对称密钥发送给服务</li><li>客户端和服务器使用被中间人破解的对称密钥传输数据，中间人可以获取所有传输信息</li></ol><p><img src="/res/https/https-2.jpeg"></p><h4 id="2-1-数字签名"><a href="#2-1-数字签名" class="headerlink" title="2.1 数字签名"></a>2.1 数字签名</h4><p>数字签名过程：</p><ol><li>服务端把一个报文经过HASH处理生成消息摘要信息Digest，使用私钥加密摘要信息生成签名信息。</li><li>将报文、签名发生给客户端</li><li>客户端使用相同的HASH算法对报文做相同的HASH处理，获取摘要Digest1</li><li>客户端使用公钥解密签名生成摘要Digest2，并且对比Digest1和Digest2是否一致</li><li>如果Digest1和Digest2一致说明报文没有被篡改过，这份报文和签名是对应的，具有不可抵赖性。</li></ol><h4 id="2-2-数字证书"><a href="#2-2-数字证书" class="headerlink" title="2.2 数字证书"></a>2.2 数字证书</h4><p>解决中间人劫持问题的关键在于，客户端如何能够分辨出接收到的公钥确实是服务端的呢？这时候就需要数字证书了。</p><p>数字证书是公司向一个证书发布机构”SecureTrust CA”申请的。这个证书发布机构”SecureTrust CA”是一个大家公认并被一些权威机构接受的证书发布机构，<strong>并且我们的操作系统里面已经安装了”SecureTrust CA”的证书</strong>。”SecureTrust CA”在给我们发布证书时，把Issuer,Public key,Subject,Valid from,Valid to等信息以明文的形式写到证书里面，然后用一个摘要算法计算出这些数字证书内容的一个Digest，并使用CA自己的私钥对Digest进行加密，生成证书的数字签名。</p><p>验证公钥过程：</p><ol><li>服务端将证书发送给客户端，<strong>这里不是公钥</strong></li><li>客户端提取证书中的发布机构(Issuer)为”SecureTrust CA”，在操作系统中受信任的发布机构的证书中去找”SecureTrust CA”的证书，如果查不到说明证书有问题。</li><li>如果找到了”SecureTrust CA”的证书，客户端从系统的证书中提取”SecureTrust CA”的公钥，</li><li>使用CA公钥对步骤1中获取到证书中的签名信息的进行解密获取解密摘要，并使用摘要算法计算证书的摘要</li><li>对比解密摘要和计算出的摘要信息是否一致。如果一致说明认证成功，当前证书中包含的公钥信息是可以信认的。</li></ol><p><img src="/res/https/https-3.jpeg"></p><p>数字证书中包含公钥和证书所有者信息，并且保证数字证书里的公钥确实是这个证书的所有者的，我们拿到一个数字证书，我们可以判断出这个数字证书到底是谁的。</p><h3 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h3><p><strong>数字签名：</strong>为了说明谁编写的报文，同时证明报文未被篡改过。</p><p><strong>数字证书：</strong>由权威的认证机构证明公钥的正确性。</p><h3 id="0x04-参考文档"><a href="#0x04-参考文档" class="headerlink" title="0x04 参考文档"></a>0x04 参考文档</h3><p><a href="http://wetest.qq.com/lab/view/110.html">HTTPS为什么安全 &amp;分析 HTTPS 连接建立全过程</a></p><p><a href="https://www.cnblogs.com/franson-2016/p/5530671.html">一个故事教你看懂什么是数字证书，它的原理是什么?它的作用是什么？</a></p><h3 id="转载请标明出处病已blog-https-ivonhoe-github-io"><a href="#转载请标明出处病已blog-https-ivonhoe-github-io" class="headerlink" title="转载请标明出处病已blog https://ivonhoe.github.io/"></a>转载请标明出处<a href="https://ivonhoe.github.io/">病已blog https://ivonhoe.github.io/</a></h3>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;https为什么安全？因为相对http的明文传输，https引入了数据加密和身份认证。服务器和客户端的消息只有服务器和客户端能够读懂，保证了数据的保密性。同时在交换数据之前，验证了对方的合法身份，保证了通信双方的安全。这篇总结主要记录了在理解https安全性的过程中遇到的问题。&lt;/p&gt;
&lt;h3 id=&quot;0x01-什么是对称加密和非对称加密&quot;&gt;&lt;a href=&quot;#0x01-什么是对称加密和非对称加密&quot; class=&quot;headerlink&quot; title=&quot;0x01 什么是对称加密和非对称加密&quot;&gt;&lt;/a&gt;0x01 什么是对称加密和非对称加密&lt;/h3&gt;&lt;p&gt;在https的协议中如何实现数据加密和身份认证呢？简单来说是客户端先获取非对称加密的公钥，通过公钥和服务器协商生成对称加密的对称密钥，并使用对称密钥加密传输数据。&lt;/p&gt;</summary>
    
    
    
    <category term="学习总结" scheme="https://ivonhoe.github.io/categories/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="网络" scheme="https://ivonhoe.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="对称加密" scheme="https://ivonhoe.github.io/tags/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
    <category term="非对称加密" scheme="https://ivonhoe.github.io/tags/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
    <category term="数字签名，数字证书" scheme="https://ivonhoe.github.io/tags/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%EF%BC%8C%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Android插件化之资源加载机制</title>
    <link href="https://ivonhoe.github.io/2018/03/14/small-bug-555-fix/"/>
    <id>https://ivonhoe.github.io/2018/03/14/small-bug-555-fix/</id>
    <published>2018-03-14T09:23:27.000Z</published>
    <updated>2018-09-18T09:52:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>这篇文章主要记录了在使用Small插件化框架中遇到的资源加载问题及相应解决方案，并梳理出Android的资源加载流程和插件化框架的资源加载原理。在前两篇插件化技术介绍的基础上会关注更多技术细节，希望能有所收获！</p><h3 id="关于Small插件化的其他文档："><a href="#关于Small插件化的其他文档：" class="headerlink" title="关于Small插件化的其他文档："></a>关于Small插件化的其他文档：</h3><p><a href="http://ivonhoe.github.io/2018/01/18/Small%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/"><strong>《Android插件化之Small框架实践总结》</strong></a><br><a href="http://ivonhoe.github.io/2018/01/18/Small%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/"><strong>《Android插件化之Small框架原理》</strong></a><br><a href="https://ivonhoe.github.io/2018/07/18/abandon-the-plugin-framework/"><strong>《Android插件化之从入门到放弃》</strong></a></p><h3 id="0x01-Small框架的资源加载异常"><a href="#0x01-Small框架的资源加载异常" class="headerlink" title="0x01 Small框架的资源加载异常"></a>0x01 Small框架的资源加载异常</h3><p>最近收到一个客户反馈，在他们的中兴V0840手机上打开我们的app会持续崩溃。第一时间在百度移动质量平台上短时租用了该机型，抓取了log。发现是资源查找失败异常。并在Small github issues中搜索<code>android.content.res.Resources$NotFoundException</code> 可以发现很多类似的问题，详细日志可查看下图。</p><span id="more"></span><p>Github issus链接：<a href="https://github.com/wequick/Small/issues/555">#555 Small Sample项目打包后在ZTE上闪退</a></p><p><strong>项目崩溃日志：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): FATAL EXCEPTION: main<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): Process: com.shandiangou.kaguanjia, PID: <span class="hljs-number">8189</span><br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): java.lang.RuntimeException: Unable to start activity ComponentInfo&#123;com.shandiangou.kaguanjia/com.shandiangou.kaguanjia.app.main.activity.GuideActivity&#125;: android.content.res.Resources$NotFoundException: Resource ID #<span class="hljs-number">0</span>x2a030010<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:<span class="hljs-number">2669</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:<span class="hljs-number">2730</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at android.app.ActivityThread.-wrap12(ActivityThread.java)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at android.app.ActivityThread$H.handleMessage(ActivityThread.java:<span class="hljs-number">1481</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at android.os.Handler.dispatchMessage(Handler.java:<span class="hljs-number">102</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at android.os.Looper.loop(Looper.java:<span class="hljs-number">154</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at android.app.ActivityThread.main(ActivityThread.java:<span class="hljs-number">6144</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at java.lang.reflect.Method.invoke(Native Method)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class="hljs-number">886</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="hljs-number">776</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): Caused by: android.content.res.Resources$NotFoundException: Resource ID #<span class="hljs-number">0</span>x2a030010<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at android.content.res.ResourcesImpl.getValue(ResourcesImpl.java:<span class="hljs-number">196</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at android.content.res.Resources.loadXmlResourceParser(Resources.java:<span class="hljs-number">2101</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at android.content.res.Resources.getLayout(Resources.java:<span class="hljs-number">1115</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at android.view.LayoutInflater.inflate(LayoutInflater.java:<span class="hljs-number">424</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at android.view.LayoutInflater.inflate(LayoutInflater.java:<span class="hljs-number">377</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at com.shandiangou.kaguanjia.common.base.CustomProgressDialog.init(CustomProgressDialog.java:<span class="hljs-number">38</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at com.shandiangou.kaguanjia.common.base.CustomProgressDialog.&lt;init&gt;(CustomProgressDialog.java:<span class="hljs-number">26</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at com.shandiangou.kaguanjia.common.base.BaseActivity.initProgressDialog(BaseActivity.java:<span class="hljs-number">27</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at com.shandiangou.kaguanjia.common.base.BaseActivity.onCreate(BaseActivity.java:<span class="hljs-number">22</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at com.shandiangou.kaguanjia.app.main.activity.GuideActivity.onCreate(GuideActivity.java:<span class="hljs-number">45</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at android.app.Activity.performCreate(Activity.java:<span class="hljs-number">6722</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:<span class="hljs-number">1119</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at net.wequick.small.ApkBundleLauncher$InstrumentationWrapper.callActivityOnCreate(ApkBundleLauncher.java:<span class="hljs-number">334</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:<span class="hljs-number">2622</span>)<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">685</span> E/AndroidRuntime( <span class="hljs-number">8189</span>): ... <span class="hljs-number">9</span> more<br><span class="hljs-attribute">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">48</span>:<span class="hljs-number">31</span>.<span class="hljs-number">688</span> W/ActivityManager( <span class="hljs-number">1384</span>):   Force finishing activity com.shandiangou.kaguanjia/net.wequick.small.A<br><br></code></pre></td></tr></table></figure><p><strong>Small框架官方Sample崩溃日志</strong></p><p><img src="/res/small/small-error.png"></p><h3 id="0x02-Android资源加载流程"><a href="#0x02-Android资源加载流程" class="headerlink" title="0x02 Android资源加载流程"></a>0x02 Android资源加载流程</h3><p><strong>Android源码Resources创建流程图：</strong></p><p><img src="/res/small/android-resources1.png"></p><p>ActivityThread在接收到LAUNCH_ACTIVITY消息以后，在 <code>performLaunchActivity </code>方法中，使用Instrumentation通过反射的方式创建Activity实例，再创建Activity的Base Context, 并在创建Context过程中实例化AssetManger和Resources。<br>ActivityThread在LAUNCH_ACTIVITY消息中，完成了Activity生命周期中的三个回调，分别是<code>onCreate</code> <code>onStart </code> <code>onRestoreInstanceState</code>。</p><p>Android中资源管理类在不同sdk版本中的关系如下图所示。</p><p><img src="/res/small/android-resources2.png" alt="Android源码资源类图"></p><h3 id="0x03-Small框架插件资源加载方案"><a href="#0x03-Small框架插件资源加载方案" class="headerlink" title="0x03 Small框架插件资源加载方案"></a>0x03 Small框架插件资源加载方案</h3><p>Small框架的资源加载流程在ApkBundleLauncher中完成，<code>setup</code>流程获取到所有插件so的信息，在<code>postSetUp</code>中获取所有插件包的资源路径，通过反射调用AssetManager的<code>addAssetPaths</code>方法，构造一个包含宿主包资源、系统资源和插件包资源的AssetManger。最后还是通过反射，使用包含所有资源的AssetManager替换掉ResourcesManager中Resources的AssetManger，最终达到加载插件中资源的目的。</p><p><strong>Small框架资源加载流程:</strong></p><p><img src="/res/small/android-resources4.png" alt="Android源码资源类图"></p><h3 id="0x04-bug修复方案"><a href="#0x04-bug修复方案" class="headerlink" title="0x04 bug修复方案"></a>0x04 bug修复方案</h3><p>看完Small插件资源加载流程，你是否有疑问？Small只在框架加载时对ResourcesManager进行了hook，好像在创建新的Resources并没有进行hook操作？那么当系统新创建Resources实例时，新的Resources中包含的资源路径并没有插件资源，这好像说不通吧。其实关注Small的源码中<code>ReflectAccelerator.ensureCacheResources</code>，这个方法想要的达到的作用是当每次启动Activity时遍历系统缓存的ResourceImpl，将它的AssetManager替换成包含插件资源的AssetManager。当然这个机制只在SDK&gt;&#x3D;24时生效。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">ensureCacheResources</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Build</span>.<span class="hljs-property">VERSION</span>.<span class="hljs-property">SDK_INT</span> &lt; <span class="hljs-number">24</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (sResourceImpls == <span class="hljs-literal">null</span> || sMergedResourcesImpl == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-title class_">Set</span>&lt;?&gt; resourceKeys = sResourceImpls.<span class="hljs-title function_">keySet</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-title class_">Object</span> resourceKey : resourceKeys) &#123;<br>        <span class="hljs-title class_">WeakReference</span> resourceImpl = (<span class="hljs-title class_">WeakReference</span>)sResourceImpls.<span class="hljs-title function_">get</span>(resourceKey);<br>        <span class="hljs-keyword">if</span> (resourceImpl != <span class="hljs-literal">null</span> &amp;&amp; resourceImpl.<span class="hljs-title function_">get</span>() != sMergedResourcesImpl) &#123;<br>            <span class="hljs-comment">// Sometimes? the weak reference for the key was released by what</span><br>            <span class="hljs-comment">// we can not find the cache resources we had merged before.</span><br>            <span class="hljs-comment">// And the system will recreate a new one which only build with host resources.</span><br>            <span class="hljs-comment">// So we needs to restore the cache. Fix #429.</span><br>            <span class="hljs-comment">// <span class="hljs-doctag">FIXME:</span> we&#x27;d better to find the way to KEEP the weak reference.</span><br>            sResourceImpls.<span class="hljs-title function_">put</span>(resourceKey, <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;<span class="hljs-title class_">Object</span>&gt;(sMergedResourcesImpl));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这里有两个问题:</strong></p><ol><li>SDK&lt;24时，在原生的Android系统中并不是每启动一个Activity都会创建一个新的Resources实例，ResourcesManager会使用缓存的Resources实例，所以只需要Hook一次资源加载。但是一旦创建多个Resources实例时，是不是意味着新创建的Resources并会包含插件的资源路径。个人理解是这样的。这应该也能解释为啥Small框架会在某些手机的<strong>分屏模式</strong>和某些<strong>横竖屏切换</strong>的时候会发生Crash，详情请查看<a href="https://github.com/wequick/Small/issues/356">#356</a>和<a href="https://github.com/wequick/Small/issues/548">#548</a></li><li>SDK&gt;24时，Small会执行<code>ensureCacheResources</code>希望将新创建的ResourcesImpl的AssetsManger替换掉。但是看到源码中的实现方式是，通过反射为ActivityThread的<code>mH</code>Handler注入一个<code>Handler.Callback</code>。当HandlerCallback handleMessage LAUNCH_ACTIVITY消息时，执行<code>ensureCacheResources</code>方法。查看Handler的<code>dispatchMessage </code>发现<code>mCallback.handleMessage</code>是先于<code>mHandler.handleMessage</code>的。</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Handle system messages here.</span><br><span class="hljs-comment"> */</span><br>public void dispatch<span class="hljs-constructor">Message(Message <span class="hljs-params">msg</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (msg.callback != null) &#123;<br>        handle<span class="hljs-constructor">Callback(<span class="hljs-params">msg</span>)</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (mCallback != null) &#123;<br>            <span class="hljs-keyword">if</span> (mCallback.handle<span class="hljs-constructor">Message(<span class="hljs-params">msg</span>)</span>) &#123;<br>                return;<br>            &#125;<br>        &#125;<br>        handle<span class="hljs-constructor">Message(<span class="hljs-params">msg</span>)</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查看 <strong>0x02 Android资源加载流程</strong> 的资源流程，你会发现Resources对象的实例化并将ResourcesImpl添加到ResourcesManger的缓存列表中是在<code>Handler.handleMessage</code>之后的。所以<code>ensureCacheResources</code>并不能保证启动Activity时<strong>新创建的</strong>ResourcesImpl实例能够被正常hook的！！</p><p>综上所述，这就是文章开头中兴手机Android7.1系统的手机上使用Small框架会发生Crash问题的原因，因为<strong>中兴系统每次打开新的Activity都会创建一个新的Resources和ResourcesImpl实例，而这些都是没有被hook的，不包含插件资源路径</strong>，自然就会发生资源查找失败的异常。解决方法也比较简单，因为是SDK&gt;24的机器，只需要在Small框架的<code>InstrumentationWrapper.callActivityOnCreate</code>方法中执行<code>ReflectAccelerator.ensureCacheResources()</code>就可以解决上面的问题了。</p><p>同时你需要注意另一个问题，查看ActivityThread的源码，在启动Activity流程的<code>performLaunchActivity</code>方法中，在<code>mInstrumentation.callActivityOnCreate</code>之前系统会为Activity设置主题。如果你选择在<code>mInstrumentation.callActivityOnCreate</code>中执行Resources的hook，并且此时需要的主题资源恰好在插件中，那依然会发生Crash。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> Activity perform<span class="hljs-constructor">LaunchActivity(ActivityClientRecord <span class="hljs-params">r</span>, Intent <span class="hljs-params">customIntent</span>)</span> &#123;<br>    ....<br>    ....省略其他代码<br>    <span class="hljs-built_in">int</span> theme = r.activityInfo.get<span class="hljs-constructor">ThemeResource()</span>;<br>    <span class="hljs-keyword">if</span> (theme != <span class="hljs-number">0</span>) &#123;<br>        activity.set<span class="hljs-constructor">Theme(<span class="hljs-params">theme</span>)</span>;<br>    &#125;<br><br>    activity.mCalled = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (r.is<span class="hljs-constructor">Persistable()</span>) &#123;<br>        mInstrumentation.call<span class="hljs-constructor">ActivityOnCreate(<span class="hljs-params">activity</span>, <span class="hljs-params">r</span>.<span class="hljs-params">state</span>, <span class="hljs-params">r</span>.<span class="hljs-params">persistentState</span>)</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        mInstrumentation.call<span class="hljs-constructor">ActivityOnCreate(<span class="hljs-params">activity</span>, <span class="hljs-params">r</span>.<span class="hljs-params">state</span>)</span>;<br>    &#125;<br>    ....省略其他代码<br>    ....<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里我的建议是把你项目中所有的主题定义都放在宿主中，并且修改Small的框架代码在<code>InstrumentationWrapper.callActivityOnCreate</code>方法中执行<code>ReflectAccelerator.ensureCacheResources</code>方法，这样就可以解决Small框架在某些场景下发生<code>Resources$NotFoundException</code>异常的问题。</p><h3 id="0x05-完"><a href="#0x05-完" class="headerlink" title="0x05 完"></a>0x05 完</h3><p>Small插件化框架是我在项目中使用的框架，他的设计和实现思路上都非常优雅，是首选的轻量级插件化框架。以上分析只是对Android源码和Small框架的个人理解，如有理解有误的地方还望指出，个人微信号:tykYang，邮箱:<a href="mailto:&#x79;&#97;&#110;&#x67;&#x66;&#x61;&#x6e;&#x33;&#54;&#x38;&#x37;&#64;&#49;&#x36;&#51;&#46;&#99;&#111;&#109;">&#x79;&#97;&#110;&#x67;&#x66;&#x61;&#x6e;&#x33;&#54;&#x38;&#x37;&#64;&#49;&#x36;&#51;&#46;&#99;&#111;&#109;</a>。🙏🙏🙏</p><h3 id="转载请标明出处病已blog-https-ivonhoe-github-io"><a href="#转载请标明出处病已blog-https-ivonhoe-github-io" class="headerlink" title="转载请标明出处病已blog https://ivonhoe.github.io/"></a>转载请标明出处<a href="https://ivonhoe.github.io/">病已blog https://ivonhoe.github.io/</a></h3>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;这篇文章主要记录了在使用Small插件化框架中遇到的资源加载问题及相应解决方案，并梳理出Android的资源加载流程和插件化框架的资源加载原理。在前两篇插件化技术介绍的基础上会关注更多技术细节，希望能有所收获！&lt;/p&gt;
&lt;h3 id=&quot;关于Small插件化的其他文档：&quot;&gt;&lt;a href=&quot;#关于Small插件化的其他文档：&quot; class=&quot;headerlink&quot; title=&quot;关于Small插件化的其他文档：&quot;&gt;&lt;/a&gt;关于Small插件化的其他文档：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://ivonhoe.github.io/2018/01/18/Small%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/&quot;&gt;&lt;strong&gt;《Android插件化之Small框架实践总结》&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://ivonhoe.github.io/2018/01/18/Small%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/&quot;&gt;&lt;strong&gt;《Android插件化之Small框架原理》&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://ivonhoe.github.io/2018/07/18/abandon-the-plugin-framework/&quot;&gt;&lt;strong&gt;《Android插件化之从入门到放弃》&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;0x01-Small框架的资源加载异常&quot;&gt;&lt;a href=&quot;#0x01-Small框架的资源加载异常&quot; class=&quot;headerlink&quot; title=&quot;0x01 Small框架的资源加载异常&quot;&gt;&lt;/a&gt;0x01 Small框架的资源加载异常&lt;/h3&gt;&lt;p&gt;最近收到一个客户反馈，在他们的中兴V0840手机上打开我们的app会持续崩溃。第一时间在百度移动质量平台上短时租用了该机型，抓取了log。发现是资源查找失败异常。并在Small github issues中搜索&lt;code&gt;android.content.res.Resources$NotFoundException&lt;/code&gt; 可以发现很多类似的问题，详细日志可查看下图。&lt;/p&gt;</summary>
    
    
    
    <category term="Android插件化" scheme="https://ivonhoe.github.io/categories/Android%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
    
    <category term="插件化" scheme="https://ivonhoe.github.io/tags/%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
    <category term="Android" scheme="https://ivonhoe.github.io/tags/Android/"/>
    
    <category term="Android源码" scheme="https://ivonhoe.github.io/tags/Android%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Android插件化之Small框架原理</title>
    <link href="https://ivonhoe.github.io/2018/01/18/small-plugin-1/"/>
    <id>https://ivonhoe.github.io/2018/01/18/small-plugin-1/</id>
    <published>2018-01-18T09:54:19.000Z</published>
    <updated>2018-09-18T09:51:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>Small是一个轻量化的插件化框架，Small的使用介绍可以查看<a href="http://code.wequick.net/Small/cn/quickstart">官网文档</a>)了解，Small项目接入总结可以查看博客的另一篇<a href="https://ivonhoe.github.io/2018/01/18/Small%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/">《Small框架实践总结》</a>。这篇文章主要从以下几个角度来看Small框架的实现原理。</p><ol><li>Small如何实现插件代码打包和资源打包</li><li>Small加载插件代码和资源的原理</li><li>Small代理插件activity生命周期的原理</li></ol><h3 id="关于Small插件化的其他文档："><a href="#关于Small插件化的其他文档：" class="headerlink" title="关于Small插件化的其他文档："></a>关于Small插件化的其他文档：</h3><p><a href="http://ivonhoe.github.io/2018/01/18/Small%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/"><strong>《Android插件化之Small框架实践总结》</strong></a><br><a href="http://ivonhoe.github.io/2018/03/14/small-bug-555-fix/"><strong>《Android插件化之资源加载机制》</strong></a><br><a href="https://ivonhoe.github.io/2018/07/18/abandon-the-plugin-framework/"><strong>《Android插件化之从入门到放弃》</strong></a></p><span id="more"></span><h3 id="0x01-Small如何打包module代码"><a href="#0x01-Small如何打包module代码" class="headerlink" title="0x01 Small如何打包module代码?"></a>0x01 Small如何打包module代码?</h3><p>small插件化中的三种组件角色，分别是<code>app.*</code>，<code>lib.*</code>，<code>宿主</code>。small在打包过程中会根据不同module的类型针对不同组件使用不同编译插件做处理，分别是:</p><ol><li><code>AppPlugin</code> –&gt; <code>app.*</code></li><li><code>LibraryPlugin</code> –&gt; <code>lib.*</code></li><li><code>HostPlugin</code> –&gt; <code>app</code></li><li><code>AssetPlugin </code> –&gt; <code>其他</code></li></ol><p>在处理模块依赖上，首先区分gradle的两种依赖方式:</p><ol><li>Compile: compile是对所有的build type以及flavors都会参与编译并且打包到最终的apk文件中。</li><li>Provided: Provided是对所有的build type以及flavors只在编译时使用，只参与编译，不打包到最终apk。</li></ol><p>在打包<code>app.*</code>插件时，将<code>app.*</code>对其他module的依赖转换成<code>provided</code>依赖。当执行插件打包时可以看做是插件模块执行<code>assembleRelease</code>。</p><p>在打包<code>lib.*</code>插件时，<code>LibraryPlugin</code>会修改插件模块的<code>build.gradle</code>文件，<code>apply plugin: </code>从<code>&#39;com.android.library&#39;</code>修改成<code>&#39;com.android.application&#39;</code>，将对lib的方式转换成app的打包，再执行<code>assembleRelease</code>任务。</p><h4 id="0x02-Small如何解决资源id冲突"><a href="#0x02-Small如何解决资源id冲突" class="headerlink" title="0x02 Small如何解决资源id冲突?"></a>0x02 Small如何解决资源id冲突?</h4><p>Android App资源id的格式是0xPPTTNNNN，其中：</p><ul><li>PP 资源的package id</li><li>TT 资源类型的id，类型是attr、layout、string等等</li><li>NNNN 资源的entry id</li></ul><p>Android App资源的默认packageId是0x7f，当同时加载多个插件apk时。必然会有插件间资源id冲突的情况。业界解决资源id冲突主要通过package id的分段，实现方式一般有两种方式，第一种方式是修改aapt工具源码，让aapt针对插件打包时每个插件的packageId都不相同，重新编译出aapt，而达到解决资源id冲突的问题。small框架使用的是另外一种方式，那就是读取并重写resources.arsc文件。大致的处理流程如下（出自small原作者在github issues的回答）：</p><ol><li>编译完整的资源包，利用symbol&#x2F;R.txt搜集完整包entries的资源信息</li><li>搜集当前插件包res目录的entry信息</li><li>根据(2)，通过重新排序分配各个entry的资源id，并结合(1),形成旧id到新id的映射</li><li>解析(1)生成的resources.arsc文件，利用(3)进行过滤输出</li></ol><h4 id="0x03-Small如何加载插件代码？"><a href="#0x03-Small如何加载插件代码？" class="headerlink" title="0x03 Small如何加载插件代码？"></a>0x03 Small如何加载插件代码？</h4><p>Small的加载插件代码的方式基于android dex分包方案的，简单的说small通过将多个dex文件塞入到app的classloader中，达到加载插件代码的目的。Small并不会更换系统的classloader，所以这样在面对多种不同机型时可能就不会遇到的兼容性问题。</p><p>怎样把多个dex文件塞入系统classloader中，可以看下<a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&mid=400118620&idx=1&sn=b4fdd5055731290eef12ad0d17f39d4a&scene=0">QQ空间的热修复方案</a></p><h4 id="0x04-Small如何加载插件资源"><a href="#0x04-Small如何加载插件资源" class="headerlink" title="0x04 Small如何加载插件资源?"></a>0x04 Small如何加载插件资源?</h4><p>Android资源是由 <a href="https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/content/res/AssetManager.java">AssetManager</a> 加载的。应用启动时系统创建一个AssetManager实例，并通过<code>addAssetPath</code>方法添加资源路径，默认添加:</p><ul><li>“&#x2F;framework&#x2F;base.apk” - Android base resources (base)</li><li>“&#x2F;data&#x2F;app&#x2F;*.apk” - The launching apk resources (host)</li></ul><p>那么如何让插件的资源能够被系统加载？Small的方式是自己创建的AssetManager，调用AssetManger的<code>addAssetPath</code>方法添加插件资源路径，再将系统创建的AssetManager替换掉。</p><p>Hook AssetManager路径如下:</p><figure class="highlight 1c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs 1c">ActivityThread<br><span class="hljs-string">|</span><br><span class="hljs-string">|---ResourcesManager mResourcesManager</span><br>    <span class="hljs-string">|</span><br>    <span class="hljs-string">|--- ArrayList&lt;WeakReference&lt;Resources&gt;&gt; mResourceReferences</span><br>         <span class="hljs-string">|</span><br>         <span class="hljs-string">|--- ResourcesImpl mResourcesImpl</span><br>              <span class="hljs-string">|</span><br>              <span class="hljs-string">|--- AssetManager mAssets</span><br>         <br>    <span class="hljs-string">|--- ArrayMap&lt;ResourcesKey, WeakReference&lt;ResourcesImpl&gt;&gt; mResourceImpls</span><br>         <span class="hljs-string">|</span><br>         <span class="hljs-string">|--- ResourcesImpl mResourcesImpl</span><br>              <span class="hljs-string">|</span><br>              <span class="hljs-string">|--- AssetManager mAssets</span><br><br></code></pre></td></tr></table></figure><h4 id="0x05-Small如何代理插件Activity的生命周期"><a href="#0x05-Small如何代理插件Activity的生命周期" class="headerlink" title="0x05 Small如何代理插件Activity的生命周期?"></a>0x05 Small如何代理插件Activity的生命周期?</h4><p>先看Andriod中Activity是如何启动的。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 1c">MyActivity.startActivity()<br><span class="hljs-string">|</span><br><span class="hljs-string">|--&gt;Activity.startActivity() </span><br>    <span class="hljs-string">|</span><br>    <span class="hljs-string">|--&gt;Activity.startActivityForResult()</span><br>        <span class="hljs-string">|</span><br>        <span class="hljs-string">|--&gt;Instrumentation.execStartActivty()</span><br>            <span class="hljs-string">|</span><br>            <span class="hljs-string">|--&gt;ActivityManagerNative.getDefault().startActivityAsUser()</span><br><br></code></pre></td></tr></table></figure><p>通过 Activity 的启动流程可以发现，Activity是由 <a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/ActivityThread.java">ActivityThread</a> 和 <a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/Instrumentation.java">Instrumentation</a> 启动的，Instrumentation有关Activity启动相关的方法大概有：execStartActivity、newActivity等等。Small是这样操作的: </p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs 1c">MyActivity.startActivity()<br><span class="hljs-string">|</span><br><span class="hljs-string">|--&gt;Activity.startActivity() </span><br>    <span class="hljs-string">|</span><br>    <span class="hljs-string">|--&gt;Activity.startActivityForResult()</span><br>        <span class="hljs-string">|</span><br>        <span class="hljs-string">|--&gt;InstrumentationWrapper.execStartActivty()</span><br>            <span class="hljs-string">|</span><br>            <span class="hljs-string">|--&gt; InstrumentationWrapper.wrapIntent() 将 Intent &#123; cmp=net.wequick.example.small/.app.main.MainActivity &#125;</span><br>            <span class="hljs-string">|--&gt; 转换成 Intent &#123; cat=[&gt;net.wequick.example.small.app.main.MainActivity] cmp=net.wequick.example.small/net.wequick.small.A &#125;</span><br>                <span class="hljs-string">|</span><br>                <span class="hljs-string">|--&gt;Instrumentation.execStartActivty()</span><br>                    <span class="hljs-string">|</span><br>                    <span class="hljs-string">|--&gt;ActivityManagerNative.getDefault().startActivityAsUser()</span><br><br></code></pre></td></tr></table></figure><p>Small首先在宿主manifest中注册一个命名特殊的占坑activity来欺骗系统获取生命周期，在封装一个Instrumentation替换掉宿主的，系统启动的是A这个activity，但classloader实际加载的代码却是 MainActivity.class 这个类。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Stub Activities --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.A&quot;</span> <span class="hljs-attr">android:launchMode</span>=<span class="hljs-string">&quot;standard&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>伪代码如下: </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ActivityThread thread = current<span class="hljs-constructor">ActivityThread()</span>;<br>Instrumentation base = thread.@mInstrumentation;<br>Instrumentation wrapper = <span class="hljs-keyword">new</span> <span class="hljs-constructor">InstrumentationWrapper(<span class="hljs-params">base</span>)</span>;<br>thread.@mInstrumentation = wrapper;<br><br><span class="hljs-keyword">class</span> InstrumentationWrapper extends Instrumentation &#123;<br>    public ActivityResult exec<span class="hljs-constructor">StartActivity(<span class="hljs-operator">...</span>, Intent <span class="hljs-params">intent</span>, <span class="hljs-operator">...</span>)</span> &#123;<br>        fake<span class="hljs-constructor">ToStub(<span class="hljs-params">intent</span>)</span>;<br>        base.exec<span class="hljs-constructor">StartActivity(<span class="hljs-params">args</span>)</span>;<br>    &#125;<br><br>    @Override<br>    public Activity <span class="hljs-keyword">new</span><span class="hljs-constructor">Activity(ClassLoader <span class="hljs-params">cl</span>, String <span class="hljs-params">className</span>, Intent <span class="hljs-params">intent</span>)</span> &#123;<br>        className = restore<span class="hljs-constructor">ToReal(<span class="hljs-params">intent</span>, <span class="hljs-params">className</span>)</span>;<br>        return base.<span class="hljs-keyword">new</span><span class="hljs-constructor">Activity(<span class="hljs-params">cl</span>, <span class="hljs-params">className</span>, <span class="hljs-params">intent</span>)</span>;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><h4 id="0x06-Small如何动态更新插件模块"><a href="#0x06-Small如何动态更新插件模块" class="headerlink" title="0x06 Small如何动态更新插件模块?"></a>0x06 Small如何动态更新插件模块?</h4><p><a href="https://github.com/wequick/Small/blob/master/Android/Sample/app.home/src/main/java/net/wequick/example/small/app/home/MainFragment.java">查看github sample实现方式</a></p><h4 id="0x07-参考文档"><a href="#0x07-参考文档" class="headerlink" title="0x07 参考文档"></a>0x07 参考文档</h4><p><a href="https://github.com/wequick/Small/wiki">Small 官方 wiki</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&mid=400118620&idx=1&sn=b4fdd5055731290eef12ad0d17f39d4a&scene=0">QQ空间热补丁动态修复技术介绍</a></p><h3 id="转载请标明出处病已blog-https-ivonhoe-github-io"><a href="#转载请标明出处病已blog-https-ivonhoe-github-io" class="headerlink" title="转载请标明出处病已blog https://ivonhoe.github.io/"></a>转载请标明出处<a href="https://ivonhoe.github.io/">病已blog https://ivonhoe.github.io/</a></h3>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;Small是一个轻量化的插件化框架，Small的使用介绍可以查看&lt;a href=&quot;http://code.wequick.net/Small/cn/quickstart&quot;&gt;官网文档&lt;/a&gt;)了解，Small项目接入总结可以查看博客的另一篇&lt;a href=&quot;https://ivonhoe.github.io/2018/01/18/Small%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/&quot;&gt;《Small框架实践总结》&lt;/a&gt;。这篇文章主要从以下几个角度来看Small框架的实现原理。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Small如何实现插件代码打包和资源打包&lt;/li&gt;
&lt;li&gt;Small加载插件代码和资源的原理&lt;/li&gt;
&lt;li&gt;Small代理插件activity生命周期的原理&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;关于Small插件化的其他文档：&quot;&gt;&lt;a href=&quot;#关于Small插件化的其他文档：&quot; class=&quot;headerlink&quot; title=&quot;关于Small插件化的其他文档：&quot;&gt;&lt;/a&gt;关于Small插件化的其他文档：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://ivonhoe.github.io/2018/01/18/Small%E6%A1%86%E6%9E%B6%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/&quot;&gt;&lt;strong&gt;《Android插件化之Small框架实践总结》&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://ivonhoe.github.io/2018/03/14/small-bug-555-fix/&quot;&gt;&lt;strong&gt;《Android插件化之资源加载机制》&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://ivonhoe.github.io/2018/07/18/abandon-the-plugin-framework/&quot;&gt;&lt;strong&gt;《Android插件化之从入门到放弃》&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Android插件化" scheme="https://ivonhoe.github.io/categories/Android%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
    
    <category term="插件化" scheme="https://ivonhoe.github.io/tags/%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
    <category term="Android" scheme="https://ivonhoe.github.io/tags/Android/"/>
    
  </entry>
  
</feed>
